/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.proto.CProtoBucket', null, global);
goog.exportSymbol('proto.proto.CProtoBucket.CProtoCard', null, global);
goog.exportSymbol('proto.proto.CProtoCard', null, global);
goog.exportSymbol('proto.proto.CProtoClientHead', null, global);
goog.exportSymbol('proto.proto.CProtoClientHead.emRouteType', null, global);
goog.exportSymbol('proto.proto.CProtoClientVersion', null, global);
goog.exportSymbol('proto.proto.CProtoCommonOption', null, global);
goog.exportSymbol('proto.proto.CProtoDouDiZhuOption', null, global);
goog.exportSymbol('proto.proto.CProtoDouNiuOption', null, global);
goog.exportSymbol('proto.proto.CProtoEnterRoom', null, global);
goog.exportSymbol('proto.proto.CProtoGameBreif', null, global);
goog.exportSymbol('proto.proto.CProtoGameBreif.CProtoItem', null, global);
goog.exportSymbol('proto.proto.CProtoKaErTiaoOption', null, global);
goog.exportSymbol('proto.proto.CProtoKaXinWuOption', null, global);
goog.exportSymbol('proto.proto.CProtoKoreaHuaPaiOption', null, global);
goog.exportSymbol('proto.proto.CProtoLaoYanCaiOption', null, global);
goog.exportSymbol('proto.proto.CProtoLinCangOption', null, global);
goog.exportSymbol('proto.proto.CProtoLinCangOption.emPrio', null, global);
goog.exportSymbol('proto.proto.CProtoLoginData', null, global);
goog.exportSymbol('proto.proto.CProtoLoginServer', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyAddCardCount', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyAddPlayer', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyBridgeGameServer', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyBroadcastShow', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyCanBaoJiao', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyChangeCard', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyChiPeng', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyCreaterRemoveRoom', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyDingQue', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyDingQueOver', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyEnterRoom', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyErrorCode', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyFinalReport', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyFinalReport.CProtoItem', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyFortune', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyHaiDiCard', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyHaiDiLaoYue', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyMakeDecisionCS', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyMyTurnToShow', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyNotice', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyNotice.emType', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyOffLineState', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyOptAfterOutHu', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyOutHu', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyQiShouHu', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyQiShouHu.CProtoItem', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyRemoveBuGang', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyRemovePlayer', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyReturnDiamond', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyRoomPlayerCount', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyRoomState', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyRoomState.CProtoItem', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyRoundReport', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyRoundReport.CProtoBird', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyRoundReport.CProtoHuCard', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyRoundReport.CProtoItem', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyRoundState', null, global);
goog.exportSymbol('proto.proto.CProtoNotifySaveClient', null, global);
goog.exportSymbol('proto.proto.CProtoNotifySettleAccount', null, global);
goog.exportSymbol('proto.proto.CProtoNotifySettleAccount.CProtoScoreItem', null, global);
goog.exportSymbol('proto.proto.CProtoNotifySettleAccount.CProtoUserScore', null, global);
goog.exportSymbol('proto.proto.CProtoNotifySettleAccount.emScoreType', null, global);
goog.exportSymbol('proto.proto.CProtoNotifySettleAccount.emUserType', null, global);
goog.exportSymbol('proto.proto.CProtoNotifySettleDetails', null, global);
goog.exportSymbol('proto.proto.CProtoNotifySettleDetails.CProtoScoreItem', null, global);
goog.exportSymbol('proto.proto.CProtoNotifySettleDetails.CProtoSelfItem', null, global);
goog.exportSymbol('proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem', null, global);
goog.exportSymbol('proto.proto.CProtoNotifySettleDetails.emSubType', null, global);
goog.exportSymbol('proto.proto.CProtoNotifySettleDetails.emType', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyShowTile', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyShowTile.CProtoShowStruct', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyStartChooseCard', null, global);
goog.exportSymbol('proto.proto.CProtoNotifyStartGame', null, global);
goog.exportSymbol('proto.proto.CProtoPlayType', null, global);
goog.exportSymbol('proto.proto.CProtoReqAckDismiss', null, global);
goog.exportSymbol('proto.proto.CProtoReqActivity', null, global);
goog.exportSymbol('proto.proto.CProtoReqBaoJiaoOpt', null, global);
goog.exportSymbol('proto.proto.CProtoReqCardLog', null, global);
goog.exportSymbol('proto.proto.CProtoReqChatMsg', null, global);
goog.exportSymbol('proto.proto.CProtoReqChooseCard', null, global);
goog.exportSymbol('proto.proto.CProtoReqCreateCsRoom', null, global);
goog.exportSymbol('proto.proto.CProtoReqDingQue', null, global);
goog.exportSymbol('proto.proto.CProtoReqDismissRoom', null, global);
goog.exportSymbol('proto.proto.CProtoReqFengUser', null, global);
goog.exportSymbol('proto.proto.CProtoReqGameConfig', null, global);
goog.exportSymbol('proto.proto.CProtoReqGetFreeDiamond', null, global);
goog.exportSymbol('proto.proto.CProtoReqGmCmd', null, global);
goog.exportSymbol('proto.proto.CProtoReqGmDismissRoom', null, global);
goog.exportSymbol('proto.proto.CProtoReqHaiDiLaoYue', null, global);
goog.exportSymbol('proto.proto.CProtoReqHeartbeat', null, global);
goog.exportSymbol('proto.proto.CProtoReqHistoryRecord', null, global);
goog.exportSymbol('proto.proto.CProtoReqHistoryRecord.emRecordType', null, global);
goog.exportSymbol('proto.proto.CProtoReqHistoryRound', null, global);
goog.exportSymbol('proto.proto.CProtoReqJoinRoom', null, global);
goog.exportSymbol('proto.proto.CProtoReqLimitFree', null, global);
goog.exportSymbol('proto.proto.CProtoReqLocations', null, global);
goog.exportSymbol('proto.proto.CProtoReqLogin', null, global);
goog.exportSymbol('proto.proto.CProtoReqMyRoomList', null, global);
goog.exportSymbol('proto.proto.CProtoReqOptAfterOutHu', null, global);
goog.exportSymbol('proto.proto.CProtoReqPlayerDecision', null, global);
goog.exportSymbol('proto.proto.CProtoReqPlayerDecision.CProtoThinkItem', null, global);
goog.exportSymbol('proto.proto.CProtoReqQiShouHu', null, global);
goog.exportSymbol('proto.proto.CProtoReqQueryRoom', null, global);
goog.exportSymbol('proto.proto.CProtoReqQueryRoomInfo', null, global);
goog.exportSymbol('proto.proto.CProtoReqQuitRoom', null, global);
goog.exportSymbol('proto.proto.CProtoReqReady', null, global);
goog.exportSymbol('proto.proto.CProtoReqReplay', null, global);
goog.exportSymbol('proto.proto.CProtoReqReplaySSS', null, global);
goog.exportSymbol('proto.proto.CProtoReqServerRegist', null, global);
goog.exportSymbol('proto.proto.CProtoReqSetUserType', null, global);
goog.exportSymbol('proto.proto.CProtoReqShareBtn', null, global);
goog.exportSymbol('proto.proto.CProtoReqShareReplay', null, global);
goog.exportSymbol('proto.proto.CProtoReqSharedDiamond', null, global);
goog.exportSymbol('proto.proto.CProtoReqStatData', null, global);
goog.exportSymbol('proto.proto.CProtoReqTargetInfo', null, global);
goog.exportSymbol('proto.proto.CProtoReqTransferCard', null, global);
goog.exportSymbol('proto.proto.CProtoReqTransferLog', null, global);
goog.exportSymbol('proto.proto.CProtoReqTransferLogByMid', null, global);
goog.exportSymbol('proto.proto.CProtoReqTransferLogByTime', null, global);
goog.exportSymbol('proto.proto.CProtoReqUserData', null, global);
goog.exportSymbol('proto.proto.CProtoReqWriteLog', null, global);
goog.exportSymbol('proto.proto.CProtoRspActivity', null, global);
goog.exportSymbol('proto.proto.CProtoRspActivity.activity', null, global);
goog.exportSymbol('proto.proto.CProtoRspAfterGANG', null, global);
goog.exportSymbol('proto.proto.CProtoRspAfterGANG.CProtoGangItem', null, global);
goog.exportSymbol('proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem', null, global);
goog.exportSymbol('proto.proto.CProtoRspBaoJiaoOpt', null, global);
goog.exportSymbol('proto.proto.CProtoRspBaoJiaoOpt.CProtoCard', null, global);
goog.exportSymbol('proto.proto.CProtoRspBroadcast', null, global);
goog.exportSymbol('proto.proto.CProtoRspBroadcastDecision', null, global);
goog.exportSymbol('proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList', null, global);
goog.exportSymbol('proto.proto.CProtoRspBroadcastDecision.CProtoThink', null, global);
goog.exportSymbol('proto.proto.CProtoRspChatMsg', null, global);
goog.exportSymbol('proto.proto.CProtoRspChooseCard', null, global);
goog.exportSymbol('proto.proto.CProtoRspCreateCsRoom', null, global);
goog.exportSymbol('proto.proto.CProtoRspDismissRoom', null, global);
goog.exportSymbol('proto.proto.CProtoRspFengUser', null, global);
goog.exportSymbol('proto.proto.CProtoRspGameConfig', null, global);
goog.exportSymbol('proto.proto.CProtoRspGameConfig.CProtoCardItem', null, global);
goog.exportSymbol('proto.proto.CProtoRspGameConfig.CProtoCardItemPK', null, global);
goog.exportSymbol('proto.proto.CProtoRspGetFreeDiamond', null, global);
goog.exportSymbol('proto.proto.CProtoRspGmCmd', null, global);
goog.exportSymbol('proto.proto.CProtoRspGmDismissRoom', null, global);
goog.exportSymbol('proto.proto.CProtoRspHeartbeat', null, global);
goog.exportSymbol('proto.proto.CProtoRspHistoryRecord', null, global);
goog.exportSymbol('proto.proto.CProtoRspHistoryRecord.CProtoCellData', null, global);
goog.exportSymbol('proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo', null, global);
goog.exportSymbol('proto.proto.CProtoRspHistoryRound', null, global);
goog.exportSymbol('proto.proto.CProtoRspHistoryRound.CProtoMatchData', null, global);
goog.exportSymbol('proto.proto.CProtoRspJoinRoom', null, global);
goog.exportSymbol('proto.proto.CProtoRspLimitFree', null, global);
goog.exportSymbol('proto.proto.CProtoRspLocations', null, global);
goog.exportSymbol('proto.proto.CProtoRspLocations.locationInfo', null, global);
goog.exportSymbol('proto.proto.CProtoRspLogin', null, global);
goog.exportSymbol('proto.proto.CProtoRspLoginServer', null, global);
goog.exportSymbol('proto.proto.CProtoRspMyRoomList', null, global);
goog.exportSymbol('proto.proto.CProtoRspMyRoomList.CProtoItem', null, global);
goog.exportSymbol('proto.proto.CProtoRspQiShouHu', null, global);
goog.exportSymbol('proto.proto.CProtoRspQueryRoom', null, global);
goog.exportSymbol('proto.proto.CProtoRspQueryRoomInfo', null, global);
goog.exportSymbol('proto.proto.CProtoRspQuitRoom', null, global);
goog.exportSymbol('proto.proto.CProtoRspReady', null, global);
goog.exportSymbol('proto.proto.CProtoRspReconnectRoomInfo', null, global);
goog.exportSymbol('proto.proto.CProtoRspReplay', null, global);
goog.exportSymbol('proto.proto.CProtoRspReplaySSS', null, global);
goog.exportSymbol('proto.proto.CProtoRspReplaySSS.CProtoReplayInfo', null, global);
goog.exportSymbol('proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo', null, global);
goog.exportSymbol('proto.proto.CProtoRspReplaySSS.CProtoUserInfo', null, global);
goog.exportSymbol('proto.proto.CProtoRspReplaySSS.CProtoUsers', null, global);
goog.exportSymbol('proto.proto.CProtoRspServerRegist', null, global);
goog.exportSymbol('proto.proto.CProtoRspSetUserType', null, global);
goog.exportSymbol('proto.proto.CProtoRspShareBtn', null, global);
goog.exportSymbol('proto.proto.CProtoRspShareReplay', null, global);
goog.exportSymbol('proto.proto.CProtoRspShareReplay.CProtoReplayItem', null, global);
goog.exportSymbol('proto.proto.CProtoRspSharedDiamond', null, global);
goog.exportSymbol('proto.proto.CProtoRspStatData', null, global);
goog.exportSymbol('proto.proto.CProtoRspStatData.CProtoItem', null, global);
goog.exportSymbol('proto.proto.CProtoRspTargetInfo', null, global);
goog.exportSymbol('proto.proto.CProtoRspTransferCard', null, global);
goog.exportSymbol('proto.proto.CProtoRspTransferLog', null, global);
goog.exportSymbol('proto.proto.CProtoRspTransferLog.CProtoItem', null, global);
goog.exportSymbol('proto.proto.CProtoRspTransferLogByMid', null, global);
goog.exportSymbol('proto.proto.CProtoRspTransferLogByMid.CProtoItem', null, global);
goog.exportSymbol('proto.proto.CProtoRspTransferLogByTime', null, global);
goog.exportSymbol('proto.proto.CProtoRspTransferLogByTime.CProtoItem', null, global);
goog.exportSymbol('proto.proto.CProtoRspUpdateScore', null, global);
goog.exportSymbol('proto.proto.CProtoRspUserData', null, global);
goog.exportSymbol('proto.proto.CProtoRsqCardLog', null, global);
goog.exportSymbol('proto.proto.CProtoRsqCardLog.CProtoCellData', null, global);
goog.exportSymbol('proto.proto.CProtoRsqCardLog.CProtoPlayerInfo', null, global);
goog.exportSymbol('proto.proto.CProtoRsqDingQue', null, global);
goog.exportSymbol('proto.proto.CProtoShiSanShuiOption', null, global);
goog.exportSymbol('proto.proto.CProtoStepsInfo', null, global);
goog.exportSymbol('proto.proto.CProtoStepsInfo.CProtoGangHuaOpt', null, global);
goog.exportSymbol('proto.proto.CProtoStepsInfo.emActionType', null, global);
goog.exportSymbol('proto.proto.CProtoUserInfo', null, global);
goog.exportSymbol('proto.proto.CProtoXiangYunOption', null, global);
goog.exportSymbol('proto.proto.CProtoXueZhanOption', null, global);
goog.exportSymbol('proto.proto.CProtoZhaJinHuaOption', null, global);
goog.exportSymbol('proto.proto.CSubHistoryRoundPK', null, global);
goog.exportSymbol('proto.proto.action', null, global);
goog.exportSymbol('proto.proto.action.emAction', null, global);
goog.exportSymbol('proto.proto.cmd', null, global);
goog.exportSymbol('proto.proto.emPlayType', null, global);
goog.exportSymbol('proto.proto.error_code', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.action = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.action, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.action.displayName = 'proto.proto.action';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.action.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.action.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.action} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.action.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.action}
 */
proto.proto.action.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.action;
  return proto.proto.action.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.action} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.action}
 */
proto.proto.action.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.action.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.action.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.action} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.action.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.proto.action.emAction = {
  KDAPAI: 1,
  KHU: 2,
  KANGANG: 3,
  KMINGGANG: 4,
  KPENG: 5,
  KCHI: 6,
  KBAOJIAO: 7,
  KGANGSHANGHUA: 9,
  KSHUANGHUA: 10,
  KANBU: 11,
  KMINGBU: 12,
  KGUO: 20,
  KSANJINDAO: 21,
  KTIANHU: 22,
  KDIHU: 23,
  KQIANGJINWITHQUELONG: 24,
  KQIANGJIN: 25,
  KQINGYISE: 26,
  KJINLONG: 27,
  KJINQUE: 28,
  KWUHUAWUGANG: 29,
  KJINKAN: 30,
  KNONE: 255
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoClientHead = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoClientHead, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoClientHead.displayName = 'proto.proto.CProtoClientHead';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoClientHead.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoClientHead.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoClientHead} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoClientHead.toObject = function(includeInstance, msg) {
  var f, obj = {
    routeType: jspb.Message.getField(msg, 1),
    gameType: jspb.Message.getField(msg, 2),
    roomId: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoClientHead}
 */
proto.proto.CProtoClientHead.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoClientHead;
  return proto.proto.CProtoClientHead.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoClientHead} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoClientHead}
 */
proto.proto.CProtoClientHead.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRouteType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGameType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoClientHead.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoClientHead.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoClientHead} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoClientHead.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.CProtoClientHead.emRouteType = {
  EMRT_COMMON: 0,
  EMRT_BYROOMID: 1,
  EMRT_BYLATESTGAME: 2,
  EMRT_BYGAMETYPE: 3,
  EMRT_BYALL: 4
};

/**
 * optional int32 route_type = 1;
 * @return {number}
 */
proto.proto.CProtoClientHead.prototype.getRouteType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoClientHead.prototype.setRouteType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoClientHead.prototype.clearRouteType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoClientHead.prototype.hasRouteType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 game_type = 2;
 * @return {number}
 */
proto.proto.CProtoClientHead.prototype.getGameType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoClientHead.prototype.setGameType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoClientHead.prototype.clearGameType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoClientHead.prototype.hasGameType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 room_id = 3;
 * @return {number}
 */
proto.proto.CProtoClientHead.prototype.getRoomId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoClientHead.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoClientHead.prototype.clearRoomId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoClientHead.prototype.hasRoomId = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoCard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoCard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoCard.displayName = 'proto.proto.CProtoCard';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoCard.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoCard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoCard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoCard.toObject = function(includeInstance, msg) {
  var f, obj = {
    mColor: jspb.Message.getField(msg, 1),
    mNumber: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoCard}
 */
proto.proto.CProtoCard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoCard;
  return proto.proto.CProtoCard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoCard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoCard}
 */
proto.proto.CProtoCard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMColor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoCard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoCard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoCard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoCard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 m_color = 1;
 * @return {number}
 */
proto.proto.CProtoCard.prototype.getMColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoCard.prototype.setMColor = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoCard.prototype.clearMColor = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoCard.prototype.hasMColor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_number = 2;
 * @return {number}
 */
proto.proto.CProtoCard.prototype.getMNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoCard.prototype.setMNumber = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoCard.prototype.clearMNumber = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoCard.prototype.hasMNumber = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqLogin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqLogin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqLogin.displayName = 'proto.proto.CProtoReqLogin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqLogin.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqLogin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqLogin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqLogin.toObject = function(includeInstance, msg) {
  var f, obj = {
    mid: jspb.Message.getField(msg, 1),
    token: jspb.Message.getField(msg, 2),
    time: jspb.Message.getField(msg, 3),
    mClientversion: (f = msg.getMClientversion()) && proto.proto.CProtoClientVersion.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqLogin}
 */
proto.proto.CProtoReqLogin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqLogin;
  return proto.proto.CProtoReqLogin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqLogin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqLogin}
 */
proto.proto.CProtoReqLogin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTime(value);
      break;
    case 4:
      var value = new proto.proto.CProtoClientVersion;
      reader.readMessage(value,proto.proto.CProtoClientVersion.deserializeBinaryFromReader);
      msg.setMClientversion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqLogin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqLogin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqLogin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqLogin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getMClientversion();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.proto.CProtoClientVersion.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 mid = 1;
 * @return {number}
 */
proto.proto.CProtoReqLogin.prototype.getMid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoReqLogin.prototype.setMid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqLogin.prototype.clearMid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqLogin.prototype.hasMid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string token = 2;
 * @return {string}
 */
proto.proto.CProtoReqLogin.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.CProtoReqLogin.prototype.setToken = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoReqLogin.prototype.clearToken = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqLogin.prototype.hasToken = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 time = 3;
 * @return {number}
 */
proto.proto.CProtoReqLogin.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoReqLogin.prototype.setTime = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoReqLogin.prototype.clearTime = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqLogin.prototype.hasTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required CProtoClientVersion m_clientVersion = 4;
 * @return {!proto.proto.CProtoClientVersion}
 */
proto.proto.CProtoReqLogin.prototype.getMClientversion = function() {
  return /** @type{!proto.proto.CProtoClientVersion} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoClientVersion, 4, 1));
};


/** @param {!proto.proto.CProtoClientVersion} value */
proto.proto.CProtoReqLogin.prototype.setMClientversion = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.proto.CProtoReqLogin.prototype.clearMClientversion = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqLogin.prototype.hasMClientversion = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoLoginData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoLoginData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoLoginData.displayName = 'proto.proto.CProtoLoginData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoLoginData.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoLoginData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoLoginData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoLoginData.toObject = function(includeInstance, msg) {
  var f, obj = {
    platform: jspb.Message.getField(msg, 1),
    deviceId: jspb.Message.getField(msg, 2),
    ip: jspb.Message.getField(msg, 3),
    gender: jspb.Message.getField(msg, 4),
    nickname: jspb.Message.getField(msg, 5),
    imgUrl: jspb.Message.getField(msg, 6),
    wxUnionid: jspb.Message.getField(msg, 7),
    mid: jspb.Message.getField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoLoginData}
 */
proto.proto.CProtoLoginData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoLoginData;
  return proto.proto.CProtoLoginData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoLoginData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoLoginData}
 */
proto.proto.CProtoLoginData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlatform(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGender(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setImgUrl(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setWxUnionid(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoLoginData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoLoginData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoLoginData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoLoginData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * required string platform = 1;
 * @return {string}
 */
proto.proto.CProtoLoginData.prototype.getPlatform = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.CProtoLoginData.prototype.setPlatform = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoLoginData.prototype.clearPlatform = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoLoginData.prototype.hasPlatform = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string device_id = 2;
 * @return {string}
 */
proto.proto.CProtoLoginData.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.CProtoLoginData.prototype.setDeviceId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoLoginData.prototype.clearDeviceId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoLoginData.prototype.hasDeviceId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string ip = 3;
 * @return {string}
 */
proto.proto.CProtoLoginData.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.proto.CProtoLoginData.prototype.setIp = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoLoginData.prototype.clearIp = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoLoginData.prototype.hasIp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 gender = 4;
 * @return {number}
 */
proto.proto.CProtoLoginData.prototype.getGender = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.CProtoLoginData.prototype.setGender = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoLoginData.prototype.clearGender = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoLoginData.prototype.hasGender = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required string nickname = 5;
 * @return {string}
 */
proto.proto.CProtoLoginData.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.proto.CProtoLoginData.prototype.setNickname = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.proto.CProtoLoginData.prototype.clearNickname = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoLoginData.prototype.hasNickname = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required string img_url = 6;
 * @return {string}
 */
proto.proto.CProtoLoginData.prototype.getImgUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.proto.CProtoLoginData.prototype.setImgUrl = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.proto.CProtoLoginData.prototype.clearImgUrl = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoLoginData.prototype.hasImgUrl = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required string wx_unionid = 7;
 * @return {string}
 */
proto.proto.CProtoLoginData.prototype.getWxUnionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.proto.CProtoLoginData.prototype.setWxUnionid = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.proto.CProtoLoginData.prototype.clearWxUnionid = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoLoginData.prototype.hasWxUnionid = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required int32 mid = 8;
 * @return {number}
 */
proto.proto.CProtoLoginData.prototype.getMid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.proto.CProtoLoginData.prototype.setMid = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.proto.CProtoLoginData.prototype.clearMid = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoLoginData.prototype.hasMid = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspLogin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRspLogin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspLogin.displayName = 'proto.proto.CProtoRspLogin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspLogin.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspLogin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspLogin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspLogin.toObject = function(includeInstance, msg) {
  var f, obj = {
    mErrorcode: jspb.Message.getField(msg, 1),
    mSeed: jspb.Message.getField(msg, 2),
    mId: jspb.Message.getField(msg, 3),
    mTotalplaynum: jspb.Message.getField(msg, 4),
    mErrormsg: jspb.Message.getField(msg, 5),
    remainGame: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspLogin}
 */
proto.proto.CProtoRspLogin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspLogin;
  return proto.proto.CProtoRspLogin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspLogin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspLogin}
 */
proto.proto.CProtoRspLogin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMErrorcode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMSeed(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMTotalplaynum(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMErrormsg(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRemainGame(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspLogin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspLogin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspLogin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspLogin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * required int32 m_errorCode = 1;
 * @return {number}
 */
proto.proto.CProtoRspLogin.prototype.getMErrorcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspLogin.prototype.setMErrorcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspLogin.prototype.clearMErrorcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspLogin.prototype.hasMErrorcode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_seed = 2;
 * @return {number}
 */
proto.proto.CProtoRspLogin.prototype.getMSeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoRspLogin.prototype.setMSeed = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoRspLogin.prototype.clearMSeed = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspLogin.prototype.hasMSeed = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 m_id = 3;
 * @return {number}
 */
proto.proto.CProtoRspLogin.prototype.getMId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoRspLogin.prototype.setMId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoRspLogin.prototype.clearMId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspLogin.prototype.hasMId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 m_totalPlayNum = 4;
 * @return {number}
 */
proto.proto.CProtoRspLogin.prototype.getMTotalplaynum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.CProtoRspLogin.prototype.setMTotalplaynum = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoRspLogin.prototype.clearMTotalplaynum = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspLogin.prototype.hasMTotalplaynum = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string m_errorMsg = 5;
 * @return {string}
 */
proto.proto.CProtoRspLogin.prototype.getMErrormsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.proto.CProtoRspLogin.prototype.setMErrormsg = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.proto.CProtoRspLogin.prototype.clearMErrormsg = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspLogin.prototype.hasMErrormsg = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required bool remain_game = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoRspLogin.prototype.getRemainGame = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.proto.CProtoRspLogin.prototype.setRemainGame = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.proto.CProtoRspLogin.prototype.clearRemainGame = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspLogin.prototype.hasRemainGame = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqServerRegist = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqServerRegist, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqServerRegist.displayName = 'proto.proto.CProtoReqServerRegist';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqServerRegist.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqServerRegist.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqServerRegist} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqServerRegist.toObject = function(includeInstance, msg) {
  var f, obj = {
    beginRoomId: jspb.Message.getField(msg, 1),
    endRoomId: jspb.Message.getField(msg, 2),
    gameType: jspb.Message.getField(msg, 3),
    startTime: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqServerRegist}
 */
proto.proto.CProtoReqServerRegist.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqServerRegist;
  return proto.proto.CProtoReqServerRegist.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqServerRegist} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqServerRegist}
 */
proto.proto.CProtoReqServerRegist.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBeginRoomId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndRoomId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGameType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqServerRegist.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqServerRegist.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqServerRegist} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqServerRegist.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 begin_room_id = 1;
 * @return {number}
 */
proto.proto.CProtoReqServerRegist.prototype.getBeginRoomId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoReqServerRegist.prototype.setBeginRoomId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqServerRegist.prototype.clearBeginRoomId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqServerRegist.prototype.hasBeginRoomId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 end_room_id = 2;
 * @return {number}
 */
proto.proto.CProtoReqServerRegist.prototype.getEndRoomId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoReqServerRegist.prototype.setEndRoomId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoReqServerRegist.prototype.clearEndRoomId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqServerRegist.prototype.hasEndRoomId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 game_type = 3;
 * @return {number}
 */
proto.proto.CProtoReqServerRegist.prototype.getGameType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoReqServerRegist.prototype.setGameType = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoReqServerRegist.prototype.clearGameType = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqServerRegist.prototype.hasGameType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 start_time = 4;
 * @return {number}
 */
proto.proto.CProtoReqServerRegist.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.CProtoReqServerRegist.prototype.setStartTime = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoReqServerRegist.prototype.clearStartTime = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqServerRegist.prototype.hasStartTime = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqQueryRoomInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqQueryRoomInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqQueryRoomInfo.displayName = 'proto.proto.CProtoReqQueryRoomInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqQueryRoomInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqQueryRoomInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqQueryRoomInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqQueryRoomInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    mRoomId: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqQueryRoomInfo}
 */
proto.proto.CProtoReqQueryRoomInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqQueryRoomInfo;
  return proto.proto.CProtoReqQueryRoomInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqQueryRoomInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqQueryRoomInfo}
 */
proto.proto.CProtoReqQueryRoomInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMRoomId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqQueryRoomInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqQueryRoomInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqQueryRoomInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqQueryRoomInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 m_room_id = 1;
 * @return {number}
 */
proto.proto.CProtoReqQueryRoomInfo.prototype.getMRoomId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoReqQueryRoomInfo.prototype.setMRoomId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqQueryRoomInfo.prototype.clearMRoomId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqQueryRoomInfo.prototype.hasMRoomId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspQueryRoomInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRspQueryRoomInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspQueryRoomInfo.displayName = 'proto.proto.CProtoRspQueryRoomInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspQueryRoomInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspQueryRoomInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspQueryRoomInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspQueryRoomInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    mErrcode: jspb.Message.getField(msg, 1),
    mRoomId: jspb.Message.getField(msg, 2),
    mIsAa: jspb.Message.getField(msg, 3),
    mDiamond: jspb.Message.getField(msg, 4),
    mIsFixPlayers: jspb.Message.getFieldWithDefault(msg, 5, true)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspQueryRoomInfo}
 */
proto.proto.CProtoRspQueryRoomInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspQueryRoomInfo;
  return proto.proto.CProtoRspQueryRoomInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspQueryRoomInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspQueryRoomInfo}
 */
proto.proto.CProtoRspQueryRoomInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMErrcode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMRoomId(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMIsAa(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMDiamond(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMIsFixPlayers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspQueryRoomInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspQueryRoomInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspQueryRoomInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspQueryRoomInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * required int32 m_errcode = 1;
 * @return {number}
 */
proto.proto.CProtoRspQueryRoomInfo.prototype.getMErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspQueryRoomInfo.prototype.setMErrcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspQueryRoomInfo.prototype.clearMErrcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspQueryRoomInfo.prototype.hasMErrcode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_room_id = 2;
 * @return {number}
 */
proto.proto.CProtoRspQueryRoomInfo.prototype.getMRoomId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoRspQueryRoomInfo.prototype.setMRoomId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoRspQueryRoomInfo.prototype.clearMRoomId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspQueryRoomInfo.prototype.hasMRoomId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bool m_is_aa = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoRspQueryRoomInfo.prototype.getMIsAa = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.proto.CProtoRspQueryRoomInfo.prototype.setMIsAa = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoRspQueryRoomInfo.prototype.clearMIsAa = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspQueryRoomInfo.prototype.hasMIsAa = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 m_diamond = 4;
 * @return {number}
 */
proto.proto.CProtoRspQueryRoomInfo.prototype.getMDiamond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.CProtoRspQueryRoomInfo.prototype.setMDiamond = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoRspQueryRoomInfo.prototype.clearMDiamond = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspQueryRoomInfo.prototype.hasMDiamond = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required bool m_is_fix_players = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoRspQueryRoomInfo.prototype.getMIsFixPlayers = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, true));
};


/** @param {boolean} value */
proto.proto.CProtoRspQueryRoomInfo.prototype.setMIsFixPlayers = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.proto.CProtoRspQueryRoomInfo.prototype.clearMIsFixPlayers = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspQueryRoomInfo.prototype.hasMIsFixPlayers = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqJoinRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqJoinRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqJoinRoom.displayName = 'proto.proto.CProtoReqJoinRoom';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqJoinRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqJoinRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqJoinRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqJoinRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    deskId: jspb.Message.getField(msg, 1),
    mClientversion: (f = msg.getMClientversion()) && proto.proto.CProtoClientVersion.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqJoinRoom}
 */
proto.proto.CProtoReqJoinRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqJoinRoom;
  return proto.proto.CProtoReqJoinRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqJoinRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqJoinRoom}
 */
proto.proto.CProtoReqJoinRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeskId(value);
      break;
    case 2:
      var value = new proto.proto.CProtoClientVersion;
      reader.readMessage(value,proto.proto.CProtoClientVersion.deserializeBinaryFromReader);
      msg.setMClientversion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqJoinRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqJoinRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqJoinRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqJoinRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMClientversion();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.CProtoClientVersion.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 desk_id = 1;
 * @return {number}
 */
proto.proto.CProtoReqJoinRoom.prototype.getDeskId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoReqJoinRoom.prototype.setDeskId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqJoinRoom.prototype.clearDeskId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqJoinRoom.prototype.hasDeskId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CProtoClientVersion m_clientVersion = 2;
 * @return {?proto.proto.CProtoClientVersion}
 */
proto.proto.CProtoReqJoinRoom.prototype.getMClientversion = function() {
  return /** @type{?proto.proto.CProtoClientVersion} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoClientVersion, 2));
};


/** @param {?proto.proto.CProtoClientVersion|undefined} value */
proto.proto.CProtoReqJoinRoom.prototype.setMClientversion = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.proto.CProtoReqJoinRoom.prototype.clearMClientversion = function() {
  this.setMClientversion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqJoinRoom.prototype.hasMClientversion = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspJoinRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRspJoinRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspJoinRoom.displayName = 'proto.proto.CProtoRspJoinRoom';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspJoinRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspJoinRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspJoinRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspJoinRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    mErrorcode: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspJoinRoom}
 */
proto.proto.CProtoRspJoinRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspJoinRoom;
  return proto.proto.CProtoRspJoinRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspJoinRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspJoinRoom}
 */
proto.proto.CProtoRspJoinRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMErrorcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspJoinRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspJoinRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspJoinRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspJoinRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 m_errorCode = 1;
 * @return {number}
 */
proto.proto.CProtoRspJoinRoom.prototype.getMErrorcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspJoinRoom.prototype.setMErrorcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspJoinRoom.prototype.clearMErrorcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspJoinRoom.prototype.hasMErrorcode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqUserData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqUserData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqUserData.displayName = 'proto.proto.CProtoReqUserData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqUserData.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqUserData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqUserData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqUserData.toObject = function(includeInstance, msg) {
  var f, obj = {
    mId: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqUserData}
 */
proto.proto.CProtoReqUserData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqUserData;
  return proto.proto.CProtoReqUserData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqUserData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqUserData}
 */
proto.proto.CProtoReqUserData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqUserData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqUserData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqUserData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqUserData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 m_id = 1;
 * @return {number}
 */
proto.proto.CProtoReqUserData.prototype.getMId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoReqUserData.prototype.setMId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqUserData.prototype.clearMId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqUserData.prototype.hasMId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspUserData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRspUserData.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRspUserData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspUserData.displayName = 'proto.proto.CProtoRspUserData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRspUserData.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspUserData.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspUserData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspUserData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspUserData.toObject = function(includeInstance, msg) {
  var f, obj = {
    errorCode: jspb.Message.getField(msg, 1),
    mRightsList: jspb.Message.getRepeatedField(msg, 2),
    mUserType: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspUserData}
 */
proto.proto.CProtoRspUserData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspUserData;
  return proto.proto.CProtoRspUserData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspUserData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspUserData}
 */
proto.proto.CProtoRspUserData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrorCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addMRights(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMUserType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspUserData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspUserData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspUserData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspUserData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMRightsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required int32 error_code = 1;
 * @return {number}
 */
proto.proto.CProtoRspUserData.prototype.getErrorCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspUserData.prototype.setErrorCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspUserData.prototype.clearErrorCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspUserData.prototype.hasErrorCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated int32 m_rights = 2;
 * @return {!Array.<number>}
 */
proto.proto.CProtoRspUserData.prototype.getMRightsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.proto.CProtoRspUserData.prototype.setMRightsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.CProtoRspUserData.prototype.addMRights = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.proto.CProtoRspUserData.prototype.clearMRightsList = function() {
  this.setMRightsList([]);
};


/**
 * required int32 m_user_type = 3;
 * @return {number}
 */
proto.proto.CProtoRspUserData.prototype.getMUserType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoRspUserData.prototype.setMUserType = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoRspUserData.prototype.clearMUserType = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspUserData.prototype.hasMUserType = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoLoginServer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoLoginServer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoLoginServer.displayName = 'proto.proto.CProtoLoginServer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoLoginServer.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoLoginServer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoLoginServer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoLoginServer.toObject = function(includeInstance, msg) {
  var f, obj = {
    mSeed: jspb.Message.getField(msg, 1),
    mId: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoLoginServer}
 */
proto.proto.CProtoLoginServer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoLoginServer;
  return proto.proto.CProtoLoginServer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoLoginServer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoLoginServer}
 */
proto.proto.CProtoLoginServer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMSeed(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoLoginServer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoLoginServer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoLoginServer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoLoginServer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 m_seed = 1;
 * @return {number}
 */
proto.proto.CProtoLoginServer.prototype.getMSeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoLoginServer.prototype.setMSeed = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoLoginServer.prototype.clearMSeed = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoLoginServer.prototype.hasMSeed = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_id = 2;
 * @return {number}
 */
proto.proto.CProtoLoginServer.prototype.getMId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoLoginServer.prototype.setMId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoLoginServer.prototype.clearMId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoLoginServer.prototype.hasMId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspLoginServer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRspLoginServer.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRspLoginServer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspLoginServer.displayName = 'proto.proto.CProtoRspLoginServer';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRspLoginServer.repeatedFields_ = [13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspLoginServer.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspLoginServer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspLoginServer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspLoginServer.toObject = function(includeInstance, msg) {
  var f, obj = {
    mBuyinfo: jspb.Message.getField(msg, 1),
    mGm: jspb.Message.getField(msg, 2),
    mId: jspb.Message.getField(msg, 3),
    mNike: jspb.Message.getField(msg, 4),
    mExp: jspb.Message.getField(msg, 5),
    mSex: jspb.Message.getField(msg, 6),
    mFace: jspb.Message.getField(msg, 7),
    mPlayertype: jspb.Message.getField(msg, 8),
    mUnionid: jspb.Message.getField(msg, 12),
    rightsList: jspb.Message.getRepeatedField(msg, 13)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspLoginServer}
 */
proto.proto.CProtoRspLoginServer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspLoginServer;
  return proto.proto.CProtoRspLoginServer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspLoginServer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspLoginServer}
 */
proto.proto.CProtoRspLoginServer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMBuyinfo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMGm(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMNike(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMExp(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMSex(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMFace(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMPlayertype(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMUnionid(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addRights(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspLoginServer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspLoginServer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspLoginServer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspLoginServer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getRightsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      13,
      f
    );
  }
};


/**
 * required string m_buyInfo = 1;
 * @return {string}
 */
proto.proto.CProtoRspLoginServer.prototype.getMBuyinfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.CProtoRspLoginServer.prototype.setMBuyinfo = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspLoginServer.prototype.clearMBuyinfo = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspLoginServer.prototype.hasMBuyinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_gm = 2;
 * @return {number}
 */
proto.proto.CProtoRspLoginServer.prototype.getMGm = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoRspLoginServer.prototype.setMGm = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoRspLoginServer.prototype.clearMGm = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspLoginServer.prototype.hasMGm = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 m_id = 3;
 * @return {number}
 */
proto.proto.CProtoRspLoginServer.prototype.getMId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoRspLoginServer.prototype.setMId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoRspLoginServer.prototype.clearMId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspLoginServer.prototype.hasMId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string m_nike = 4;
 * @return {string}
 */
proto.proto.CProtoRspLoginServer.prototype.getMNike = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.proto.CProtoRspLoginServer.prototype.setMNike = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoRspLoginServer.prototype.clearMNike = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspLoginServer.prototype.hasMNike = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 m_exp = 5;
 * @return {number}
 */
proto.proto.CProtoRspLoginServer.prototype.getMExp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.proto.CProtoRspLoginServer.prototype.setMExp = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.proto.CProtoRspLoginServer.prototype.clearMExp = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspLoginServer.prototype.hasMExp = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int32 m_sex = 6;
 * @return {number}
 */
proto.proto.CProtoRspLoginServer.prototype.getMSex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.proto.CProtoRspLoginServer.prototype.setMSex = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.proto.CProtoRspLoginServer.prototype.clearMSex = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspLoginServer.prototype.hasMSex = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required int32 m_face = 7;
 * @return {number}
 */
proto.proto.CProtoRspLoginServer.prototype.getMFace = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.proto.CProtoRspLoginServer.prototype.setMFace = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.proto.CProtoRspLoginServer.prototype.clearMFace = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspLoginServer.prototype.hasMFace = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required int32 m_playerType = 8;
 * @return {number}
 */
proto.proto.CProtoRspLoginServer.prototype.getMPlayertype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.proto.CProtoRspLoginServer.prototype.setMPlayertype = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.proto.CProtoRspLoginServer.prototype.clearMPlayertype = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspLoginServer.prototype.hasMPlayertype = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 m_unionId = 12;
 * @return {number}
 */
proto.proto.CProtoRspLoginServer.prototype.getMUnionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.proto.CProtoRspLoginServer.prototype.setMUnionid = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.proto.CProtoRspLoginServer.prototype.clearMUnionid = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspLoginServer.prototype.hasMUnionid = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * repeated int32 rights = 13;
 * @return {!Array.<number>}
 */
proto.proto.CProtoRspLoginServer.prototype.getRightsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 13));
};


/** @param {!Array.<number>} value */
proto.proto.CProtoRspLoginServer.prototype.setRightsList = function(value) {
  jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.CProtoRspLoginServer.prototype.addRights = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


proto.proto.CProtoRspLoginServer.prototype.clearRightsList = function() {
  this.setRightsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqDismissRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqDismissRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqDismissRoom.displayName = 'proto.proto.CProtoReqDismissRoom';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqDismissRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqDismissRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqDismissRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqDismissRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    mPos: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqDismissRoom}
 */
proto.proto.CProtoReqDismissRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqDismissRoom;
  return proto.proto.CProtoReqDismissRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqDismissRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqDismissRoom}
 */
proto.proto.CProtoReqDismissRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMPos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqDismissRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqDismissRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqDismissRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqDismissRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 m_pos = 1;
 * @return {number}
 */
proto.proto.CProtoReqDismissRoom.prototype.getMPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoReqDismissRoom.prototype.setMPos = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqDismissRoom.prototype.clearMPos = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqDismissRoom.prototype.hasMPos = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspDismissRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRspDismissRoom.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRspDismissRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspDismissRoom.displayName = 'proto.proto.CProtoRspDismissRoom';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRspDismissRoom.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspDismissRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspDismissRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspDismissRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspDismissRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    mErrorcode: jspb.Message.getField(msg, 1),
    mTime: jspb.Message.getField(msg, 2),
    mFlag: jspb.Message.getField(msg, 3),
    mApply: jspb.Message.getField(msg, 4),
    mAgreeList: jspb.Message.getRepeatedField(msg, 5),
    mWaitList: jspb.Message.getRepeatedField(msg, 6),
    mRefuse: jspb.Message.getField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspDismissRoom}
 */
proto.proto.CProtoRspDismissRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspDismissRoom;
  return proto.proto.CProtoRspDismissRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspDismissRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspDismissRoom}
 */
proto.proto.CProtoRspDismissRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMErrorcode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMFlag(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMApply(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addMAgree(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addMWait(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMRefuse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspDismissRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspDismissRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspDismissRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspDismissRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getMAgreeList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      5,
      f
    );
  }
  f = message.getMWaitList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * required int32 m_errorCode = 1;
 * @return {number}
 */
proto.proto.CProtoRspDismissRoom.prototype.getMErrorcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspDismissRoom.prototype.setMErrorcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspDismissRoom.prototype.clearMErrorcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspDismissRoom.prototype.hasMErrorcode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_time = 2;
 * @return {number}
 */
proto.proto.CProtoRspDismissRoom.prototype.getMTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoRspDismissRoom.prototype.setMTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoRspDismissRoom.prototype.clearMTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspDismissRoom.prototype.hasMTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 m_flag = 3;
 * @return {number}
 */
proto.proto.CProtoRspDismissRoom.prototype.getMFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoRspDismissRoom.prototype.setMFlag = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoRspDismissRoom.prototype.clearMFlag = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspDismissRoom.prototype.hasMFlag = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 m_apply = 4;
 * @return {number}
 */
proto.proto.CProtoRspDismissRoom.prototype.getMApply = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.CProtoRspDismissRoom.prototype.setMApply = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoRspDismissRoom.prototype.clearMApply = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspDismissRoom.prototype.hasMApply = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated int32 m_agree = 5;
 * @return {!Array.<number>}
 */
proto.proto.CProtoRspDismissRoom.prototype.getMAgreeList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array.<number>} value */
proto.proto.CProtoRspDismissRoom.prototype.setMAgreeList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.CProtoRspDismissRoom.prototype.addMAgree = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.proto.CProtoRspDismissRoom.prototype.clearMAgreeList = function() {
  this.setMAgreeList([]);
};


/**
 * repeated int32 m_wait = 6;
 * @return {!Array.<number>}
 */
proto.proto.CProtoRspDismissRoom.prototype.getMWaitList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array.<number>} value */
proto.proto.CProtoRspDismissRoom.prototype.setMWaitList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.CProtoRspDismissRoom.prototype.addMWait = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.proto.CProtoRspDismissRoom.prototype.clearMWaitList = function() {
  this.setMWaitList([]);
};


/**
 * optional int32 m_refuse = 7;
 * @return {number}
 */
proto.proto.CProtoRspDismissRoom.prototype.getMRefuse = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.proto.CProtoRspDismissRoom.prototype.setMRefuse = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.proto.CProtoRspDismissRoom.prototype.clearMRefuse = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspDismissRoom.prototype.hasMRefuse = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqAckDismiss = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqAckDismiss, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqAckDismiss.displayName = 'proto.proto.CProtoReqAckDismiss';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqAckDismiss.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqAckDismiss.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqAckDismiss} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqAckDismiss.toObject = function(includeInstance, msg) {
  var f, obj = {
    mFlag: jspb.Message.getField(msg, 1),
    mPos: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqAckDismiss}
 */
proto.proto.CProtoReqAckDismiss.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqAckDismiss;
  return proto.proto.CProtoReqAckDismiss.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqAckDismiss} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqAckDismiss}
 */
proto.proto.CProtoReqAckDismiss.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMFlag(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMPos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqAckDismiss.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqAckDismiss.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqAckDismiss} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqAckDismiss.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 m_flag = 1;
 * @return {number}
 */
proto.proto.CProtoReqAckDismiss.prototype.getMFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoReqAckDismiss.prototype.setMFlag = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqAckDismiss.prototype.clearMFlag = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqAckDismiss.prototype.hasMFlag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_pos = 2;
 * @return {number}
 */
proto.proto.CProtoReqAckDismiss.prototype.getMPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoReqAckDismiss.prototype.setMPos = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoReqAckDismiss.prototype.clearMPos = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqAckDismiss.prototype.hasMPos = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyFortune = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifyFortune, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyFortune.displayName = 'proto.proto.CProtoNotifyFortune';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyFortune.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyFortune.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyFortune} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyFortune.toObject = function(includeInstance, msg) {
  var f, obj = {
    mCard1: jspb.Message.getField(msg, 1),
    mCard2: jspb.Message.getField(msg, 2),
    mCard3: jspb.Message.getField(msg, 3),
    mDiamondnum: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyFortune}
 */
proto.proto.CProtoNotifyFortune.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyFortune;
  return proto.proto.CProtoNotifyFortune.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyFortune} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyFortune}
 */
proto.proto.CProtoNotifyFortune.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMCard1(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMCard2(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMCard3(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMDiamondnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyFortune.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyFortune.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyFortune} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyFortune.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * required int32 m_card1 = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyFortune.prototype.getMCard1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyFortune.prototype.setMCard1 = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyFortune.prototype.clearMCard1 = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyFortune.prototype.hasMCard1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_card2 = 2;
 * @return {number}
 */
proto.proto.CProtoNotifyFortune.prototype.getMCard2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyFortune.prototype.setMCard2 = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifyFortune.prototype.clearMCard2 = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyFortune.prototype.hasMCard2 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 m_card3 = 3;
 * @return {number}
 */
proto.proto.CProtoNotifyFortune.prototype.getMCard3 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyFortune.prototype.setMCard3 = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoNotifyFortune.prototype.clearMCard3 = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyFortune.prototype.hasMCard3 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 m_diamondNum = 4;
 * @return {number}
 */
proto.proto.CProtoNotifyFortune.prototype.getMDiamondnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyFortune.prototype.setMDiamondnum = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoNotifyFortune.prototype.clearMDiamondnum = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyFortune.prototype.hasMDiamondnum = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoEnterRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoEnterRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoEnterRoom.displayName = 'proto.proto.CProtoEnterRoom';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoEnterRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoEnterRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoEnterRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoEnterRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getField(msg, 1),
    deskId: jspb.Message.getField(msg, 2),
    playType: jspb.Message.getField(msg, 3),
    pos: jspb.Message.getField(msg, 4),
    maxCircle: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoEnterRoom}
 */
proto.proto.CProtoEnterRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoEnterRoom;
  return proto.proto.CProtoEnterRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoEnterRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoEnterRoom}
 */
proto.proto.CProtoEnterRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeskId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPos(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxCircle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoEnterRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoEnterRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoEnterRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoEnterRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * required int32 state = 1;
 * @return {number}
 */
proto.proto.CProtoEnterRoom.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoEnterRoom.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoEnterRoom.prototype.clearState = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoEnterRoom.prototype.hasState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 desk_id = 2;
 * @return {number}
 */
proto.proto.CProtoEnterRoom.prototype.getDeskId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoEnterRoom.prototype.setDeskId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoEnterRoom.prototype.clearDeskId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoEnterRoom.prototype.hasDeskId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 play_type = 3;
 * @return {number}
 */
proto.proto.CProtoEnterRoom.prototype.getPlayType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoEnterRoom.prototype.setPlayType = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoEnterRoom.prototype.clearPlayType = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoEnterRoom.prototype.hasPlayType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 pos = 4;
 * @return {number}
 */
proto.proto.CProtoEnterRoom.prototype.getPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.CProtoEnterRoom.prototype.setPos = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoEnterRoom.prototype.clearPos = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoEnterRoom.prototype.hasPos = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 max_circle = 5;
 * @return {number}
 */
proto.proto.CProtoEnterRoom.prototype.getMaxCircle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.proto.CProtoEnterRoom.prototype.setMaxCircle = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.proto.CProtoEnterRoom.prototype.clearMaxCircle = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoEnterRoom.prototype.hasMaxCircle = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoClientVersion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoClientVersion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoClientVersion.displayName = 'proto.proto.CProtoClientVersion';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoClientVersion.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoClientVersion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoClientVersion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoClientVersion.toObject = function(includeInstance, msg) {
  var f, obj = {
    updateVer: jspb.Message.getField(msg, 1),
    appVer: jspb.Message.getField(msg, 2),
    platform: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoClientVersion}
 */
proto.proto.CProtoClientVersion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoClientVersion;
  return proto.proto.CProtoClientVersion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoClientVersion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoClientVersion}
 */
proto.proto.CProtoClientVersion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdateVer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppVer(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlatform(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoClientVersion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoClientVersion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoClientVersion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoClientVersion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * required string update_ver = 1;
 * @return {string}
 */
proto.proto.CProtoClientVersion.prototype.getUpdateVer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.CProtoClientVersion.prototype.setUpdateVer = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoClientVersion.prototype.clearUpdateVer = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoClientVersion.prototype.hasUpdateVer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string app_ver = 2;
 * @return {string}
 */
proto.proto.CProtoClientVersion.prototype.getAppVer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.CProtoClientVersion.prototype.setAppVer = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoClientVersion.prototype.clearAppVer = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoClientVersion.prototype.hasAppVer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string platform = 3;
 * @return {string}
 */
proto.proto.CProtoClientVersion.prototype.getPlatform = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.proto.CProtoClientVersion.prototype.setPlatform = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoClientVersion.prototype.clearPlatform = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoClientVersion.prototype.hasPlatform = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoCommonOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoCommonOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoCommonOption.displayName = 'proto.proto.CProtoCommonOption';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoCommonOption.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoCommonOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoCommonOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoCommonOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    createForOther: jspb.Message.getFieldWithDefault(msg, 1, false),
    mRoundcount: jspb.Message.getField(msg, 2),
    mAa: jspb.Message.getFieldWithDefault(msg, 3, false),
    mBasescore: jspb.Message.getField(msg, 4),
    mPlayercount: jspb.Message.getField(msg, 5),
    mGameid: jspb.Message.getField(msg, 6),
    mPlayerroommax: jspb.Message.getField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoCommonOption}
 */
proto.proto.CProtoCommonOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoCommonOption;
  return proto.proto.CProtoCommonOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoCommonOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoCommonOption}
 */
proto.proto.CProtoCommonOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCreateForOther(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMRoundcount(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMAa(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMBasescore(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMPlayercount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMGameid(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMPlayerroommax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoCommonOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoCommonOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoCommonOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoCommonOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * required bool create_for_other = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoCommonOption.prototype.getCreateForOther = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.proto.CProtoCommonOption.prototype.setCreateForOther = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoCommonOption.prototype.clearCreateForOther = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoCommonOption.prototype.hasCreateForOther = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_roundCount = 2;
 * @return {number}
 */
proto.proto.CProtoCommonOption.prototype.getMRoundcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoCommonOption.prototype.setMRoundcount = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoCommonOption.prototype.clearMRoundcount = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoCommonOption.prototype.hasMRoundcount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bool m_AA = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoCommonOption.prototype.getMAa = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.proto.CProtoCommonOption.prototype.setMAa = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoCommonOption.prototype.clearMAa = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoCommonOption.prototype.hasMAa = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 m_baseScore = 4;
 * @return {number}
 */
proto.proto.CProtoCommonOption.prototype.getMBasescore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.CProtoCommonOption.prototype.setMBasescore = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoCommonOption.prototype.clearMBasescore = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoCommonOption.prototype.hasMBasescore = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 m_playerCount = 5;
 * @return {number}
 */
proto.proto.CProtoCommonOption.prototype.getMPlayercount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.proto.CProtoCommonOption.prototype.setMPlayercount = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.proto.CProtoCommonOption.prototype.clearMPlayercount = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoCommonOption.prototype.hasMPlayercount = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int32 m_gameid = 6;
 * @return {number}
 */
proto.proto.CProtoCommonOption.prototype.getMGameid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.proto.CProtoCommonOption.prototype.setMGameid = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.proto.CProtoCommonOption.prototype.clearMGameid = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoCommonOption.prototype.hasMGameid = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 m_playerRoomMax = 7;
 * @return {number}
 */
proto.proto.CProtoCommonOption.prototype.getMPlayerroommax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.proto.CProtoCommonOption.prototype.setMPlayerroommax = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.proto.CProtoCommonOption.prototype.clearMPlayerroommax = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoCommonOption.prototype.hasMPlayerroommax = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoKaErTiaoOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoKaErTiaoOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoKaErTiaoOption.displayName = 'proto.proto.CProtoKaErTiaoOption';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoKaErTiaoOption.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoKaErTiaoOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoKaErTiaoOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoKaErTiaoOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    mFanmax: jspb.Message.getFieldWithDefault(msg, 1, 4),
    mChajiao: jspb.Message.getFieldWithDefault(msg, 2, false),
    mRenpao: jspb.Message.getFieldWithDefault(msg, 3, true)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoKaErTiaoOption}
 */
proto.proto.CProtoKaErTiaoOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoKaErTiaoOption;
  return proto.proto.CProtoKaErTiaoOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoKaErTiaoOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoKaErTiaoOption}
 */
proto.proto.CProtoKaErTiaoOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMFanmax(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMChajiao(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMRenpao(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoKaErTiaoOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoKaErTiaoOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoKaErTiaoOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoKaErTiaoOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional int32 m_fanMax = 1;
 * @return {number}
 */
proto.proto.CProtoKaErTiaoOption.prototype.getMFanmax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 4));
};


/** @param {number} value */
proto.proto.CProtoKaErTiaoOption.prototype.setMFanmax = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoKaErTiaoOption.prototype.clearMFanmax = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoKaErTiaoOption.prototype.hasMFanmax = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool m_chaJiao = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoKaErTiaoOption.prototype.getMChajiao = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.proto.CProtoKaErTiaoOption.prototype.setMChajiao = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoKaErTiaoOption.prototype.clearMChajiao = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoKaErTiaoOption.prototype.hasMChajiao = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool m_renPao = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoKaErTiaoOption.prototype.getMRenpao = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, true));
};


/** @param {boolean} value */
proto.proto.CProtoKaErTiaoOption.prototype.setMRenpao = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoKaErTiaoOption.prototype.clearMRenpao = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoKaErTiaoOption.prototype.hasMRenpao = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoKaXinWuOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoKaXinWuOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoKaXinWuOption.displayName = 'proto.proto.CProtoKaXinWuOption';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoKaXinWuOption.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoKaXinWuOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoKaXinWuOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoKaXinWuOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    mHavewan: jspb.Message.getFieldWithDefault(msg, 1, false),
    mDuoxiang: jspb.Message.getFieldWithDefault(msg, 2, false),
    mLangqihu: jspb.Message.getFieldWithDefault(msg, 3, false),
    mChajiao: jspb.Message.getFieldWithDefault(msg, 4, false),
    mFanmax: jspb.Message.getFieldWithDefault(msg, 5, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoKaXinWuOption}
 */
proto.proto.CProtoKaXinWuOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoKaXinWuOption;
  return proto.proto.CProtoKaXinWuOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoKaXinWuOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoKaXinWuOption}
 */
proto.proto.CProtoKaXinWuOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMHavewan(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMDuoxiang(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMLangqihu(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMChajiao(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMFanmax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoKaXinWuOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoKaXinWuOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoKaXinWuOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoKaXinWuOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional bool m_havewan = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoKaXinWuOption.prototype.getMHavewan = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.proto.CProtoKaXinWuOption.prototype.setMHavewan = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoKaXinWuOption.prototype.clearMHavewan = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoKaXinWuOption.prototype.hasMHavewan = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool m_duoxiang = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoKaXinWuOption.prototype.getMDuoxiang = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.proto.CProtoKaXinWuOption.prototype.setMDuoxiang = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoKaXinWuOption.prototype.clearMDuoxiang = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoKaXinWuOption.prototype.hasMDuoxiang = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool m_langqihu = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoKaXinWuOption.prototype.getMLangqihu = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.proto.CProtoKaXinWuOption.prototype.setMLangqihu = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoKaXinWuOption.prototype.clearMLangqihu = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoKaXinWuOption.prototype.hasMLangqihu = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool m_chaJiao = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoKaXinWuOption.prototype.getMChajiao = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.proto.CProtoKaXinWuOption.prototype.setMChajiao = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoKaXinWuOption.prototype.clearMChajiao = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoKaXinWuOption.prototype.hasMChajiao = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 m_fanMax = 5;
 * @return {number}
 */
proto.proto.CProtoKaXinWuOption.prototype.getMFanmax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 4));
};


/** @param {number} value */
proto.proto.CProtoKaXinWuOption.prototype.setMFanmax = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.proto.CProtoKaXinWuOption.prototype.clearMFanmax = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoKaXinWuOption.prototype.hasMFanmax = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoLinCangOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoLinCangOption.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoLinCangOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoLinCangOption.displayName = 'proto.proto.CProtoLinCangOption';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoLinCangOption.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoLinCangOption.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoLinCangOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoLinCangOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoLinCangOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    mHasfeng: jspb.Message.getFieldWithDefault(msg, 1, true),
    mHutypesList: jspb.Message.getRepeatedField(msg, 2),
    mYinglan: jspb.Message.getField(msg, 3),
    mOuthuprio: jspb.Message.getField(msg, 4),
    mMultiply: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoLinCangOption}
 */
proto.proto.CProtoLinCangOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoLinCangOption;
  return proto.proto.CProtoLinCangOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoLinCangOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoLinCangOption}
 */
proto.proto.CProtoLinCangOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMHasfeng(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addMHutypes(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMYinglan(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMOuthuprio(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMMultiply(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoLinCangOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoLinCangOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoLinCangOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoLinCangOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMHutypesList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.CProtoLinCangOption.emPrio = {
  EMOUTHUFIRST: 1,
  EMOTHEROPTFIRST: 2,
  EMBOTHEXIST: 3
};

/**
 * required bool m_hasFeng = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoLinCangOption.prototype.getMHasfeng = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, true));
};


/** @param {boolean} value */
proto.proto.CProtoLinCangOption.prototype.setMHasfeng = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoLinCangOption.prototype.clearMHasfeng = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoLinCangOption.prototype.hasMHasfeng = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated int32 m_huTypes = 2;
 * @return {!Array.<number>}
 */
proto.proto.CProtoLinCangOption.prototype.getMHutypesList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.proto.CProtoLinCangOption.prototype.setMHutypesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.CProtoLinCangOption.prototype.addMHutypes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.proto.CProtoLinCangOption.prototype.clearMHutypesList = function() {
  this.setMHutypesList([]);
};


/**
 * required bool m_yingLan = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoLinCangOption.prototype.getMYinglan = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.proto.CProtoLinCangOption.prototype.setMYinglan = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoLinCangOption.prototype.clearMYinglan = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoLinCangOption.prototype.hasMYinglan = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 m_outHuPrio = 4;
 * @return {number}
 */
proto.proto.CProtoLinCangOption.prototype.getMOuthuprio = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.CProtoLinCangOption.prototype.setMOuthuprio = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoLinCangOption.prototype.clearMOuthuprio = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoLinCangOption.prototype.hasMOuthuprio = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool m_multiply = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoLinCangOption.prototype.getMMultiply = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.proto.CProtoLinCangOption.prototype.setMMultiply = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.proto.CProtoLinCangOption.prototype.clearMMultiply = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoLinCangOption.prototype.hasMMultiply = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoXueZhanOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoXueZhanOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoXueZhanOption.displayName = 'proto.proto.CProtoXueZhanOption';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoXueZhanOption.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoXueZhanOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoXueZhanOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoXueZhanOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    mMaxfan: jspb.Message.getField(msg, 1),
    mDuanyaojiu: jspb.Message.getFieldWithDefault(msg, 2, false),
    mHuansanzhang: jspb.Message.getFieldWithDefault(msg, 3, false),
    mGen: jspb.Message.getFieldWithDefault(msg, 4, false),
    mCalltransfer: jspb.Message.getFieldWithDefault(msg, 5, false),
    mHuapao: jspb.Message.getFieldWithDefault(msg, 6, false),
    mZimofan: jspb.Message.getFieldWithDefault(msg, 7, false),
    mMenqingpao: jspb.Message.getFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoXueZhanOption}
 */
proto.proto.CProtoXueZhanOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoXueZhanOption;
  return proto.proto.CProtoXueZhanOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoXueZhanOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoXueZhanOption}
 */
proto.proto.CProtoXueZhanOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMMaxfan(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMDuanyaojiu(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMHuansanzhang(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMGen(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMCalltransfer(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMHuapao(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMZimofan(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMMenqingpao(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoXueZhanOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoXueZhanOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoXueZhanOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoXueZhanOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional int32 m_maxfan = 1;
 * @return {number}
 */
proto.proto.CProtoXueZhanOption.prototype.getMMaxfan = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoXueZhanOption.prototype.setMMaxfan = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoXueZhanOption.prototype.clearMMaxfan = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoXueZhanOption.prototype.hasMMaxfan = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool m_duanyaojiu = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoXueZhanOption.prototype.getMDuanyaojiu = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.proto.CProtoXueZhanOption.prototype.setMDuanyaojiu = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoXueZhanOption.prototype.clearMDuanyaojiu = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoXueZhanOption.prototype.hasMDuanyaojiu = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool m_huansanzhang = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoXueZhanOption.prototype.getMHuansanzhang = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.proto.CProtoXueZhanOption.prototype.setMHuansanzhang = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoXueZhanOption.prototype.clearMHuansanzhang = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoXueZhanOption.prototype.hasMHuansanzhang = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool m_gen = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoXueZhanOption.prototype.getMGen = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.proto.CProtoXueZhanOption.prototype.setMGen = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoXueZhanOption.prototype.clearMGen = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoXueZhanOption.prototype.hasMGen = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool m_calltransfer = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoXueZhanOption.prototype.getMCalltransfer = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.proto.CProtoXueZhanOption.prototype.setMCalltransfer = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.proto.CProtoXueZhanOption.prototype.clearMCalltransfer = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoXueZhanOption.prototype.hasMCalltransfer = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool m_huapao = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoXueZhanOption.prototype.getMHuapao = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.proto.CProtoXueZhanOption.prototype.setMHuapao = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.proto.CProtoXueZhanOption.prototype.clearMHuapao = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoXueZhanOption.prototype.hasMHuapao = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool m_zimofan = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoXueZhanOption.prototype.getMZimofan = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.proto.CProtoXueZhanOption.prototype.setMZimofan = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.proto.CProtoXueZhanOption.prototype.clearMZimofan = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoXueZhanOption.prototype.hasMZimofan = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool m_menqingpao = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoXueZhanOption.prototype.getMMenqingpao = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.proto.CProtoXueZhanOption.prototype.setMMenqingpao = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.proto.CProtoXueZhanOption.prototype.clearMMenqingpao = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoXueZhanOption.prototype.hasMMenqingpao = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoXiangYunOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoXiangYunOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoXiangYunOption.displayName = 'proto.proto.CProtoXiangYunOption';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoXiangYunOption.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoXiangYunOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoXiangYunOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoXiangYunOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    mHuscoretype: jspb.Message.getField(msg, 1),
    mAddbasescore: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoXiangYunOption}
 */
proto.proto.CProtoXiangYunOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoXiangYunOption;
  return proto.proto.CProtoXiangYunOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoXiangYunOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoXiangYunOption}
 */
proto.proto.CProtoXiangYunOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMHuscoretype(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMAddbasescore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoXiangYunOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoXiangYunOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoXiangYunOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoXiangYunOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional int32 m_huscoretype = 1;
 * @return {number}
 */
proto.proto.CProtoXiangYunOption.prototype.getMHuscoretype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoXiangYunOption.prototype.setMHuscoretype = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoXiangYunOption.prototype.clearMHuscoretype = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoXiangYunOption.prototype.hasMHuscoretype = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool m_addbasescore = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoXiangYunOption.prototype.getMAddbasescore = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.proto.CProtoXiangYunOption.prototype.setMAddbasescore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoXiangYunOption.prototype.clearMAddbasescore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoXiangYunOption.prototype.hasMAddbasescore = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoShiSanShuiOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoShiSanShuiOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoShiSanShuiOption.displayName = 'proto.proto.CProtoShiSanShuiOption';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoShiSanShuiOption.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoShiSanShuiOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoShiSanShuiOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoShiSanShuiOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    mPlayType: jspb.Message.getField(msg, 1),
    mTimesType: jspb.Message.getField(msg, 2),
    mHorseCard: jspb.Message.getField(msg, 3),
    mOtherOptions: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoShiSanShuiOption}
 */
proto.proto.CProtoShiSanShuiOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoShiSanShuiOption;
  return proto.proto.CProtoShiSanShuiOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoShiSanShuiOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoShiSanShuiOption}
 */
proto.proto.CProtoShiSanShuiOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMPlayType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMTimesType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMHorseCard(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMOtherOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoShiSanShuiOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoShiSanShuiOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoShiSanShuiOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoShiSanShuiOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 m_play_type = 1;
 * @return {number}
 */
proto.proto.CProtoShiSanShuiOption.prototype.getMPlayType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoShiSanShuiOption.prototype.setMPlayType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoShiSanShuiOption.prototype.clearMPlayType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoShiSanShuiOption.prototype.hasMPlayType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 m_times_type = 2;
 * @return {number}
 */
proto.proto.CProtoShiSanShuiOption.prototype.getMTimesType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoShiSanShuiOption.prototype.setMTimesType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoShiSanShuiOption.prototype.clearMTimesType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoShiSanShuiOption.prototype.hasMTimesType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 m_horse_card = 3;
 * @return {number}
 */
proto.proto.CProtoShiSanShuiOption.prototype.getMHorseCard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoShiSanShuiOption.prototype.setMHorseCard = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoShiSanShuiOption.prototype.clearMHorseCard = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoShiSanShuiOption.prototype.hasMHorseCard = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 m_other_options = 4;
 * @return {number}
 */
proto.proto.CProtoShiSanShuiOption.prototype.getMOtherOptions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.CProtoShiSanShuiOption.prototype.setMOtherOptions = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoShiSanShuiOption.prototype.clearMOtherOptions = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoShiSanShuiOption.prototype.hasMOtherOptions = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoZhaJinHuaOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoZhaJinHuaOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoZhaJinHuaOption.displayName = 'proto.proto.CProtoZhaJinHuaOption';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoZhaJinHuaOption.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoZhaJinHuaOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoZhaJinHuaOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoZhaJinHuaOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    mImaxround: jspb.Message.getField(msg, 1),
    mIcompareround: jspb.Message.getField(msg, 2),
    mImustmenround: jspb.Message.getField(msg, 3),
    mIbaozixisend: jspb.Message.getField(msg, 4),
    mIshunjinxisend: jspb.Message.getField(msg, 5),
    mIautogiveup: jspb.Message.getField(msg, 6),
    mIshowcardrule: jspb.Message.getField(msg, 7),
    mIcomparedouble: jspb.Message.getField(msg, 8),
    mIcanusegold: jspb.Message.getField(msg, 9)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoZhaJinHuaOption}
 */
proto.proto.CProtoZhaJinHuaOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoZhaJinHuaOption;
  return proto.proto.CProtoZhaJinHuaOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoZhaJinHuaOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoZhaJinHuaOption}
 */
proto.proto.CProtoZhaJinHuaOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMImaxround(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMIcompareround(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMImustmenround(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMIbaozixisend(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMIshunjinxisend(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMIautogiveup(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMIshowcardrule(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMIcomparedouble(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMIcanusegold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoZhaJinHuaOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoZhaJinHuaOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoZhaJinHuaOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoZhaJinHuaOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
};


/**
 * optional int32 m_iMaxRound = 1;
 * @return {number}
 */
proto.proto.CProtoZhaJinHuaOption.prototype.getMImaxround = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoZhaJinHuaOption.prototype.setMImaxround = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoZhaJinHuaOption.prototype.clearMImaxround = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoZhaJinHuaOption.prototype.hasMImaxround = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 m_iCompareRound = 2;
 * @return {number}
 */
proto.proto.CProtoZhaJinHuaOption.prototype.getMIcompareround = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoZhaJinHuaOption.prototype.setMIcompareround = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoZhaJinHuaOption.prototype.clearMIcompareround = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoZhaJinHuaOption.prototype.hasMIcompareround = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 m_iMustMenRound = 3;
 * @return {number}
 */
proto.proto.CProtoZhaJinHuaOption.prototype.getMImustmenround = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoZhaJinHuaOption.prototype.setMImustmenround = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoZhaJinHuaOption.prototype.clearMImustmenround = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoZhaJinHuaOption.prototype.hasMImustmenround = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 m_iBaoZiXiSend = 4;
 * @return {number}
 */
proto.proto.CProtoZhaJinHuaOption.prototype.getMIbaozixisend = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.CProtoZhaJinHuaOption.prototype.setMIbaozixisend = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoZhaJinHuaOption.prototype.clearMIbaozixisend = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoZhaJinHuaOption.prototype.hasMIbaozixisend = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 m_iShunJinXiSend = 5;
 * @return {number}
 */
proto.proto.CProtoZhaJinHuaOption.prototype.getMIshunjinxisend = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.proto.CProtoZhaJinHuaOption.prototype.setMIshunjinxisend = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.proto.CProtoZhaJinHuaOption.prototype.clearMIshunjinxisend = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoZhaJinHuaOption.prototype.hasMIshunjinxisend = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 m_iAutoGiveUp = 6;
 * @return {number}
 */
proto.proto.CProtoZhaJinHuaOption.prototype.getMIautogiveup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.proto.CProtoZhaJinHuaOption.prototype.setMIautogiveup = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.proto.CProtoZhaJinHuaOption.prototype.clearMIautogiveup = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoZhaJinHuaOption.prototype.hasMIautogiveup = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 m_iShowCardRule = 7;
 * @return {number}
 */
proto.proto.CProtoZhaJinHuaOption.prototype.getMIshowcardrule = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.proto.CProtoZhaJinHuaOption.prototype.setMIshowcardrule = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.proto.CProtoZhaJinHuaOption.prototype.clearMIshowcardrule = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoZhaJinHuaOption.prototype.hasMIshowcardrule = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int32 m_iCompareDouble = 8;
 * @return {number}
 */
proto.proto.CProtoZhaJinHuaOption.prototype.getMIcomparedouble = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.proto.CProtoZhaJinHuaOption.prototype.setMIcomparedouble = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.proto.CProtoZhaJinHuaOption.prototype.clearMIcomparedouble = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoZhaJinHuaOption.prototype.hasMIcomparedouble = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 m_iCanUseGold = 9;
 * @return {number}
 */
proto.proto.CProtoZhaJinHuaOption.prototype.getMIcanusegold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.proto.CProtoZhaJinHuaOption.prototype.setMIcanusegold = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.proto.CProtoZhaJinHuaOption.prototype.clearMIcanusegold = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoZhaJinHuaOption.prototype.hasMIcanusegold = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoDouNiuOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoDouNiuOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoDouNiuOption.displayName = 'proto.proto.CProtoDouNiuOption';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoDouNiuOption.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoDouNiuOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoDouNiuOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoDouNiuOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    mIzhuanmode: jspb.Message.getField(msg, 1),
    mIdoubletype: jspb.Message.getField(msg, 2),
    mIblacknum: jspb.Message.getField(msg, 3),
    mIspecialtype: jspb.Message.getField(msg, 4),
    mIlevel: jspb.Message.getField(msg, 5),
    mIfivex: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoDouNiuOption}
 */
proto.proto.CProtoDouNiuOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoDouNiuOption;
  return proto.proto.CProtoDouNiuOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoDouNiuOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoDouNiuOption}
 */
proto.proto.CProtoDouNiuOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMIzhuanmode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMIdoubletype(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMIblacknum(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMIspecialtype(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMIlevel(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMIfivex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoDouNiuOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoDouNiuOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoDouNiuOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoDouNiuOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional int32 m_iZhuanMode = 1;
 * @return {number}
 */
proto.proto.CProtoDouNiuOption.prototype.getMIzhuanmode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoDouNiuOption.prototype.setMIzhuanmode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoDouNiuOption.prototype.clearMIzhuanmode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoDouNiuOption.prototype.hasMIzhuanmode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 m_iDoubleType = 2;
 * @return {number}
 */
proto.proto.CProtoDouNiuOption.prototype.getMIdoubletype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoDouNiuOption.prototype.setMIdoubletype = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoDouNiuOption.prototype.clearMIdoubletype = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoDouNiuOption.prototype.hasMIdoubletype = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 m_iBlackNum = 3;
 * @return {number}
 */
proto.proto.CProtoDouNiuOption.prototype.getMIblacknum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoDouNiuOption.prototype.setMIblacknum = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoDouNiuOption.prototype.clearMIblacknum = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoDouNiuOption.prototype.hasMIblacknum = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 m_iSpecialType = 4;
 * @return {number}
 */
proto.proto.CProtoDouNiuOption.prototype.getMIspecialtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.CProtoDouNiuOption.prototype.setMIspecialtype = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoDouNiuOption.prototype.clearMIspecialtype = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoDouNiuOption.prototype.hasMIspecialtype = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 m_iLevel = 5;
 * @return {number}
 */
proto.proto.CProtoDouNiuOption.prototype.getMIlevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.proto.CProtoDouNiuOption.prototype.setMIlevel = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.proto.CProtoDouNiuOption.prototype.clearMIlevel = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoDouNiuOption.prototype.hasMIlevel = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 m_iFiveX = 6;
 * @return {number}
 */
proto.proto.CProtoDouNiuOption.prototype.getMIfivex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.proto.CProtoDouNiuOption.prototype.setMIfivex = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.proto.CProtoDouNiuOption.prototype.clearMIfivex = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoDouNiuOption.prototype.hasMIfivex = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoDouDiZhuOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoDouDiZhuOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoDouDiZhuOption.displayName = 'proto.proto.CProtoDouDiZhuOption';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoDouDiZhuOption.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoDouDiZhuOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoDouDiZhuOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoDouDiZhuOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    mGametype: jspb.Message.getField(msg, 1),
    mDizhutype: jspb.Message.getField(msg, 2),
    mFlushcard: jspb.Message.getFieldWithDefault(msg, 3, false),
    mBeiginOrder: jspb.Message.getField(msg, 4),
    mMaxfan: jspb.Message.getField(msg, 5),
    mTuoguan: jspb.Message.getFieldWithDefault(msg, 6, false),
    mMingpai: jspb.Message.getFieldWithDefault(msg, 7, false),
    mDouble: jspb.Message.getFieldWithDefault(msg, 8, false),
    mGrabDouble: jspb.Message.getFieldWithDefault(msg, 9, false),
    mNoJiao: jspb.Message.getFieldWithDefault(msg, 10, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoDouDiZhuOption}
 */
proto.proto.CProtoDouDiZhuOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoDouDiZhuOption;
  return proto.proto.CProtoDouDiZhuOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoDouDiZhuOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoDouDiZhuOption}
 */
proto.proto.CProtoDouDiZhuOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMGametype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMDizhutype(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMFlushcard(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMBeiginOrder(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMMaxfan(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMTuoguan(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMMingpai(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMDouble(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMGrabDouble(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMNoJiao(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoDouDiZhuOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoDouDiZhuOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoDouDiZhuOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoDouDiZhuOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBool(
      10,
      f
    );
  }
};


/**
 * optional int32 m_gametype = 1;
 * @return {number}
 */
proto.proto.CProtoDouDiZhuOption.prototype.getMGametype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoDouDiZhuOption.prototype.setMGametype = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoDouDiZhuOption.prototype.clearMGametype = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoDouDiZhuOption.prototype.hasMGametype = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 m_dizhutype = 2;
 * @return {number}
 */
proto.proto.CProtoDouDiZhuOption.prototype.getMDizhutype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoDouDiZhuOption.prototype.setMDizhutype = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoDouDiZhuOption.prototype.clearMDizhutype = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoDouDiZhuOption.prototype.hasMDizhutype = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool m_flushcard = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoDouDiZhuOption.prototype.getMFlushcard = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.proto.CProtoDouDiZhuOption.prototype.setMFlushcard = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoDouDiZhuOption.prototype.clearMFlushcard = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoDouDiZhuOption.prototype.hasMFlushcard = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 m_beigin_order = 4;
 * @return {number}
 */
proto.proto.CProtoDouDiZhuOption.prototype.getMBeiginOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.CProtoDouDiZhuOption.prototype.setMBeiginOrder = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoDouDiZhuOption.prototype.clearMBeiginOrder = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoDouDiZhuOption.prototype.hasMBeiginOrder = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 m_maxfan = 5;
 * @return {number}
 */
proto.proto.CProtoDouDiZhuOption.prototype.getMMaxfan = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.proto.CProtoDouDiZhuOption.prototype.setMMaxfan = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.proto.CProtoDouDiZhuOption.prototype.clearMMaxfan = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoDouDiZhuOption.prototype.hasMMaxfan = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool m_tuoguan = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoDouDiZhuOption.prototype.getMTuoguan = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.proto.CProtoDouDiZhuOption.prototype.setMTuoguan = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.proto.CProtoDouDiZhuOption.prototype.clearMTuoguan = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoDouDiZhuOption.prototype.hasMTuoguan = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool m_mingpai = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoDouDiZhuOption.prototype.getMMingpai = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.proto.CProtoDouDiZhuOption.prototype.setMMingpai = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.proto.CProtoDouDiZhuOption.prototype.clearMMingpai = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoDouDiZhuOption.prototype.hasMMingpai = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool m_double = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoDouDiZhuOption.prototype.getMDouble = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.proto.CProtoDouDiZhuOption.prototype.setMDouble = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.proto.CProtoDouDiZhuOption.prototype.clearMDouble = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoDouDiZhuOption.prototype.hasMDouble = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool m_grab_double = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoDouDiZhuOption.prototype.getMGrabDouble = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.proto.CProtoDouDiZhuOption.prototype.setMGrabDouble = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.proto.CProtoDouDiZhuOption.prototype.clearMGrabDouble = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoDouDiZhuOption.prototype.hasMGrabDouble = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bool m_no_jiao = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoDouDiZhuOption.prototype.getMNoJiao = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.proto.CProtoDouDiZhuOption.prototype.setMNoJiao = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.proto.CProtoDouDiZhuOption.prototype.clearMNoJiao = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoDouDiZhuOption.prototype.hasMNoJiao = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoLaoYanCaiOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoLaoYanCaiOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoLaoYanCaiOption.displayName = 'proto.proto.CProtoLaoYanCaiOption';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoLaoYanCaiOption.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoLaoYanCaiOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoLaoYanCaiOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoLaoYanCaiOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    mDealerType: jspb.Message.getField(msg, 1),
    mPackCount: jspb.Message.getField(msg, 2),
    mMabao: jspb.Message.getFieldWithDefault(msg, 3, false),
    mTuoguan: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoLaoYanCaiOption}
 */
proto.proto.CProtoLaoYanCaiOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoLaoYanCaiOption;
  return proto.proto.CProtoLaoYanCaiOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoLaoYanCaiOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoLaoYanCaiOption}
 */
proto.proto.CProtoLaoYanCaiOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMDealerType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMPackCount(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMMabao(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMTuoguan(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoLaoYanCaiOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoLaoYanCaiOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoLaoYanCaiOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoLaoYanCaiOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional int32 m_dealer_type = 1;
 * @return {number}
 */
proto.proto.CProtoLaoYanCaiOption.prototype.getMDealerType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoLaoYanCaiOption.prototype.setMDealerType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoLaoYanCaiOption.prototype.clearMDealerType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoLaoYanCaiOption.prototype.hasMDealerType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 m_pack_count = 2;
 * @return {number}
 */
proto.proto.CProtoLaoYanCaiOption.prototype.getMPackCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoLaoYanCaiOption.prototype.setMPackCount = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoLaoYanCaiOption.prototype.clearMPackCount = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoLaoYanCaiOption.prototype.hasMPackCount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool m_mabao = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoLaoYanCaiOption.prototype.getMMabao = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.proto.CProtoLaoYanCaiOption.prototype.setMMabao = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoLaoYanCaiOption.prototype.clearMMabao = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoLaoYanCaiOption.prototype.hasMMabao = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool m_tuoguan = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoLaoYanCaiOption.prototype.getMTuoguan = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.proto.CProtoLaoYanCaiOption.prototype.setMTuoguan = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoLaoYanCaiOption.prototype.clearMTuoguan = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoLaoYanCaiOption.prototype.hasMTuoguan = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoKoreaHuaPaiOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoKoreaHuaPaiOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoKoreaHuaPaiOption.displayName = 'proto.proto.CProtoKoreaHuaPaiOption';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoKoreaHuaPaiOption.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoKoreaHuaPaiOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoKoreaHuaPaiOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoKoreaHuaPaiOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    mBonusCount: jspb.Message.getField(msg, 1),
    mTuoguan: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoKoreaHuaPaiOption}
 */
proto.proto.CProtoKoreaHuaPaiOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoKoreaHuaPaiOption;
  return proto.proto.CProtoKoreaHuaPaiOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoKoreaHuaPaiOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoKoreaHuaPaiOption}
 */
proto.proto.CProtoKoreaHuaPaiOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMBonusCount(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMTuoguan(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoKoreaHuaPaiOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoKoreaHuaPaiOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoKoreaHuaPaiOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoKoreaHuaPaiOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional int32 m_bonus_count = 1;
 * @return {number}
 */
proto.proto.CProtoKoreaHuaPaiOption.prototype.getMBonusCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoKoreaHuaPaiOption.prototype.setMBonusCount = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoKoreaHuaPaiOption.prototype.clearMBonusCount = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoKoreaHuaPaiOption.prototype.hasMBonusCount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool m_tuoguan = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoKoreaHuaPaiOption.prototype.getMTuoguan = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.proto.CProtoKoreaHuaPaiOption.prototype.setMTuoguan = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoKoreaHuaPaiOption.prototype.clearMTuoguan = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoKoreaHuaPaiOption.prototype.hasMTuoguan = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoPlayType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoPlayType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoPlayType.displayName = 'proto.proto.CProtoPlayType';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoPlayType.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoPlayType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoPlayType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoPlayType.toObject = function(includeInstance, msg) {
  var f, obj = {
    mComm: (f = msg.getMComm()) && proto.proto.CProtoCommonOption.toObject(includeInstance, f),
    mKaertiao: (f = msg.getMKaertiao()) && proto.proto.CProtoKaErTiaoOption.toObject(includeInstance, f),
    mKaxinwu: (f = msg.getMKaxinwu()) && proto.proto.CProtoKaXinWuOption.toObject(includeInstance, f),
    mLincang: (f = msg.getMLincang()) && proto.proto.CProtoLinCangOption.toObject(includeInstance, f),
    mXuezhan: (f = msg.getMXuezhan()) && proto.proto.CProtoXueZhanOption.toObject(includeInstance, f),
    mXiangyun: (f = msg.getMXiangyun()) && proto.proto.CProtoXiangYunOption.toObject(includeInstance, f),
    mShisanshui: (f = msg.getMShisanshui()) && proto.proto.CProtoShiSanShuiOption.toObject(includeInstance, f),
    mDoudizhu: (f = msg.getMDoudizhu()) && proto.proto.CProtoDouDiZhuOption.toObject(includeInstance, f),
    mZhajinhua: (f = msg.getMZhajinhua()) && proto.proto.CProtoZhaJinHuaOption.toObject(includeInstance, f),
    mDouniu: (f = msg.getMDouniu()) && proto.proto.CProtoDouNiuOption.toObject(includeInstance, f),
    mLaoyancai: (f = msg.getMLaoyancai()) && proto.proto.CProtoLaoYanCaiOption.toObject(includeInstance, f),
    mKoreahuapai: (f = msg.getMKoreahuapai()) && proto.proto.CProtoKoreaHuaPaiOption.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoPlayType}
 */
proto.proto.CProtoPlayType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoPlayType;
  return proto.proto.CProtoPlayType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoPlayType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoPlayType}
 */
proto.proto.CProtoPlayType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.CProtoCommonOption;
      reader.readMessage(value,proto.proto.CProtoCommonOption.deserializeBinaryFromReader);
      msg.setMComm(value);
      break;
    case 2:
      var value = new proto.proto.CProtoKaErTiaoOption;
      reader.readMessage(value,proto.proto.CProtoKaErTiaoOption.deserializeBinaryFromReader);
      msg.setMKaertiao(value);
      break;
    case 3:
      var value = new proto.proto.CProtoKaXinWuOption;
      reader.readMessage(value,proto.proto.CProtoKaXinWuOption.deserializeBinaryFromReader);
      msg.setMKaxinwu(value);
      break;
    case 4:
      var value = new proto.proto.CProtoLinCangOption;
      reader.readMessage(value,proto.proto.CProtoLinCangOption.deserializeBinaryFromReader);
      msg.setMLincang(value);
      break;
    case 5:
      var value = new proto.proto.CProtoXueZhanOption;
      reader.readMessage(value,proto.proto.CProtoXueZhanOption.deserializeBinaryFromReader);
      msg.setMXuezhan(value);
      break;
    case 6:
      var value = new proto.proto.CProtoXiangYunOption;
      reader.readMessage(value,proto.proto.CProtoXiangYunOption.deserializeBinaryFromReader);
      msg.setMXiangyun(value);
      break;
    case 7:
      var value = new proto.proto.CProtoShiSanShuiOption;
      reader.readMessage(value,proto.proto.CProtoShiSanShuiOption.deserializeBinaryFromReader);
      msg.setMShisanshui(value);
      break;
    case 8:
      var value = new proto.proto.CProtoDouDiZhuOption;
      reader.readMessage(value,proto.proto.CProtoDouDiZhuOption.deserializeBinaryFromReader);
      msg.setMDoudizhu(value);
      break;
    case 21:
      var value = new proto.proto.CProtoZhaJinHuaOption;
      reader.readMessage(value,proto.proto.CProtoZhaJinHuaOption.deserializeBinaryFromReader);
      msg.setMZhajinhua(value);
      break;
    case 22:
      var value = new proto.proto.CProtoDouNiuOption;
      reader.readMessage(value,proto.proto.CProtoDouNiuOption.deserializeBinaryFromReader);
      msg.setMDouniu(value);
      break;
    case 23:
      var value = new proto.proto.CProtoLaoYanCaiOption;
      reader.readMessage(value,proto.proto.CProtoLaoYanCaiOption.deserializeBinaryFromReader);
      msg.setMLaoyancai(value);
      break;
    case 24:
      var value = new proto.proto.CProtoKoreaHuaPaiOption;
      reader.readMessage(value,proto.proto.CProtoKoreaHuaPaiOption.deserializeBinaryFromReader);
      msg.setMKoreahuapai(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoPlayType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoPlayType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoPlayType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoPlayType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMComm();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.CProtoCommonOption.serializeBinaryToWriter
    );
  }
  f = message.getMKaertiao();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.CProtoKaErTiaoOption.serializeBinaryToWriter
    );
  }
  f = message.getMKaxinwu();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.CProtoKaXinWuOption.serializeBinaryToWriter
    );
  }
  f = message.getMLincang();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.proto.CProtoLinCangOption.serializeBinaryToWriter
    );
  }
  f = message.getMXuezhan();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.proto.CProtoXueZhanOption.serializeBinaryToWriter
    );
  }
  f = message.getMXiangyun();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.proto.CProtoXiangYunOption.serializeBinaryToWriter
    );
  }
  f = message.getMShisanshui();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.proto.CProtoShiSanShuiOption.serializeBinaryToWriter
    );
  }
  f = message.getMDoudizhu();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.proto.CProtoDouDiZhuOption.serializeBinaryToWriter
    );
  }
  f = message.getMZhajinhua();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.proto.CProtoZhaJinHuaOption.serializeBinaryToWriter
    );
  }
  f = message.getMDouniu();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.proto.CProtoDouNiuOption.serializeBinaryToWriter
    );
  }
  f = message.getMLaoyancai();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.proto.CProtoLaoYanCaiOption.serializeBinaryToWriter
    );
  }
  f = message.getMKoreahuapai();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.proto.CProtoKoreaHuaPaiOption.serializeBinaryToWriter
    );
  }
};


/**
 * required CProtoCommonOption m_comm = 1;
 * @return {!proto.proto.CProtoCommonOption}
 */
proto.proto.CProtoPlayType.prototype.getMComm = function() {
  return /** @type{!proto.proto.CProtoCommonOption} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoCommonOption, 1, 1));
};


/** @param {!proto.proto.CProtoCommonOption} value */
proto.proto.CProtoPlayType.prototype.setMComm = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.CProtoPlayType.prototype.clearMComm = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoPlayType.prototype.hasMComm = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CProtoKaErTiaoOption m_kaertiao = 2;
 * @return {?proto.proto.CProtoKaErTiaoOption}
 */
proto.proto.CProtoPlayType.prototype.getMKaertiao = function() {
  return /** @type{?proto.proto.CProtoKaErTiaoOption} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoKaErTiaoOption, 2));
};


/** @param {?proto.proto.CProtoKaErTiaoOption|undefined} value */
proto.proto.CProtoPlayType.prototype.setMKaertiao = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.proto.CProtoPlayType.prototype.clearMKaertiao = function() {
  this.setMKaertiao(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoPlayType.prototype.hasMKaertiao = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CProtoKaXinWuOption m_kaxinwu = 3;
 * @return {?proto.proto.CProtoKaXinWuOption}
 */
proto.proto.CProtoPlayType.prototype.getMKaxinwu = function() {
  return /** @type{?proto.proto.CProtoKaXinWuOption} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoKaXinWuOption, 3));
};


/** @param {?proto.proto.CProtoKaXinWuOption|undefined} value */
proto.proto.CProtoPlayType.prototype.setMKaxinwu = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.proto.CProtoPlayType.prototype.clearMKaxinwu = function() {
  this.setMKaxinwu(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoPlayType.prototype.hasMKaxinwu = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CProtoLinCangOption m_lincang = 4;
 * @return {?proto.proto.CProtoLinCangOption}
 */
proto.proto.CProtoPlayType.prototype.getMLincang = function() {
  return /** @type{?proto.proto.CProtoLinCangOption} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoLinCangOption, 4));
};


/** @param {?proto.proto.CProtoLinCangOption|undefined} value */
proto.proto.CProtoPlayType.prototype.setMLincang = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.proto.CProtoPlayType.prototype.clearMLincang = function() {
  this.setMLincang(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoPlayType.prototype.hasMLincang = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional CProtoXueZhanOption m_xuezhan = 5;
 * @return {?proto.proto.CProtoXueZhanOption}
 */
proto.proto.CProtoPlayType.prototype.getMXuezhan = function() {
  return /** @type{?proto.proto.CProtoXueZhanOption} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoXueZhanOption, 5));
};


/** @param {?proto.proto.CProtoXueZhanOption|undefined} value */
proto.proto.CProtoPlayType.prototype.setMXuezhan = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.proto.CProtoPlayType.prototype.clearMXuezhan = function() {
  this.setMXuezhan(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoPlayType.prototype.hasMXuezhan = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional CProtoXiangYunOption m_xiangyun = 6;
 * @return {?proto.proto.CProtoXiangYunOption}
 */
proto.proto.CProtoPlayType.prototype.getMXiangyun = function() {
  return /** @type{?proto.proto.CProtoXiangYunOption} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoXiangYunOption, 6));
};


/** @param {?proto.proto.CProtoXiangYunOption|undefined} value */
proto.proto.CProtoPlayType.prototype.setMXiangyun = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.proto.CProtoPlayType.prototype.clearMXiangyun = function() {
  this.setMXiangyun(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoPlayType.prototype.hasMXiangyun = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional CProtoShiSanShuiOption m_shisanshui = 7;
 * @return {?proto.proto.CProtoShiSanShuiOption}
 */
proto.proto.CProtoPlayType.prototype.getMShisanshui = function() {
  return /** @type{?proto.proto.CProtoShiSanShuiOption} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoShiSanShuiOption, 7));
};


/** @param {?proto.proto.CProtoShiSanShuiOption|undefined} value */
proto.proto.CProtoPlayType.prototype.setMShisanshui = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.proto.CProtoPlayType.prototype.clearMShisanshui = function() {
  this.setMShisanshui(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoPlayType.prototype.hasMShisanshui = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional CProtoDouDiZhuOption m_doudizhu = 8;
 * @return {?proto.proto.CProtoDouDiZhuOption}
 */
proto.proto.CProtoPlayType.prototype.getMDoudizhu = function() {
  return /** @type{?proto.proto.CProtoDouDiZhuOption} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoDouDiZhuOption, 8));
};


/** @param {?proto.proto.CProtoDouDiZhuOption|undefined} value */
proto.proto.CProtoPlayType.prototype.setMDoudizhu = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.proto.CProtoPlayType.prototype.clearMDoudizhu = function() {
  this.setMDoudizhu(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoPlayType.prototype.hasMDoudizhu = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional CProtoZhaJinHuaOption m_zhajinhua = 21;
 * @return {?proto.proto.CProtoZhaJinHuaOption}
 */
proto.proto.CProtoPlayType.prototype.getMZhajinhua = function() {
  return /** @type{?proto.proto.CProtoZhaJinHuaOption} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoZhaJinHuaOption, 21));
};


/** @param {?proto.proto.CProtoZhaJinHuaOption|undefined} value */
proto.proto.CProtoPlayType.prototype.setMZhajinhua = function(value) {
  jspb.Message.setWrapperField(this, 21, value);
};


proto.proto.CProtoPlayType.prototype.clearMZhajinhua = function() {
  this.setMZhajinhua(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoPlayType.prototype.hasMZhajinhua = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional CProtoDouNiuOption m_douniu = 22;
 * @return {?proto.proto.CProtoDouNiuOption}
 */
proto.proto.CProtoPlayType.prototype.getMDouniu = function() {
  return /** @type{?proto.proto.CProtoDouNiuOption} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoDouNiuOption, 22));
};


/** @param {?proto.proto.CProtoDouNiuOption|undefined} value */
proto.proto.CProtoPlayType.prototype.setMDouniu = function(value) {
  jspb.Message.setWrapperField(this, 22, value);
};


proto.proto.CProtoPlayType.prototype.clearMDouniu = function() {
  this.setMDouniu(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoPlayType.prototype.hasMDouniu = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional CProtoLaoYanCaiOption m_laoyancai = 23;
 * @return {?proto.proto.CProtoLaoYanCaiOption}
 */
proto.proto.CProtoPlayType.prototype.getMLaoyancai = function() {
  return /** @type{?proto.proto.CProtoLaoYanCaiOption} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoLaoYanCaiOption, 23));
};


/** @param {?proto.proto.CProtoLaoYanCaiOption|undefined} value */
proto.proto.CProtoPlayType.prototype.setMLaoyancai = function(value) {
  jspb.Message.setWrapperField(this, 23, value);
};


proto.proto.CProtoPlayType.prototype.clearMLaoyancai = function() {
  this.setMLaoyancai(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoPlayType.prototype.hasMLaoyancai = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional CProtoKoreaHuaPaiOption m_koreahuapai = 24;
 * @return {?proto.proto.CProtoKoreaHuaPaiOption}
 */
proto.proto.CProtoPlayType.prototype.getMKoreahuapai = function() {
  return /** @type{?proto.proto.CProtoKoreaHuaPaiOption} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoKoreaHuaPaiOption, 24));
};


/** @param {?proto.proto.CProtoKoreaHuaPaiOption|undefined} value */
proto.proto.CProtoPlayType.prototype.setMKoreahuapai = function(value) {
  jspb.Message.setWrapperField(this, 24, value);
};


proto.proto.CProtoPlayType.prototype.clearMKoreahuapai = function() {
  this.setMKoreahuapai(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoPlayType.prototype.hasMKoreahuapai = function() {
  return jspb.Message.getField(this, 24) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqCreateCsRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoReqCreateCsRoom.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoReqCreateCsRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqCreateCsRoom.displayName = 'proto.proto.CProtoReqCreateCsRoom';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoReqCreateCsRoom.repeatedFields_ = [7,8,9,10,11,12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqCreateCsRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqCreateCsRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqCreateCsRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqCreateCsRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    mRobotnum: jspb.Message.getFieldWithDefault(msg, 6, 0),
    mCardvalueList: jspb.Message.getRepeatedField(msg, 7),
    mCardvalue2List: jspb.Message.getRepeatedField(msg, 8),
    mCardvalue3List: jspb.Message.getRepeatedField(msg, 9),
    mCardvalue4List: jspb.Message.getRepeatedField(msg, 10),
    mCardgenList: jspb.Message.getRepeatedField(msg, 11),
    mCardmingList: jspb.Message.getRepeatedField(msg, 12),
    mPlaytype: (f = msg.getMPlaytype()) && proto.proto.CProtoPlayType.toObject(includeInstance, f),
    mClientversion: (f = msg.getMClientversion()) && proto.proto.CProtoClientVersion.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqCreateCsRoom}
 */
proto.proto.CProtoReqCreateCsRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqCreateCsRoom;
  return proto.proto.CProtoReqCreateCsRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqCreateCsRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqCreateCsRoom}
 */
proto.proto.CProtoReqCreateCsRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMRobotnum(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addMCardvalue(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addMCardvalue2(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addMCardvalue3(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addMCardvalue4(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addMCardgen(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addMCardming(value);
      break;
    case 13:
      var value = new proto.proto.CProtoPlayType;
      reader.readMessage(value,proto.proto.CProtoPlayType.deserializeBinaryFromReader);
      msg.setMPlaytype(value);
      break;
    case 14:
      var value = new proto.proto.CProtoClientVersion;
      reader.readMessage(value,proto.proto.CProtoClientVersion.deserializeBinaryFromReader);
      msg.setMClientversion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqCreateCsRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqCreateCsRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqCreateCsRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqCreateCsRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getMCardvalueList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      7,
      f
    );
  }
  f = message.getMCardvalue2List();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      8,
      f
    );
  }
  f = message.getMCardvalue3List();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      9,
      f
    );
  }
  f = message.getMCardvalue4List();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      10,
      f
    );
  }
  f = message.getMCardgenList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      11,
      f
    );
  }
  f = message.getMCardmingList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      12,
      f
    );
  }
  f = message.getMPlaytype();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.proto.CProtoPlayType.serializeBinaryToWriter
    );
  }
  f = message.getMClientversion();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.proto.CProtoClientVersion.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 m_robotNum = 6;
 * @return {number}
 */
proto.proto.CProtoReqCreateCsRoom.prototype.getMRobotnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.proto.CProtoReqCreateCsRoom.prototype.setMRobotnum = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.proto.CProtoReqCreateCsRoom.prototype.clearMRobotnum = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqCreateCsRoom.prototype.hasMRobotnum = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated int32 m_cardValue = 7;
 * @return {!Array.<number>}
 */
proto.proto.CProtoReqCreateCsRoom.prototype.getMCardvalueList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/** @param {!Array.<number>} value */
proto.proto.CProtoReqCreateCsRoom.prototype.setMCardvalueList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.CProtoReqCreateCsRoom.prototype.addMCardvalue = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.proto.CProtoReqCreateCsRoom.prototype.clearMCardvalueList = function() {
  this.setMCardvalueList([]);
};


/**
 * repeated int32 m_cardValue2 = 8;
 * @return {!Array.<number>}
 */
proto.proto.CProtoReqCreateCsRoom.prototype.getMCardvalue2List = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 8));
};


/** @param {!Array.<number>} value */
proto.proto.CProtoReqCreateCsRoom.prototype.setMCardvalue2List = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.CProtoReqCreateCsRoom.prototype.addMCardvalue2 = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.proto.CProtoReqCreateCsRoom.prototype.clearMCardvalue2List = function() {
  this.setMCardvalue2List([]);
};


/**
 * repeated int32 m_cardValue3 = 9;
 * @return {!Array.<number>}
 */
proto.proto.CProtoReqCreateCsRoom.prototype.getMCardvalue3List = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 9));
};


/** @param {!Array.<number>} value */
proto.proto.CProtoReqCreateCsRoom.prototype.setMCardvalue3List = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.CProtoReqCreateCsRoom.prototype.addMCardvalue3 = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


proto.proto.CProtoReqCreateCsRoom.prototype.clearMCardvalue3List = function() {
  this.setMCardvalue3List([]);
};


/**
 * repeated int32 m_cardValue4 = 10;
 * @return {!Array.<number>}
 */
proto.proto.CProtoReqCreateCsRoom.prototype.getMCardvalue4List = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 10));
};


/** @param {!Array.<number>} value */
proto.proto.CProtoReqCreateCsRoom.prototype.setMCardvalue4List = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.CProtoReqCreateCsRoom.prototype.addMCardvalue4 = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


proto.proto.CProtoReqCreateCsRoom.prototype.clearMCardvalue4List = function() {
  this.setMCardvalue4List([]);
};


/**
 * repeated int32 m_cardGen = 11;
 * @return {!Array.<number>}
 */
proto.proto.CProtoReqCreateCsRoom.prototype.getMCardgenList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 11));
};


/** @param {!Array.<number>} value */
proto.proto.CProtoReqCreateCsRoom.prototype.setMCardgenList = function(value) {
  jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.CProtoReqCreateCsRoom.prototype.addMCardgen = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


proto.proto.CProtoReqCreateCsRoom.prototype.clearMCardgenList = function() {
  this.setMCardgenList([]);
};


/**
 * repeated int32 m_cardMing = 12;
 * @return {!Array.<number>}
 */
proto.proto.CProtoReqCreateCsRoom.prototype.getMCardmingList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 12));
};


/** @param {!Array.<number>} value */
proto.proto.CProtoReqCreateCsRoom.prototype.setMCardmingList = function(value) {
  jspb.Message.setField(this, 12, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.CProtoReqCreateCsRoom.prototype.addMCardming = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 12, value, opt_index);
};


proto.proto.CProtoReqCreateCsRoom.prototype.clearMCardmingList = function() {
  this.setMCardmingList([]);
};


/**
 * required CProtoPlayType m_playtype = 13;
 * @return {!proto.proto.CProtoPlayType}
 */
proto.proto.CProtoReqCreateCsRoom.prototype.getMPlaytype = function() {
  return /** @type{!proto.proto.CProtoPlayType} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoPlayType, 13, 1));
};


/** @param {!proto.proto.CProtoPlayType} value */
proto.proto.CProtoReqCreateCsRoom.prototype.setMPlaytype = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.proto.CProtoReqCreateCsRoom.prototype.clearMPlaytype = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqCreateCsRoom.prototype.hasMPlaytype = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional CProtoClientVersion m_clientVersion = 14;
 * @return {?proto.proto.CProtoClientVersion}
 */
proto.proto.CProtoReqCreateCsRoom.prototype.getMClientversion = function() {
  return /** @type{?proto.proto.CProtoClientVersion} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoClientVersion, 14));
};


/** @param {?proto.proto.CProtoClientVersion|undefined} value */
proto.proto.CProtoReqCreateCsRoom.prototype.setMClientversion = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.proto.CProtoReqCreateCsRoom.prototype.clearMClientversion = function() {
  this.setMClientversion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqCreateCsRoom.prototype.hasMClientversion = function() {
  return jspb.Message.getField(this, 14) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspCreateCsRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRspCreateCsRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspCreateCsRoom.displayName = 'proto.proto.CProtoRspCreateCsRoom';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspCreateCsRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspCreateCsRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspCreateCsRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspCreateCsRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    mErrorcode: jspb.Message.getField(msg, 1),
    roomId: jspb.Message.getField(msg, 2),
    mPlaytype: (f = msg.getMPlaytype()) && proto.proto.CProtoPlayType.toObject(includeInstance, f),
    roomState: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspCreateCsRoom}
 */
proto.proto.CProtoRspCreateCsRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspCreateCsRoom;
  return proto.proto.CProtoRspCreateCsRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspCreateCsRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspCreateCsRoom}
 */
proto.proto.CProtoRspCreateCsRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMErrorcode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomId(value);
      break;
    case 3:
      var value = new proto.proto.CProtoPlayType;
      reader.readMessage(value,proto.proto.CProtoPlayType.deserializeBinaryFromReader);
      msg.setMPlaytype(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspCreateCsRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspCreateCsRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspCreateCsRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspCreateCsRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMPlaytype();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.CProtoPlayType.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * required int32 m_errorCode = 1;
 * @return {number}
 */
proto.proto.CProtoRspCreateCsRoom.prototype.getMErrorcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspCreateCsRoom.prototype.setMErrorcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspCreateCsRoom.prototype.clearMErrorcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspCreateCsRoom.prototype.hasMErrorcode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 room_id = 2;
 * @return {number}
 */
proto.proto.CProtoRspCreateCsRoom.prototype.getRoomId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoRspCreateCsRoom.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoRspCreateCsRoom.prototype.clearRoomId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspCreateCsRoom.prototype.hasRoomId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CProtoPlayType m_playtype = 3;
 * @return {?proto.proto.CProtoPlayType}
 */
proto.proto.CProtoRspCreateCsRoom.prototype.getMPlaytype = function() {
  return /** @type{?proto.proto.CProtoPlayType} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoPlayType, 3));
};


/** @param {?proto.proto.CProtoPlayType|undefined} value */
proto.proto.CProtoRspCreateCsRoom.prototype.setMPlaytype = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.proto.CProtoRspCreateCsRoom.prototype.clearMPlaytype = function() {
  this.setMPlaytype(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspCreateCsRoom.prototype.hasMPlaytype = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 room_state = 4;
 * @return {number}
 */
proto.proto.CProtoRspCreateCsRoom.prototype.getRoomState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.CProtoRspCreateCsRoom.prototype.setRoomState = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoRspCreateCsRoom.prototype.clearRoomState = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspCreateCsRoom.prototype.hasRoomState = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqQuitRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqQuitRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqQuitRoom.displayName = 'proto.proto.CProtoReqQuitRoom';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqQuitRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqQuitRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqQuitRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqQuitRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    mPos: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqQuitRoom}
 */
proto.proto.CProtoReqQuitRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqQuitRoom;
  return proto.proto.CProtoReqQuitRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqQuitRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqQuitRoom}
 */
proto.proto.CProtoReqQuitRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMPos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqQuitRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqQuitRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqQuitRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqQuitRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 m_pos = 1;
 * @return {number}
 */
proto.proto.CProtoReqQuitRoom.prototype.getMPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoReqQuitRoom.prototype.setMPos = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqQuitRoom.prototype.clearMPos = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqQuitRoom.prototype.hasMPos = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspQuitRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRspQuitRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspQuitRoom.displayName = 'proto.proto.CProtoRspQuitRoom';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspQuitRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspQuitRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspQuitRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspQuitRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    mErrorcode: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspQuitRoom}
 */
proto.proto.CProtoRspQuitRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspQuitRoom;
  return proto.proto.CProtoRspQuitRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspQuitRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspQuitRoom}
 */
proto.proto.CProtoRspQuitRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMErrorcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspQuitRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspQuitRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspQuitRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspQuitRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 m_errorCode = 1;
 * @return {number}
 */
proto.proto.CProtoRspQuitRoom.prototype.getMErrorcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspQuitRoom.prototype.setMErrorcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspQuitRoom.prototype.clearMErrorcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspQuitRoom.prototype.hasMErrorcode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyEnterRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifyEnterRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyEnterRoom.displayName = 'proto.proto.CProtoNotifyEnterRoom';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyEnterRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyEnterRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyEnterRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyEnterRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    mState: jspb.Message.getField(msg, 1),
    mDeskid: jspb.Message.getField(msg, 2),
    mPos: jspb.Message.getField(msg, 4),
    mMaxcircle: jspb.Message.getField(msg, 5),
    mReady: jspb.Message.getField(msg, 6),
    mScore: jspb.Message.getField(msg, 7),
    mCreater: jspb.Message.getField(msg, 9),
    mPlaytype: (f = msg.getMPlaytype()) && proto.proto.CProtoPlayType.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyEnterRoom}
 */
proto.proto.CProtoNotifyEnterRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyEnterRoom;
  return proto.proto.CProtoNotifyEnterRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyEnterRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyEnterRoom}
 */
proto.proto.CProtoNotifyEnterRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMState(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMDeskid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMPos(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMMaxcircle(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMReady(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMScore(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMCreater(value);
      break;
    case 10:
      var value = new proto.proto.CProtoPlayType;
      reader.readMessage(value,proto.proto.CProtoPlayType.deserializeBinaryFromReader);
      msg.setMPlaytype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyEnterRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyEnterRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyEnterRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyEnterRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getMPlaytype();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.proto.CProtoPlayType.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 m_state = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyEnterRoom.prototype.getMState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyEnterRoom.prototype.setMState = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyEnterRoom.prototype.clearMState = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyEnterRoom.prototype.hasMState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_deskId = 2;
 * @return {number}
 */
proto.proto.CProtoNotifyEnterRoom.prototype.getMDeskid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyEnterRoom.prototype.setMDeskid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifyEnterRoom.prototype.clearMDeskid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyEnterRoom.prototype.hasMDeskid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 m_pos = 4;
 * @return {number}
 */
proto.proto.CProtoNotifyEnterRoom.prototype.getMPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyEnterRoom.prototype.setMPos = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoNotifyEnterRoom.prototype.clearMPos = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyEnterRoom.prototype.hasMPos = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 m_maxCircle = 5;
 * @return {number}
 */
proto.proto.CProtoNotifyEnterRoom.prototype.getMMaxcircle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyEnterRoom.prototype.setMMaxcircle = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.proto.CProtoNotifyEnterRoom.prototype.clearMMaxcircle = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyEnterRoom.prototype.hasMMaxcircle = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int32 m_ready = 6;
 * @return {number}
 */
proto.proto.CProtoNotifyEnterRoom.prototype.getMReady = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyEnterRoom.prototype.setMReady = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.proto.CProtoNotifyEnterRoom.prototype.clearMReady = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyEnterRoom.prototype.hasMReady = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required int32 m_score = 7;
 * @return {number}
 */
proto.proto.CProtoNotifyEnterRoom.prototype.getMScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyEnterRoom.prototype.setMScore = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.proto.CProtoNotifyEnterRoom.prototype.clearMScore = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyEnterRoom.prototype.hasMScore = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int32 m_creater = 9;
 * @return {number}
 */
proto.proto.CProtoNotifyEnterRoom.prototype.getMCreater = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyEnterRoom.prototype.setMCreater = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.proto.CProtoNotifyEnterRoom.prototype.clearMCreater = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyEnterRoom.prototype.hasMCreater = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional CProtoPlayType m_playtype = 10;
 * @return {?proto.proto.CProtoPlayType}
 */
proto.proto.CProtoNotifyEnterRoom.prototype.getMPlaytype = function() {
  return /** @type{?proto.proto.CProtoPlayType} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoPlayType, 10));
};


/** @param {?proto.proto.CProtoPlayType|undefined} value */
proto.proto.CProtoNotifyEnterRoom.prototype.setMPlaytype = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.proto.CProtoNotifyEnterRoom.prototype.clearMPlaytype = function() {
  this.setMPlaytype(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyEnterRoom.prototype.hasMPlaytype = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyAddPlayer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifyAddPlayer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyAddPlayer.displayName = 'proto.proto.CProtoNotifyAddPlayer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyAddPlayer.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyAddPlayer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyAddPlayer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyAddPlayer.toObject = function(includeInstance, msg) {
  var f, obj = {
    mUserid: jspb.Message.getField(msg, 1),
    mNike: jspb.Message.getField(msg, 2),
    mFace: jspb.Message.getField(msg, 3),
    mSex: jspb.Message.getField(msg, 4),
    mIp: jspb.Message.getField(msg, 5),
    mPos: jspb.Message.getField(msg, 6),
    mReady: jspb.Message.getField(msg, 7),
    mScore: jspb.Message.getField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyAddPlayer}
 */
proto.proto.CProtoNotifyAddPlayer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyAddPlayer;
  return proto.proto.CProtoNotifyAddPlayer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyAddPlayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyAddPlayer}
 */
proto.proto.CProtoNotifyAddPlayer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMNike(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMFace(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMSex(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMIp(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMPos(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMReady(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyAddPlayer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyAddPlayer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyAddPlayer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyAddPlayer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * required int32 m_userId = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyAddPlayer.prototype.getMUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyAddPlayer.prototype.setMUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyAddPlayer.prototype.clearMUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyAddPlayer.prototype.hasMUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string m_nike = 2;
 * @return {string}
 */
proto.proto.CProtoNotifyAddPlayer.prototype.getMNike = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.CProtoNotifyAddPlayer.prototype.setMNike = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifyAddPlayer.prototype.clearMNike = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyAddPlayer.prototype.hasMNike = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string m_face = 3;
 * @return {string}
 */
proto.proto.CProtoNotifyAddPlayer.prototype.getMFace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.proto.CProtoNotifyAddPlayer.prototype.setMFace = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoNotifyAddPlayer.prototype.clearMFace = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyAddPlayer.prototype.hasMFace = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 m_sex = 4;
 * @return {number}
 */
proto.proto.CProtoNotifyAddPlayer.prototype.getMSex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyAddPlayer.prototype.setMSex = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoNotifyAddPlayer.prototype.clearMSex = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyAddPlayer.prototype.hasMSex = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required string m_ip = 5;
 * @return {string}
 */
proto.proto.CProtoNotifyAddPlayer.prototype.getMIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.proto.CProtoNotifyAddPlayer.prototype.setMIp = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.proto.CProtoNotifyAddPlayer.prototype.clearMIp = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyAddPlayer.prototype.hasMIp = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int32 m_pos = 6;
 * @return {number}
 */
proto.proto.CProtoNotifyAddPlayer.prototype.getMPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyAddPlayer.prototype.setMPos = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.proto.CProtoNotifyAddPlayer.prototype.clearMPos = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyAddPlayer.prototype.hasMPos = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required int32 m_ready = 7;
 * @return {number}
 */
proto.proto.CProtoNotifyAddPlayer.prototype.getMReady = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyAddPlayer.prototype.setMReady = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.proto.CProtoNotifyAddPlayer.prototype.clearMReady = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyAddPlayer.prototype.hasMReady = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required int32 m_score = 8;
 * @return {number}
 */
proto.proto.CProtoNotifyAddPlayer.prototype.getMScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyAddPlayer.prototype.setMScore = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.proto.CProtoNotifyAddPlayer.prototype.clearMScore = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyAddPlayer.prototype.hasMScore = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyRemovePlayer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifyRemovePlayer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyRemovePlayer.displayName = 'proto.proto.CProtoNotifyRemovePlayer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyRemovePlayer.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyRemovePlayer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyRemovePlayer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyRemovePlayer.toObject = function(includeInstance, msg) {
  var f, obj = {
    mPos: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyRemovePlayer}
 */
proto.proto.CProtoNotifyRemovePlayer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyRemovePlayer;
  return proto.proto.CProtoNotifyRemovePlayer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyRemovePlayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyRemovePlayer}
 */
proto.proto.CProtoNotifyRemovePlayer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMPos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyRemovePlayer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyRemovePlayer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyRemovePlayer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyRemovePlayer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 m_pos = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyRemovePlayer.prototype.getMPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRemovePlayer.prototype.setMPos = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyRemovePlayer.prototype.clearMPos = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRemovePlayer.prototype.hasMPos = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoBucket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoBucket.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoBucket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoBucket.displayName = 'proto.proto.CProtoBucket';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoBucket.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoBucket.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoBucket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoBucket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoBucket.toObject = function(includeInstance, msg) {
  var f, obj = {
    cardType: jspb.Message.getField(msg, 1),
    fromWho: jspb.Message.getField(msg, 2),
    gangType: jspb.Message.getField(msg, 3),
    mCardList: jspb.Message.toObjectList(msg.getMCardList(),
    proto.proto.CProtoBucket.CProtoCard.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoBucket}
 */
proto.proto.CProtoBucket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoBucket;
  return proto.proto.CProtoBucket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoBucket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoBucket}
 */
proto.proto.CProtoBucket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCardType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFromWho(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGangType(value);
      break;
    case 4:
      var value = new proto.proto.CProtoBucket.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoBucket.CProtoCard.deserializeBinaryFromReader);
      msg.addMCard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoBucket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoBucket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoBucket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoBucket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getMCardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.proto.CProtoBucket.CProtoCard.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoBucket.CProtoCard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoBucket.CProtoCard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoBucket.CProtoCard.displayName = 'proto.proto.CProtoBucket.CProtoCard';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoBucket.CProtoCard.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoBucket.CProtoCard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoBucket.CProtoCard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoBucket.CProtoCard.toObject = function(includeInstance, msg) {
  var f, obj = {
    mColor: jspb.Message.getField(msg, 1),
    mNumber: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoBucket.CProtoCard}
 */
proto.proto.CProtoBucket.CProtoCard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoBucket.CProtoCard;
  return proto.proto.CProtoBucket.CProtoCard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoBucket.CProtoCard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoBucket.CProtoCard}
 */
proto.proto.CProtoBucket.CProtoCard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMColor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoBucket.CProtoCard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoBucket.CProtoCard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoBucket.CProtoCard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoBucket.CProtoCard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 m_color = 1;
 * @return {number}
 */
proto.proto.CProtoBucket.CProtoCard.prototype.getMColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoBucket.CProtoCard.prototype.setMColor = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoBucket.CProtoCard.prototype.clearMColor = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoBucket.CProtoCard.prototype.hasMColor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_number = 2;
 * @return {number}
 */
proto.proto.CProtoBucket.CProtoCard.prototype.getMNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoBucket.CProtoCard.prototype.setMNumber = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoBucket.CProtoCard.prototype.clearMNumber = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoBucket.CProtoCard.prototype.hasMNumber = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 card_type = 1;
 * @return {number}
 */
proto.proto.CProtoBucket.prototype.getCardType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoBucket.prototype.setCardType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoBucket.prototype.clearCardType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoBucket.prototype.hasCardType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 from_who = 2;
 * @return {number}
 */
proto.proto.CProtoBucket.prototype.getFromWho = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoBucket.prototype.setFromWho = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoBucket.prototype.clearFromWho = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoBucket.prototype.hasFromWho = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 gang_type = 3;
 * @return {number}
 */
proto.proto.CProtoBucket.prototype.getGangType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoBucket.prototype.setGangType = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoBucket.prototype.clearGangType = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoBucket.prototype.hasGangType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated CProtoCard m_card = 4;
 * @return {!Array.<!proto.proto.CProtoBucket.CProtoCard>}
 */
proto.proto.CProtoBucket.prototype.getMCardList = function() {
  return /** @type{!Array.<!proto.proto.CProtoBucket.CProtoCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoBucket.CProtoCard, 4));
};


/** @param {!Array.<!proto.proto.CProtoBucket.CProtoCard>} value */
proto.proto.CProtoBucket.prototype.setMCardList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.proto.CProtoBucket.CProtoCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoBucket.CProtoCard}
 */
proto.proto.CProtoBucket.prototype.addMCard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.proto.CProtoBucket.CProtoCard, opt_index);
};


proto.proto.CProtoBucket.prototype.clearMCardList = function() {
  this.setMCardList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyRoomState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoNotifyRoomState.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoNotifyRoomState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyRoomState.displayName = 'proto.proto.CProtoNotifyRoomState';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoNotifyRoomState.repeatedFields_ = [5,6,7,8,9,10,14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyRoomState.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyRoomState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyRoomState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyRoomState.toObject = function(includeInstance, msg) {
  var f, obj = {
    mState: jspb.Message.getField(msg, 1),
    mPos: jspb.Message.getField(msg, 2),
    mDcount: jspb.Message.getField(msg, 3),
    mZhuang: jspb.Message.getField(msg, 4),
    mCardcountList: jspb.Message.getRepeatedField(msg, 5),
    mMycardList: jspb.Message.toObjectList(msg.getMMycardList(),
    proto.proto.CProtoCard.toObject, includeInstance),
    mScoreList: jspb.Message.getRepeatedField(msg, 7),
    seatsDataList: jspb.Message.toObjectList(msg.getSeatsDataList(),
    proto.proto.CProtoNotifyRoomState.CProtoItem.toObject, includeInstance),
    mKingcardList: jspb.Message.toObjectList(msg.getMKingcardList(),
    proto.proto.CProtoCard.toObject, includeInstance),
    mingCardsList: jspb.Message.toObjectList(msg.getMingCardsList(),
    proto.proto.CProtoCard.toObject, includeInstance),
    mBasescore: jspb.Message.getField(msg, 11),
    mRoomState: jspb.Message.getField(msg, 12),
    mDingqueover: jspb.Message.getFieldWithDefault(msg, 13, false),
    mMypokerList: jspb.Message.getRepeatedField(msg, 14)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyRoomState}
 */
proto.proto.CProtoNotifyRoomState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyRoomState;
  return proto.proto.CProtoNotifyRoomState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyRoomState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyRoomState}
 */
proto.proto.CProtoNotifyRoomState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMState(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMPos(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMDcount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMZhuang(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addMCardcount(value);
      break;
    case 6:
      var value = new proto.proto.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoCard.deserializeBinaryFromReader);
      msg.addMMycard(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addMScore(value);
      break;
    case 8:
      var value = new proto.proto.CProtoNotifyRoomState.CProtoItem;
      reader.readMessage(value,proto.proto.CProtoNotifyRoomState.CProtoItem.deserializeBinaryFromReader);
      msg.addSeatsData(value);
      break;
    case 9:
      var value = new proto.proto.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoCard.deserializeBinaryFromReader);
      msg.addMKingcard(value);
      break;
    case 10:
      var value = new proto.proto.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoCard.deserializeBinaryFromReader);
      msg.addMingCards(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMBasescore(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMRoomState(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMDingqueover(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.addMMypoker(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyRoomState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyRoomState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyRoomState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyRoomState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getMCardcountList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      5,
      f
    );
  }
  f = message.getMMycardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.proto.CProtoCard.serializeBinaryToWriter
    );
  }
  f = message.getMScoreList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      7,
      f
    );
  }
  f = message.getSeatsDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.proto.CProtoNotifyRoomState.CProtoItem.serializeBinaryToWriter
    );
  }
  f = message.getMKingcardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.proto.CProtoCard.serializeBinaryToWriter
    );
  }
  f = message.getMingCardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.proto.CProtoCard.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getMMypokerList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      14,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.displayName = 'proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    mColor: jspb.Message.getField(msg, 1),
    mNumber: jspb.Message.getField(msg, 2),
    mPosition: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition}
 */
proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition;
  return proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition}
 */
proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMColor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMNumber(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required int32 m_color = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.prototype.getMColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.prototype.setMColor = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.prototype.clearMColor = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.prototype.hasMColor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_number = 2;
 * @return {number}
 */
proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.prototype.getMNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.prototype.setMNumber = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.prototype.clearMNumber = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.prototype.hasMNumber = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 m_position = 3;
 * @return {number}
 */
proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.prototype.getMPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.prototype.setMPosition = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.prototype.clearMPosition = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.prototype.hasMPosition = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyRoomState.CProtoItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoNotifyRoomState.CProtoItem.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoNotifyRoomState.CProtoItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyRoomState.CProtoItem.displayName = 'proto.proto.CProtoNotifyRoomState.CProtoItem';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.repeatedFields_ = [4,5,6,7,8,13,14,16];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyRoomState.CProtoItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyRoomState.CProtoItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatid: jspb.Message.getField(msg, 1),
    mScore: jspb.Message.getField(msg, 2),
    mCardcount: jspb.Message.getField(msg, 3),
    mOcardList: jspb.Message.toObjectList(msg.getMOcardList(),
    proto.proto.CProtoCard.toObject, includeInstance),
    mAcardList: jspb.Message.toObjectList(msg.getMAcardList(),
    proto.proto.CProtoCard.toObject, includeInstance),
    mMcardList: jspb.Message.toObjectList(msg.getMMcardList(),
    proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.toObject, includeInstance),
    mPcardList: jspb.Message.toObjectList(msg.getMPcardList(),
    proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.toObject, includeInstance),
    mEcardList: jspb.Message.toObjectList(msg.getMEcardList(),
    proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.toObject, includeInstance),
    mBaojiaostatus: jspb.Message.getField(msg, 9),
    mBaojiaoopt: (f = msg.getMBaojiaoopt()) && proto.proto.CProtoRspBaoJiaoOpt.toObject(includeInstance, f),
    mChoosecardcount: jspb.Message.getField(msg, 12),
    mHucardsList: jspb.Message.toObjectList(msg.getMHucardsList(),
    proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.toObject, includeInstance),
    mChangecardsList: jspb.Message.toObjectList(msg.getMChangecardsList(),
    proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.toObject, includeInstance),
    mDingque: jspb.Message.getField(msg, 15),
    mMingcardList: jspb.Message.toObjectList(msg.getMMingcardList(),
    proto.proto.CProtoCard.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyRoomState.CProtoItem}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyRoomState.CProtoItem;
  return proto.proto.CProtoNotifyRoomState.CProtoItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyRoomState.CProtoItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyRoomState.CProtoItem}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeatid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMScore(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMCardcount(value);
      break;
    case 4:
      var value = new proto.proto.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoCard.deserializeBinaryFromReader);
      msg.addMOcard(value);
      break;
    case 5:
      var value = new proto.proto.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoCard.deserializeBinaryFromReader);
      msg.addMAcard(value);
      break;
    case 6:
      var value = new proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition;
      reader.readMessage(value,proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.deserializeBinaryFromReader);
      msg.addMMcard(value);
      break;
    case 7:
      var value = new proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition;
      reader.readMessage(value,proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.deserializeBinaryFromReader);
      msg.addMPcard(value);
      break;
    case 8:
      var value = new proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition;
      reader.readMessage(value,proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.deserializeBinaryFromReader);
      msg.addMEcard(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMBaojiaostatus(value);
      break;
    case 10:
      var value = new proto.proto.CProtoRspBaoJiaoOpt;
      reader.readMessage(value,proto.proto.CProtoRspBaoJiaoOpt.deserializeBinaryFromReader);
      msg.setMBaojiaoopt(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMChoosecardcount(value);
      break;
    case 13:
      var value = new proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition;
      reader.readMessage(value,proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.deserializeBinaryFromReader);
      msg.addMHucards(value);
      break;
    case 14:
      var value = new proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition;
      reader.readMessage(value,proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.deserializeBinaryFromReader);
      msg.addMChangecards(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMDingque(value);
      break;
    case 16:
      var value = new proto.proto.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoCard.deserializeBinaryFromReader);
      msg.addMMingcard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyRoomState.CProtoItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyRoomState.CProtoItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getMOcardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.proto.CProtoCard.serializeBinaryToWriter
    );
  }
  f = message.getMAcardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.proto.CProtoCard.serializeBinaryToWriter
    );
  }
  f = message.getMMcardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.serializeBinaryToWriter
    );
  }
  f = message.getMPcardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.serializeBinaryToWriter
    );
  }
  f = message.getMEcardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getMBaojiaoopt();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.proto.CProtoRspBaoJiaoOpt.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getMHucardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.serializeBinaryToWriter
    );
  }
  f = message.getMChangecardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getMMingcardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      proto.proto.CProtoCard.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 seatid = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.getSeatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.setSeatid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.clearSeatid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.hasSeatid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_score = 2;
 * @return {number}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.getMScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.setMScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.clearMScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.hasMScore = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 m_CardCount = 3;
 * @return {number}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.getMCardcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.setMCardcount = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.clearMCardcount = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.hasMCardcount = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated CProtoCard m_oCard = 4;
 * @return {!Array.<!proto.proto.CProtoCard>}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.getMOcardList = function() {
  return /** @type{!Array.<!proto.proto.CProtoCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoCard, 4));
};


/** @param {!Array.<!proto.proto.CProtoCard>} value */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.setMOcardList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.proto.CProtoCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoCard}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.addMOcard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.proto.CProtoCard, opt_index);
};


proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.clearMOcardList = function() {
  this.setMOcardList([]);
};


/**
 * repeated CProtoCard m_aCard = 5;
 * @return {!Array.<!proto.proto.CProtoCard>}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.getMAcardList = function() {
  return /** @type{!Array.<!proto.proto.CProtoCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoCard, 5));
};


/** @param {!Array.<!proto.proto.CProtoCard>} value */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.setMAcardList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.proto.CProtoCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoCard}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.addMAcard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.proto.CProtoCard, opt_index);
};


proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.clearMAcardList = function() {
  this.setMAcardList([]);
};


/**
 * repeated CProtoCardWithPosition m_mCard = 6;
 * @return {!Array.<!proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition>}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.getMMcardList = function() {
  return /** @type{!Array.<!proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition, 6));
};


/** @param {!Array.<!proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition>} value */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.setMMcardList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.addMMcard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition, opt_index);
};


proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.clearMMcardList = function() {
  this.setMMcardList([]);
};


/**
 * repeated CProtoCardWithPosition m_pCard = 7;
 * @return {!Array.<!proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition>}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.getMPcardList = function() {
  return /** @type{!Array.<!proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition, 7));
};


/** @param {!Array.<!proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition>} value */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.setMPcardList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.addMPcard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition, opt_index);
};


proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.clearMPcardList = function() {
  this.setMPcardList([]);
};


/**
 * repeated CProtoCardWithPosition m_eCard = 8;
 * @return {!Array.<!proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition>}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.getMEcardList = function() {
  return /** @type{!Array.<!proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition, 8));
};


/** @param {!Array.<!proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition>} value */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.setMEcardList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.addMEcard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition, opt_index);
};


proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.clearMEcardList = function() {
  this.setMEcardList([]);
};


/**
 * required int32 m_baojiaoStatus = 9;
 * @return {number}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.getMBaojiaostatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.setMBaojiaostatus = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.clearMBaojiaostatus = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.hasMBaojiaostatus = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional CProtoRspBaoJiaoOpt m_baojiaoOpt = 10;
 * @return {?proto.proto.CProtoRspBaoJiaoOpt}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.getMBaojiaoopt = function() {
  return /** @type{?proto.proto.CProtoRspBaoJiaoOpt} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoRspBaoJiaoOpt, 10));
};


/** @param {?proto.proto.CProtoRspBaoJiaoOpt|undefined} value */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.setMBaojiaoopt = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.clearMBaojiaoopt = function() {
  this.setMBaojiaoopt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.hasMBaojiaoopt = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional int32 m_chooseCardCount = 12;
 * @return {number}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.getMChoosecardcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.setMChoosecardcount = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.clearMChoosecardcount = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.hasMChoosecardcount = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * repeated CProtoCardWithPosition m_huCards = 13;
 * @return {!Array.<!proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition>}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.getMHucardsList = function() {
  return /** @type{!Array.<!proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition, 13));
};


/** @param {!Array.<!proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition>} value */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.setMHucardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.addMHucards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition, opt_index);
};


proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.clearMHucardsList = function() {
  this.setMHucardsList([]);
};


/**
 * repeated CProtoCardWithPosition m_changeCards = 14;
 * @return {!Array.<!proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition>}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.getMChangecardsList = function() {
  return /** @type{!Array.<!proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition, 14));
};


/** @param {!Array.<!proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition>} value */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.setMChangecardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.addMChangecards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.proto.CProtoNotifyRoomState.CProtoCardWithPosition, opt_index);
};


proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.clearMChangecardsList = function() {
  this.setMChangecardsList([]);
};


/**
 * optional int32 m_dingque = 15;
 * @return {number}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.getMDingque = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.setMDingque = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.clearMDingque = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.hasMDingque = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * repeated CProtoCard m_mingCard = 16;
 * @return {!Array.<!proto.proto.CProtoCard>}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.getMMingcardList = function() {
  return /** @type{!Array.<!proto.proto.CProtoCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoCard, 16));
};


/** @param {!Array.<!proto.proto.CProtoCard>} value */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.setMMingcardList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.proto.CProtoCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoCard}
 */
proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.addMMingcard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.proto.CProtoCard, opt_index);
};


proto.proto.CProtoNotifyRoomState.CProtoItem.prototype.clearMMingcardList = function() {
  this.setMMingcardList([]);
};


/**
 * required int32 m_state = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyRoomState.prototype.getMState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoomState.prototype.setMState = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyRoomState.prototype.clearMState = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoomState.prototype.hasMState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 m_pos = 2;
 * @return {number}
 */
proto.proto.CProtoNotifyRoomState.prototype.getMPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoomState.prototype.setMPos = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifyRoomState.prototype.clearMPos = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoomState.prototype.hasMPos = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 m_dCount = 3;
 * @return {number}
 */
proto.proto.CProtoNotifyRoomState.prototype.getMDcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoomState.prototype.setMDcount = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoNotifyRoomState.prototype.clearMDcount = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoomState.prototype.hasMDcount = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 m_zhuang = 4;
 * @return {number}
 */
proto.proto.CProtoNotifyRoomState.prototype.getMZhuang = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoomState.prototype.setMZhuang = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoNotifyRoomState.prototype.clearMZhuang = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoomState.prototype.hasMZhuang = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated int32 m_CardCount = 5;
 * @return {!Array.<number>}
 */
proto.proto.CProtoNotifyRoomState.prototype.getMCardcountList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array.<number>} value */
proto.proto.CProtoNotifyRoomState.prototype.setMCardcountList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.CProtoNotifyRoomState.prototype.addMCardcount = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.proto.CProtoNotifyRoomState.prototype.clearMCardcountList = function() {
  this.setMCardcountList([]);
};


/**
 * repeated CProtoCard m_myCard = 6;
 * @return {!Array.<!proto.proto.CProtoCard>}
 */
proto.proto.CProtoNotifyRoomState.prototype.getMMycardList = function() {
  return /** @type{!Array.<!proto.proto.CProtoCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoCard, 6));
};


/** @param {!Array.<!proto.proto.CProtoCard>} value */
proto.proto.CProtoNotifyRoomState.prototype.setMMycardList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.proto.CProtoCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoCard}
 */
proto.proto.CProtoNotifyRoomState.prototype.addMMycard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.proto.CProtoCard, opt_index);
};


proto.proto.CProtoNotifyRoomState.prototype.clearMMycardList = function() {
  this.setMMycardList([]);
};


/**
 * repeated int32 m_score = 7;
 * @return {!Array.<number>}
 */
proto.proto.CProtoNotifyRoomState.prototype.getMScoreList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/** @param {!Array.<number>} value */
proto.proto.CProtoNotifyRoomState.prototype.setMScoreList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.CProtoNotifyRoomState.prototype.addMScore = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.proto.CProtoNotifyRoomState.prototype.clearMScoreList = function() {
  this.setMScoreList([]);
};


/**
 * repeated CProtoItem seats_data = 8;
 * @return {!Array.<!proto.proto.CProtoNotifyRoomState.CProtoItem>}
 */
proto.proto.CProtoNotifyRoomState.prototype.getSeatsDataList = function() {
  return /** @type{!Array.<!proto.proto.CProtoNotifyRoomState.CProtoItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoNotifyRoomState.CProtoItem, 8));
};


/** @param {!Array.<!proto.proto.CProtoNotifyRoomState.CProtoItem>} value */
proto.proto.CProtoNotifyRoomState.prototype.setSeatsDataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.proto.CProtoNotifyRoomState.CProtoItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoNotifyRoomState.CProtoItem}
 */
proto.proto.CProtoNotifyRoomState.prototype.addSeatsData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.proto.CProtoNotifyRoomState.CProtoItem, opt_index);
};


proto.proto.CProtoNotifyRoomState.prototype.clearSeatsDataList = function() {
  this.setSeatsDataList([]);
};


/**
 * repeated CProtoCard m_kingCard = 9;
 * @return {!Array.<!proto.proto.CProtoCard>}
 */
proto.proto.CProtoNotifyRoomState.prototype.getMKingcardList = function() {
  return /** @type{!Array.<!proto.proto.CProtoCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoCard, 9));
};


/** @param {!Array.<!proto.proto.CProtoCard>} value */
proto.proto.CProtoNotifyRoomState.prototype.setMKingcardList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.proto.CProtoCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoCard}
 */
proto.proto.CProtoNotifyRoomState.prototype.addMKingcard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.proto.CProtoCard, opt_index);
};


proto.proto.CProtoNotifyRoomState.prototype.clearMKingcardList = function() {
  this.setMKingcardList([]);
};


/**
 * repeated CProtoCard ming_cards = 10;
 * @return {!Array.<!proto.proto.CProtoCard>}
 */
proto.proto.CProtoNotifyRoomState.prototype.getMingCardsList = function() {
  return /** @type{!Array.<!proto.proto.CProtoCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoCard, 10));
};


/** @param {!Array.<!proto.proto.CProtoCard>} value */
proto.proto.CProtoNotifyRoomState.prototype.setMingCardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.proto.CProtoCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoCard}
 */
proto.proto.CProtoNotifyRoomState.prototype.addMingCards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.proto.CProtoCard, opt_index);
};


proto.proto.CProtoNotifyRoomState.prototype.clearMingCardsList = function() {
  this.setMingCardsList([]);
};


/**
 * optional int32 m_baseScore = 11;
 * @return {number}
 */
proto.proto.CProtoNotifyRoomState.prototype.getMBasescore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoomState.prototype.setMBasescore = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.proto.CProtoNotifyRoomState.prototype.clearMBasescore = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoomState.prototype.hasMBasescore = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * required int32 m_room_state = 12;
 * @return {number}
 */
proto.proto.CProtoNotifyRoomState.prototype.getMRoomState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoomState.prototype.setMRoomState = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.proto.CProtoNotifyRoomState.prototype.clearMRoomState = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoomState.prototype.hasMRoomState = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional bool m_dingqueover = 13;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoNotifyRoomState.prototype.getMDingqueover = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 13, false));
};


/** @param {boolean} value */
proto.proto.CProtoNotifyRoomState.prototype.setMDingqueover = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.proto.CProtoNotifyRoomState.prototype.clearMDingqueover = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoomState.prototype.hasMDingqueover = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * repeated string m_mypoker = 14;
 * @return {!Array.<string>}
 */
proto.proto.CProtoNotifyRoomState.prototype.getMMypokerList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 14));
};


/** @param {!Array.<string>} value */
proto.proto.CProtoNotifyRoomState.prototype.setMMypokerList = function(value) {
  jspb.Message.setField(this, 14, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.proto.CProtoNotifyRoomState.prototype.addMMypoker = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 14, value, opt_index);
};


proto.proto.CProtoNotifyRoomState.prototype.clearMMypokerList = function() {
  this.setMMypokerList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqReady = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqReady, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqReady.displayName = 'proto.proto.CProtoReqReady';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqReady.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqReady.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqReady} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqReady.toObject = function(includeInstance, msg) {
  var f, obj = {
    mPos: jspb.Message.getField(msg, 1),
    mReady: jspb.Message.getFieldWithDefault(msg, 2, 1),
    bMingpai: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqReady}
 */
proto.proto.CProtoReqReady.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqReady;
  return proto.proto.CProtoReqReady.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqReady} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqReady}
 */
proto.proto.CProtoReqReady.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMPos(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMReady(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBMingpai(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqReady.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqReady.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqReady} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqReady.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * required int32 m_pos = 1;
 * @return {number}
 */
proto.proto.CProtoReqReady.prototype.getMPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoReqReady.prototype.setMPos = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqReady.prototype.clearMPos = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqReady.prototype.hasMPos = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 m_ready = 2;
 * @return {number}
 */
proto.proto.CProtoReqReady.prototype.getMReady = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/** @param {number} value */
proto.proto.CProtoReqReady.prototype.setMReady = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoReqReady.prototype.clearMReady = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqReady.prototype.hasMReady = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool b_mingpai = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoReqReady.prototype.getBMingpai = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.proto.CProtoReqReady.prototype.setBMingpai = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoReqReady.prototype.clearBMingpai = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqReady.prototype.hasBMingpai = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspReady = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRspReady, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspReady.displayName = 'proto.proto.CProtoRspReady';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspReady.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspReady.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspReady} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspReady.toObject = function(includeInstance, msg) {
  var f, obj = {
    mPos: jspb.Message.getField(msg, 1),
    mReady: jspb.Message.getFieldWithDefault(msg, 2, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspReady}
 */
proto.proto.CProtoRspReady.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspReady;
  return proto.proto.CProtoRspReady.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspReady} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspReady}
 */
proto.proto.CProtoRspReady.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMPos(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMReady(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspReady.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspReady.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspReady} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspReady.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 m_pos = 1;
 * @return {number}
 */
proto.proto.CProtoRspReady.prototype.getMPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspReady.prototype.setMPos = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspReady.prototype.clearMPos = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspReady.prototype.hasMPos = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 m_ready = 2;
 * @return {number}
 */
proto.proto.CProtoRspReady.prototype.getMReady = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/** @param {number} value */
proto.proto.CProtoRspReady.prototype.setMReady = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoRspReady.prototype.clearMReady = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspReady.prototype.hasMReady = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyOffLineState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifyOffLineState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyOffLineState.displayName = 'proto.proto.CProtoNotifyOffLineState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyOffLineState.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyOffLineState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyOffLineState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyOffLineState.toObject = function(includeInstance, msg) {
  var f, obj = {
    mPos: jspb.Message.getField(msg, 1),
    mIp: jspb.Message.getField(msg, 2),
    mFlag: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyOffLineState}
 */
proto.proto.CProtoNotifyOffLineState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyOffLineState;
  return proto.proto.CProtoNotifyOffLineState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyOffLineState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyOffLineState}
 */
proto.proto.CProtoNotifyOffLineState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMPos(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMIp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMFlag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyOffLineState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyOffLineState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyOffLineState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyOffLineState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required int32 m_pos = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyOffLineState.prototype.getMPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyOffLineState.prototype.setMPos = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyOffLineState.prototype.clearMPos = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyOffLineState.prototype.hasMPos = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string m_ip = 2;
 * @return {string}
 */
proto.proto.CProtoNotifyOffLineState.prototype.getMIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.CProtoNotifyOffLineState.prototype.setMIp = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifyOffLineState.prototype.clearMIp = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyOffLineState.prototype.hasMIp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 m_flag = 3;
 * @return {number}
 */
proto.proto.CProtoNotifyOffLineState.prototype.getMFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyOffLineState.prototype.setMFlag = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoNotifyOffLineState.prototype.clearMFlag = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyOffLineState.prototype.hasMFlag = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyRoundState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifyRoundState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyRoundState.displayName = 'proto.proto.CProtoNotifyRoundState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyRoundState.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyRoundState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyRoundState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyRoundState.toObject = function(includeInstance, msg) {
  var f, obj = {
    mCurcircle: jspb.Message.getField(msg, 1),
    mCurmaxcircle: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyRoundState}
 */
proto.proto.CProtoNotifyRoundState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyRoundState;
  return proto.proto.CProtoNotifyRoundState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyRoundState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyRoundState}
 */
proto.proto.CProtoNotifyRoundState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMCurcircle(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMCurmaxcircle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyRoundState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyRoundState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyRoundState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyRoundState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 m_curCircle = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyRoundState.prototype.getMCurcircle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoundState.prototype.setMCurcircle = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyRoundState.prototype.clearMCurcircle = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoundState.prototype.hasMCurcircle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_curMaxCircle = 2;
 * @return {number}
 */
proto.proto.CProtoNotifyRoundState.prototype.getMCurmaxcircle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoundState.prototype.setMCurmaxcircle = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifyRoundState.prototype.clearMCurmaxcircle = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoundState.prototype.hasMCurmaxcircle = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyDingQue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifyDingQue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyDingQue.displayName = 'proto.proto.CProtoNotifyDingQue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyDingQue.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyDingQue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyDingQue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyDingQue.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyDingQue}
 */
proto.proto.CProtoNotifyDingQue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyDingQue;
  return proto.proto.CProtoNotifyDingQue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyDingQue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyDingQue}
 */
proto.proto.CProtoNotifyDingQue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyDingQue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyDingQue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyDingQue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyDingQue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqDingQue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqDingQue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqDingQue.displayName = 'proto.proto.CProtoReqDingQue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqDingQue.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqDingQue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqDingQue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqDingQue.toObject = function(includeInstance, msg) {
  var f, obj = {
    mDingque: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqDingQue}
 */
proto.proto.CProtoReqDingQue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqDingQue;
  return proto.proto.CProtoReqDingQue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqDingQue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqDingQue}
 */
proto.proto.CProtoReqDingQue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMDingque(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqDingQue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqDingQue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqDingQue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqDingQue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 m_dingque = 1;
 * @return {number}
 */
proto.proto.CProtoReqDingQue.prototype.getMDingque = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoReqDingQue.prototype.setMDingque = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqDingQue.prototype.clearMDingque = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqDingQue.prototype.hasMDingque = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRsqDingQue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRsqDingQue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRsqDingQue.displayName = 'proto.proto.CProtoRsqDingQue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRsqDingQue.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRsqDingQue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRsqDingQue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRsqDingQue.toObject = function(includeInstance, msg) {
  var f, obj = {
    mSeatid: jspb.Message.getField(msg, 1),
    mDingque: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRsqDingQue}
 */
proto.proto.CProtoRsqDingQue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRsqDingQue;
  return proto.proto.CProtoRsqDingQue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRsqDingQue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRsqDingQue}
 */
proto.proto.CProtoRsqDingQue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMSeatid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMDingque(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRsqDingQue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRsqDingQue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRsqDingQue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRsqDingQue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 m_seatid = 1;
 * @return {number}
 */
proto.proto.CProtoRsqDingQue.prototype.getMSeatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRsqDingQue.prototype.setMSeatid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRsqDingQue.prototype.clearMSeatid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRsqDingQue.prototype.hasMSeatid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_dingque = 2;
 * @return {number}
 */
proto.proto.CProtoRsqDingQue.prototype.getMDingque = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoRsqDingQue.prototype.setMDingque = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoRsqDingQue.prototype.clearMDingque = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRsqDingQue.prototype.hasMDingque = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyDingQueOver = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoNotifyDingQueOver.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoNotifyDingQueOver, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyDingQueOver.displayName = 'proto.proto.CProtoNotifyDingQueOver';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoNotifyDingQueOver.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyDingQueOver.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyDingQueOver.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyDingQueOver} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyDingQueOver.toObject = function(includeInstance, msg) {
  var f, obj = {
    mDingqueList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyDingQueOver}
 */
proto.proto.CProtoNotifyDingQueOver.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyDingQueOver;
  return proto.proto.CProtoNotifyDingQueOver.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyDingQueOver} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyDingQueOver}
 */
proto.proto.CProtoNotifyDingQueOver.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addMDingque(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyDingQueOver.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyDingQueOver.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyDingQueOver} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyDingQueOver.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMDingqueList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      1,
      f
    );
  }
};


/**
 * repeated int32 m_dingque = 1;
 * @return {!Array.<number>}
 */
proto.proto.CProtoNotifyDingQueOver.prototype.getMDingqueList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.proto.CProtoNotifyDingQueOver.prototype.setMDingqueList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.CProtoNotifyDingQueOver.prototype.addMDingque = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.proto.CProtoNotifyDingQueOver.prototype.clearMDingqueList = function() {
  this.setMDingqueList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyStartGame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifyStartGame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyStartGame.displayName = 'proto.proto.CProtoNotifyStartGame';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyStartGame.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyStartGame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyStartGame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyStartGame.toObject = function(includeInstance, msg) {
  var f, obj = {
    mRoomState: (f = msg.getMRoomState()) && proto.proto.CProtoNotifyRoomState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyStartGame}
 */
proto.proto.CProtoNotifyStartGame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyStartGame;
  return proto.proto.CProtoNotifyStartGame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyStartGame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyStartGame}
 */
proto.proto.CProtoNotifyStartGame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.CProtoNotifyRoomState;
      reader.readMessage(value,proto.proto.CProtoNotifyRoomState.deserializeBinaryFromReader);
      msg.setMRoomState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyStartGame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyStartGame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyStartGame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyStartGame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMRoomState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.CProtoNotifyRoomState.serializeBinaryToWriter
    );
  }
};


/**
 * required CProtoNotifyRoomState m_room_state = 1;
 * @return {!proto.proto.CProtoNotifyRoomState}
 */
proto.proto.CProtoNotifyStartGame.prototype.getMRoomState = function() {
  return /** @type{!proto.proto.CProtoNotifyRoomState} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoNotifyRoomState, 1, 1));
};


/** @param {!proto.proto.CProtoNotifyRoomState} value */
proto.proto.CProtoNotifyStartGame.prototype.setMRoomState = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.CProtoNotifyStartGame.prototype.clearMRoomState = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyStartGame.prototype.hasMRoomState = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqChatMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqChatMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqChatMsg.displayName = 'proto.proto.CProtoReqChatMsg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqChatMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqChatMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqChatMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqChatMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    mType: jspb.Message.getField(msg, 1),
    mId: jspb.Message.getField(msg, 2),
    mMsg: jspb.Message.getField(msg, 3),
    mMusicurl: jspb.Message.getField(msg, 4),
    mTimelen: jspb.Message.getField(msg, 5),
    mLocalpath: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqChatMsg}
 */
proto.proto.CProtoReqChatMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqChatMsg;
  return proto.proto.CProtoReqChatMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqChatMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqChatMsg}
 */
proto.proto.CProtoReqChatMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMMsg(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMMusicurl(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMTimelen(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMLocalpath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqChatMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqChatMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqChatMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqChatMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * required int32 m_type = 1;
 * @return {number}
 */
proto.proto.CProtoReqChatMsg.prototype.getMType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoReqChatMsg.prototype.setMType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqChatMsg.prototype.clearMType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqChatMsg.prototype.hasMType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_id = 2;
 * @return {number}
 */
proto.proto.CProtoReqChatMsg.prototype.getMId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoReqChatMsg.prototype.setMId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoReqChatMsg.prototype.clearMId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqChatMsg.prototype.hasMId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string m_msg = 3;
 * @return {string}
 */
proto.proto.CProtoReqChatMsg.prototype.getMMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.proto.CProtoReqChatMsg.prototype.setMMsg = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoReqChatMsg.prototype.clearMMsg = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqChatMsg.prototype.hasMMsg = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string m_musicUrl = 4;
 * @return {string}
 */
proto.proto.CProtoReqChatMsg.prototype.getMMusicurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.proto.CProtoReqChatMsg.prototype.setMMusicurl = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoReqChatMsg.prototype.clearMMusicurl = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqChatMsg.prototype.hasMMusicurl = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 m_timeLen = 5;
 * @return {number}
 */
proto.proto.CProtoReqChatMsg.prototype.getMTimelen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.proto.CProtoReqChatMsg.prototype.setMTimelen = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.proto.CProtoReqChatMsg.prototype.clearMTimelen = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqChatMsg.prototype.hasMTimelen = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string m_localPath = 6;
 * @return {string}
 */
proto.proto.CProtoReqChatMsg.prototype.getMLocalpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.proto.CProtoReqChatMsg.prototype.setMLocalpath = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.proto.CProtoReqChatMsg.prototype.clearMLocalpath = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqChatMsg.prototype.hasMLocalpath = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspChatMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRspChatMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspChatMsg.displayName = 'proto.proto.CProtoRspChatMsg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspChatMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspChatMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspChatMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspChatMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    mType: jspb.Message.getField(msg, 1),
    mId: jspb.Message.getField(msg, 2),
    mMsg: jspb.Message.getField(msg, 3),
    mMusicurl: jspb.Message.getField(msg, 4),
    mPos: jspb.Message.getField(msg, 5),
    mTimelen: jspb.Message.getField(msg, 6),
    mLocalpath: jspb.Message.getField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspChatMsg}
 */
proto.proto.CProtoRspChatMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspChatMsg;
  return proto.proto.CProtoRspChatMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspChatMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspChatMsg}
 */
proto.proto.CProtoRspChatMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMMsg(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMMusicurl(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMPos(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMTimelen(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMLocalpath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspChatMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspChatMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspChatMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspChatMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * required int32 m_type = 1;
 * @return {number}
 */
proto.proto.CProtoRspChatMsg.prototype.getMType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspChatMsg.prototype.setMType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspChatMsg.prototype.clearMType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspChatMsg.prototype.hasMType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_id = 2;
 * @return {number}
 */
proto.proto.CProtoRspChatMsg.prototype.getMId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoRspChatMsg.prototype.setMId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoRspChatMsg.prototype.clearMId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspChatMsg.prototype.hasMId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string m_msg = 3;
 * @return {string}
 */
proto.proto.CProtoRspChatMsg.prototype.getMMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.proto.CProtoRspChatMsg.prototype.setMMsg = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoRspChatMsg.prototype.clearMMsg = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspChatMsg.prototype.hasMMsg = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string m_musicUrl = 4;
 * @return {string}
 */
proto.proto.CProtoRspChatMsg.prototype.getMMusicurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.proto.CProtoRspChatMsg.prototype.setMMusicurl = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoRspChatMsg.prototype.clearMMusicurl = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspChatMsg.prototype.hasMMusicurl = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 m_pos = 5;
 * @return {number}
 */
proto.proto.CProtoRspChatMsg.prototype.getMPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.proto.CProtoRspChatMsg.prototype.setMPos = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.proto.CProtoRspChatMsg.prototype.clearMPos = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspChatMsg.prototype.hasMPos = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 m_timeLen = 6;
 * @return {number}
 */
proto.proto.CProtoRspChatMsg.prototype.getMTimelen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.proto.CProtoRspChatMsg.prototype.setMTimelen = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.proto.CProtoRspChatMsg.prototype.clearMTimelen = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspChatMsg.prototype.hasMTimelen = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string m_localPath = 7;
 * @return {string}
 */
proto.proto.CProtoRspChatMsg.prototype.getMLocalpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.proto.CProtoRspChatMsg.prototype.setMLocalpath = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.proto.CProtoRspChatMsg.prototype.clearMLocalpath = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspChatMsg.prototype.hasMLocalpath = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyRoundReport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoNotifyRoundReport.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoNotifyRoundReport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyRoundReport.displayName = 'proto.proto.CProtoNotifyRoundReport';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoNotifyRoundReport.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyRoundReport.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyRoundReport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyRoundReport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyRoundReport.toObject = function(includeInstance, msg) {
  var f, obj = {
    mEnd: jspb.Message.getField(msg, 1),
    mResult: jspb.Message.getField(msg, 2),
    mBirdInfosList: jspb.Message.toObjectList(msg.getMBirdInfosList(),
    proto.proto.CProtoNotifyRoundReport.CProtoBird.toObject, includeInstance),
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.proto.CProtoNotifyRoundReport.CProtoItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyRoundReport}
 */
proto.proto.CProtoNotifyRoundReport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyRoundReport;
  return proto.proto.CProtoNotifyRoundReport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyRoundReport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyRoundReport}
 */
proto.proto.CProtoNotifyRoundReport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMEnd(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMResult(value);
      break;
    case 3:
      var value = new proto.proto.CProtoNotifyRoundReport.CProtoBird;
      reader.readMessage(value,proto.proto.CProtoNotifyRoundReport.CProtoBird.deserializeBinaryFromReader);
      msg.addMBirdInfos(value);
      break;
    case 4:
      var value = new proto.proto.CProtoNotifyRoundReport.CProtoItem;
      reader.readMessage(value,proto.proto.CProtoNotifyRoundReport.CProtoItem.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyRoundReport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyRoundReport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyRoundReport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyRoundReport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMBirdInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.proto.CProtoNotifyRoundReport.CProtoBird.serializeBinaryToWriter
    );
  }
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.proto.CProtoNotifyRoundReport.CProtoItem.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyRoundReport.CProtoBird = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifyRoundReport.CProtoBird, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyRoundReport.CProtoBird.displayName = 'proto.proto.CProtoNotifyRoundReport.CProtoBird';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyRoundReport.CProtoBird.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyRoundReport.CProtoBird.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyRoundReport.CProtoBird} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyRoundReport.CProtoBird.toObject = function(includeInstance, msg) {
  var f, obj = {
    card: (f = msg.getCard()) && proto.proto.CProtoCard.toObject(includeInstance, f),
    seatId: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyRoundReport.CProtoBird}
 */
proto.proto.CProtoNotifyRoundReport.CProtoBird.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyRoundReport.CProtoBird;
  return proto.proto.CProtoNotifyRoundReport.CProtoBird.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyRoundReport.CProtoBird} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyRoundReport.CProtoBird}
 */
proto.proto.CProtoNotifyRoundReport.CProtoBird.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoCard.deserializeBinaryFromReader);
      msg.setCard(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeatId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyRoundReport.CProtoBird.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyRoundReport.CProtoBird.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyRoundReport.CProtoBird} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyRoundReport.CProtoBird.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCard();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.CProtoCard.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required CProtoCard card = 1;
 * @return {!proto.proto.CProtoCard}
 */
proto.proto.CProtoNotifyRoundReport.CProtoBird.prototype.getCard = function() {
  return /** @type{!proto.proto.CProtoCard} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoCard, 1, 1));
};


/** @param {!proto.proto.CProtoCard} value */
proto.proto.CProtoNotifyRoundReport.CProtoBird.prototype.setCard = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.CProtoNotifyRoundReport.CProtoBird.prototype.clearCard = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoundReport.CProtoBird.prototype.hasCard = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 seat_id = 2;
 * @return {number}
 */
proto.proto.CProtoNotifyRoundReport.CProtoBird.prototype.getSeatId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoundReport.CProtoBird.prototype.setSeatId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifyRoundReport.CProtoBird.prototype.clearSeatId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoundReport.CProtoBird.prototype.hasSeatId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyRoundReport.CProtoHuCard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifyRoundReport.CProtoHuCard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyRoundReport.CProtoHuCard.displayName = 'proto.proto.CProtoNotifyRoundReport.CProtoHuCard';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyRoundReport.CProtoHuCard.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyRoundReport.CProtoHuCard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyRoundReport.CProtoHuCard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyRoundReport.CProtoHuCard.toObject = function(includeInstance, msg) {
  var f, obj = {
    card: (f = msg.getCard()) && proto.proto.CProtoCard.toObject(includeInstance, f),
    from: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyRoundReport.CProtoHuCard}
 */
proto.proto.CProtoNotifyRoundReport.CProtoHuCard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyRoundReport.CProtoHuCard;
  return proto.proto.CProtoNotifyRoundReport.CProtoHuCard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyRoundReport.CProtoHuCard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyRoundReport.CProtoHuCard}
 */
proto.proto.CProtoNotifyRoundReport.CProtoHuCard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoCard.deserializeBinaryFromReader);
      msg.setCard(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFrom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyRoundReport.CProtoHuCard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyRoundReport.CProtoHuCard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyRoundReport.CProtoHuCard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyRoundReport.CProtoHuCard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCard();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.CProtoCard.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required CProtoCard card = 1;
 * @return {!proto.proto.CProtoCard}
 */
proto.proto.CProtoNotifyRoundReport.CProtoHuCard.prototype.getCard = function() {
  return /** @type{!proto.proto.CProtoCard} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoCard, 1, 1));
};


/** @param {!proto.proto.CProtoCard} value */
proto.proto.CProtoNotifyRoundReport.CProtoHuCard.prototype.setCard = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.CProtoNotifyRoundReport.CProtoHuCard.prototype.clearCard = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoundReport.CProtoHuCard.prototype.hasCard = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 from = 2;
 * @return {number}
 */
proto.proto.CProtoNotifyRoundReport.CProtoHuCard.prototype.getFrom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoundReport.CProtoHuCard.prototype.setFrom = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifyRoundReport.CProtoHuCard.prototype.clearFrom = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoundReport.CProtoHuCard.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoNotifyRoundReport.CProtoItem.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoNotifyRoundReport.CProtoItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyRoundReport.CProtoItem.displayName = 'proto.proto.CProtoNotifyRoundReport.CProtoItem';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.repeatedFields_ = [2,7,8,10,13,19,21];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyRoundReport.CProtoItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyRoundReport.CProtoItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    mWin: jspb.Message.getField(msg, 1),
    mHucardsList: jspb.Message.toObjectList(msg.getMHucardsList(),
    proto.proto.CProtoCard.toObject, includeInstance),
    mAgang: jspb.Message.getField(msg, 3),
    mMgang: jspb.Message.getField(msg, 4),
    mDgang: jspb.Message.getField(msg, 5),
    mBugang: jspb.Message.getField(msg, 11),
    mHitcount: jspb.Message.getField(msg, 6),
    mStarthuList: jspb.Message.getRepeatedField(msg, 7),
    mHuList: jspb.Message.getRepeatedField(msg, 8),
    mScore: jspb.Message.getField(msg, 9),
    arrayList: jspb.Message.toObjectList(msg.getArrayList(),
    proto.proto.CProtoCard.toObject, includeInstance),
    zhongnum: jspb.Message.getField(msg, 12),
    mHuacardsnumList: jspb.Message.getRepeatedField(msg, 13),
    mBaojiao: jspb.Message.getField(msg, 14),
    mTingpai: jspb.Message.getField(msg, 15),
    mContTwo: jspb.Message.getField(msg, 16),
    mContThree: jspb.Message.getField(msg, 17),
    mContFour: jspb.Message.getField(msg, 18),
    mBucketsList: jspb.Message.toObjectList(msg.getMBucketsList(),
    proto.proto.CProtoBucket.toObject, includeInstance),
    mBaojiaoitems: (f = msg.getMBaojiaoitems()) && proto.proto.CProtoRspBaoJiaoOpt.toObject(includeInstance, f),
    mFinalHucardsList: jspb.Message.toObjectList(msg.getMFinalHucardsList(),
    proto.proto.CProtoNotifyRoundReport.CProtoHuCard.toObject, includeInstance),
    mWinNo: jspb.Message.getField(msg, 22),
    mGenNum: jspb.Message.getField(msg, 23)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyRoundReport.CProtoItem}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyRoundReport.CProtoItem;
  return proto.proto.CProtoNotifyRoundReport.CProtoItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyRoundReport.CProtoItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyRoundReport.CProtoItem}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMWin(value);
      break;
    case 2:
      var value = new proto.proto.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoCard.deserializeBinaryFromReader);
      msg.addMHucards(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMAgang(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMMgang(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMDgang(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMBugang(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMHitcount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addMStarthu(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addMHu(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMScore(value);
      break;
    case 10:
      var value = new proto.proto.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoCard.deserializeBinaryFromReader);
      msg.addArray(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZhongnum(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addMHuacardsnum(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMBaojiao(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMTingpai(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMContTwo(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMContThree(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMContFour(value);
      break;
    case 19:
      var value = new proto.proto.CProtoBucket;
      reader.readMessage(value,proto.proto.CProtoBucket.deserializeBinaryFromReader);
      msg.addMBuckets(value);
      break;
    case 20:
      var value = new proto.proto.CProtoRspBaoJiaoOpt;
      reader.readMessage(value,proto.proto.CProtoRspBaoJiaoOpt.deserializeBinaryFromReader);
      msg.setMBaojiaoitems(value);
      break;
    case 21:
      var value = new proto.proto.CProtoNotifyRoundReport.CProtoHuCard;
      reader.readMessage(value,proto.proto.CProtoNotifyRoundReport.CProtoHuCard.deserializeBinaryFromReader);
      msg.addMFinalHucards(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMWinNo(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMGenNum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyRoundReport.CProtoItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyRoundReport.CProtoItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMHucardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.CProtoCard.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getMStarthuList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      7,
      f
    );
  }
  f = message.getMHuList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getArrayList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.proto.CProtoCard.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getMHuacardsnumList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      13,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeBool(
      14,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeBool(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = message.getMBucketsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      19,
      f,
      proto.proto.CProtoBucket.serializeBinaryToWriter
    );
  }
  f = message.getMBaojiaoitems();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.proto.CProtoRspBaoJiaoOpt.serializeBinaryToWriter
    );
  }
  f = message.getMFinalHucardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      21,
      f,
      proto.proto.CProtoNotifyRoundReport.CProtoHuCard.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeInt32(
      22,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeInt32(
      23,
      f
    );
  }
};


/**
 * required int32 m_win = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.getMWin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.setMWin = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.clearMWin = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.hasMWin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated CProtoCard m_hucards = 2;
 * @return {!Array.<!proto.proto.CProtoCard>}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.getMHucardsList = function() {
  return /** @type{!Array.<!proto.proto.CProtoCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoCard, 2));
};


/** @param {!Array.<!proto.proto.CProtoCard>} value */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.setMHucardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.CProtoCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoCard}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.addMHucards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.CProtoCard, opt_index);
};


proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.clearMHucardsList = function() {
  this.setMHucardsList([]);
};


/**
 * required int32 m_agang = 3;
 * @return {number}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.getMAgang = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.setMAgang = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.clearMAgang = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.hasMAgang = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 m_mgang = 4;
 * @return {number}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.getMMgang = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.setMMgang = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.clearMMgang = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.hasMMgang = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 m_dgang = 5;
 * @return {number}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.getMDgang = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.setMDgang = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.clearMDgang = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.hasMDgang = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int32 m_bugang = 11;
 * @return {number}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.getMBugang = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.setMBugang = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.clearMBugang = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.hasMBugang = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * required int32 m_hitcount = 6;
 * @return {number}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.getMHitcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.setMHitcount = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.clearMHitcount = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.hasMHitcount = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated int32 m_startHu = 7;
 * @return {!Array.<number>}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.getMStarthuList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/** @param {!Array.<number>} value */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.setMStarthuList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.addMStarthu = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.clearMStarthuList = function() {
  this.setMStarthuList([]);
};


/**
 * repeated int32 m_hu = 8;
 * @return {!Array.<number>}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.getMHuList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 8));
};


/** @param {!Array.<number>} value */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.setMHuList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.addMHu = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.clearMHuList = function() {
  this.setMHuList([]);
};


/**
 * required int32 m_score = 9;
 * @return {number}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.getMScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.setMScore = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.clearMScore = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.hasMScore = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated CProtoCard array = 10;
 * @return {!Array.<!proto.proto.CProtoCard>}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.getArrayList = function() {
  return /** @type{!Array.<!proto.proto.CProtoCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoCard, 10));
};


/** @param {!Array.<!proto.proto.CProtoCard>} value */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.setArrayList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.proto.CProtoCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoCard}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.addArray = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.proto.CProtoCard, opt_index);
};


proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.clearArrayList = function() {
  this.setArrayList([]);
};


/**
 * required int32 zhongNum = 12;
 * @return {number}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.getZhongnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.setZhongnum = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.clearZhongnum = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.hasZhongnum = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * repeated int32 m_huaCardsNum = 13;
 * @return {!Array.<number>}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.getMHuacardsnumList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 13));
};


/** @param {!Array.<number>} value */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.setMHuacardsnumList = function(value) {
  jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.addMHuacardsnum = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.clearMHuacardsnumList = function() {
  this.setMHuacardsnumList([]);
};


/**
 * optional bool m_baoJiao = 14;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.getMBaojiao = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 14, false));
};


/** @param {boolean} value */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.setMBaojiao = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.clearMBaojiao = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.hasMBaojiao = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional bool m_tingPai = 15;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.getMTingpai = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 15, false));
};


/** @param {boolean} value */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.setMTingpai = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.clearMTingpai = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.hasMTingpai = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional int32 m_cont_two = 16;
 * @return {number}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.getMContTwo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.setMContTwo = function(value) {
  jspb.Message.setField(this, 16, value);
};


proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.clearMContTwo = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.hasMContTwo = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional int32 m_cont_three = 17;
 * @return {number}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.getMContThree = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.setMContThree = function(value) {
  jspb.Message.setField(this, 17, value);
};


proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.clearMContThree = function() {
  jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.hasMContThree = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional int32 m_cont_four = 18;
 * @return {number}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.getMContFour = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.setMContFour = function(value) {
  jspb.Message.setField(this, 18, value);
};


proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.clearMContFour = function() {
  jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.hasMContFour = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * repeated CProtoBucket m_buckets = 19;
 * @return {!Array.<!proto.proto.CProtoBucket>}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.getMBucketsList = function() {
  return /** @type{!Array.<!proto.proto.CProtoBucket>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoBucket, 19));
};


/** @param {!Array.<!proto.proto.CProtoBucket>} value */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.setMBucketsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 19, value);
};


/**
 * @param {!proto.proto.CProtoBucket=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoBucket}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.addMBuckets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 19, opt_value, proto.proto.CProtoBucket, opt_index);
};


proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.clearMBucketsList = function() {
  this.setMBucketsList([]);
};


/**
 * optional CProtoRspBaoJiaoOpt m_baoJiaoItems = 20;
 * @return {?proto.proto.CProtoRspBaoJiaoOpt}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.getMBaojiaoitems = function() {
  return /** @type{?proto.proto.CProtoRspBaoJiaoOpt} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoRspBaoJiaoOpt, 20));
};


/** @param {?proto.proto.CProtoRspBaoJiaoOpt|undefined} value */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.setMBaojiaoitems = function(value) {
  jspb.Message.setWrapperField(this, 20, value);
};


proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.clearMBaojiaoitems = function() {
  this.setMBaojiaoitems(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.hasMBaojiaoitems = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * repeated CProtoHuCard m_final_hucards = 21;
 * @return {!Array.<!proto.proto.CProtoNotifyRoundReport.CProtoHuCard>}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.getMFinalHucardsList = function() {
  return /** @type{!Array.<!proto.proto.CProtoNotifyRoundReport.CProtoHuCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoNotifyRoundReport.CProtoHuCard, 21));
};


/** @param {!Array.<!proto.proto.CProtoNotifyRoundReport.CProtoHuCard>} value */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.setMFinalHucardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 21, value);
};


/**
 * @param {!proto.proto.CProtoNotifyRoundReport.CProtoHuCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoNotifyRoundReport.CProtoHuCard}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.addMFinalHucards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 21, opt_value, proto.proto.CProtoNotifyRoundReport.CProtoHuCard, opt_index);
};


proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.clearMFinalHucardsList = function() {
  this.setMFinalHucardsList([]);
};


/**
 * optional int32 m_win_no = 22;
 * @return {number}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.getMWinNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.setMWinNo = function(value) {
  jspb.Message.setField(this, 22, value);
};


proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.clearMWinNo = function() {
  jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.hasMWinNo = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional int32 m_gen_num = 23;
 * @return {number}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.getMGenNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.setMGenNum = function(value) {
  jspb.Message.setField(this, 23, value);
};


proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.clearMGenNum = function() {
  jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoundReport.CProtoItem.prototype.hasMGenNum = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * required int32 m_end = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyRoundReport.prototype.getMEnd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoundReport.prototype.setMEnd = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyRoundReport.prototype.clearMEnd = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoundReport.prototype.hasMEnd = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_result = 2;
 * @return {number}
 */
proto.proto.CProtoNotifyRoundReport.prototype.getMResult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoundReport.prototype.setMResult = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifyRoundReport.prototype.clearMResult = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoundReport.prototype.hasMResult = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated CProtoBird m_bird_infos = 3;
 * @return {!Array.<!proto.proto.CProtoNotifyRoundReport.CProtoBird>}
 */
proto.proto.CProtoNotifyRoundReport.prototype.getMBirdInfosList = function() {
  return /** @type{!Array.<!proto.proto.CProtoNotifyRoundReport.CProtoBird>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoNotifyRoundReport.CProtoBird, 3));
};


/** @param {!Array.<!proto.proto.CProtoNotifyRoundReport.CProtoBird>} value */
proto.proto.CProtoNotifyRoundReport.prototype.setMBirdInfosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.proto.CProtoNotifyRoundReport.CProtoBird=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoNotifyRoundReport.CProtoBird}
 */
proto.proto.CProtoNotifyRoundReport.prototype.addMBirdInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.proto.CProtoNotifyRoundReport.CProtoBird, opt_index);
};


proto.proto.CProtoNotifyRoundReport.prototype.clearMBirdInfosList = function() {
  this.setMBirdInfosList([]);
};


/**
 * repeated CProtoItem items = 4;
 * @return {!Array.<!proto.proto.CProtoNotifyRoundReport.CProtoItem>}
 */
proto.proto.CProtoNotifyRoundReport.prototype.getItemsList = function() {
  return /** @type{!Array.<!proto.proto.CProtoNotifyRoundReport.CProtoItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoNotifyRoundReport.CProtoItem, 4));
};


/** @param {!Array.<!proto.proto.CProtoNotifyRoundReport.CProtoItem>} value */
proto.proto.CProtoNotifyRoundReport.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.proto.CProtoNotifyRoundReport.CProtoItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoNotifyRoundReport.CProtoItem}
 */
proto.proto.CProtoNotifyRoundReport.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.proto.CProtoNotifyRoundReport.CProtoItem, opt_index);
};


proto.proto.CProtoNotifyRoundReport.prototype.clearItemsList = function() {
  this.setItemsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyQiShouHu = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoNotifyQiShouHu.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoNotifyQiShouHu, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyQiShouHu.displayName = 'proto.proto.CProtoNotifyQiShouHu';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoNotifyQiShouHu.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyQiShouHu.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyQiShouHu.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyQiShouHu} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyQiShouHu.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.proto.CProtoNotifyQiShouHu.CProtoItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyQiShouHu}
 */
proto.proto.CProtoNotifyQiShouHu.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyQiShouHu;
  return proto.proto.CProtoNotifyQiShouHu.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyQiShouHu} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyQiShouHu}
 */
proto.proto.CProtoNotifyQiShouHu.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.CProtoNotifyQiShouHu.CProtoItem;
      reader.readMessage(value,proto.proto.CProtoNotifyQiShouHu.CProtoItem.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyQiShouHu.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyQiShouHu.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyQiShouHu} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyQiShouHu.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.CProtoNotifyQiShouHu.CProtoItem.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyQiShouHu.CProtoItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoNotifyQiShouHu.CProtoItem.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoNotifyQiShouHu.CProtoItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyQiShouHu.CProtoItem.displayName = 'proto.proto.CProtoNotifyQiShouHu.CProtoItem';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoNotifyQiShouHu.CProtoItem.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyQiShouHu.CProtoItem.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyQiShouHu.CProtoItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyQiShouHu.CProtoItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyQiShouHu.CProtoItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    mType: jspb.Message.getField(msg, 1),
    mCardList: jspb.Message.toObjectList(msg.getMCardList(),
    proto.proto.CProtoCard.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyQiShouHu.CProtoItem}
 */
proto.proto.CProtoNotifyQiShouHu.CProtoItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyQiShouHu.CProtoItem;
  return proto.proto.CProtoNotifyQiShouHu.CProtoItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyQiShouHu.CProtoItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyQiShouHu.CProtoItem}
 */
proto.proto.CProtoNotifyQiShouHu.CProtoItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMType(value);
      break;
    case 2:
      var value = new proto.proto.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoCard.deserializeBinaryFromReader);
      msg.addMCard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyQiShouHu.CProtoItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyQiShouHu.CProtoItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyQiShouHu.CProtoItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyQiShouHu.CProtoItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMCardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.CProtoCard.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 m_type = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyQiShouHu.CProtoItem.prototype.getMType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyQiShouHu.CProtoItem.prototype.setMType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyQiShouHu.CProtoItem.prototype.clearMType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyQiShouHu.CProtoItem.prototype.hasMType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated CProtoCard m_card = 2;
 * @return {!Array.<!proto.proto.CProtoCard>}
 */
proto.proto.CProtoNotifyQiShouHu.CProtoItem.prototype.getMCardList = function() {
  return /** @type{!Array.<!proto.proto.CProtoCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoCard, 2));
};


/** @param {!Array.<!proto.proto.CProtoCard>} value */
proto.proto.CProtoNotifyQiShouHu.CProtoItem.prototype.setMCardList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.CProtoCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoCard}
 */
proto.proto.CProtoNotifyQiShouHu.CProtoItem.prototype.addMCard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.CProtoCard, opt_index);
};


proto.proto.CProtoNotifyQiShouHu.CProtoItem.prototype.clearMCardList = function() {
  this.setMCardList([]);
};


/**
 * repeated CProtoItem items = 1;
 * @return {!Array.<!proto.proto.CProtoNotifyQiShouHu.CProtoItem>}
 */
proto.proto.CProtoNotifyQiShouHu.prototype.getItemsList = function() {
  return /** @type{!Array.<!proto.proto.CProtoNotifyQiShouHu.CProtoItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoNotifyQiShouHu.CProtoItem, 1));
};


/** @param {!Array.<!proto.proto.CProtoNotifyQiShouHu.CProtoItem>} value */
proto.proto.CProtoNotifyQiShouHu.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.CProtoNotifyQiShouHu.CProtoItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoNotifyQiShouHu.CProtoItem}
 */
proto.proto.CProtoNotifyQiShouHu.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.CProtoNotifyQiShouHu.CProtoItem, opt_index);
};


proto.proto.CProtoNotifyQiShouHu.prototype.clearItemsList = function() {
  this.setItemsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqQiShouHu = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoReqQiShouHu.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoReqQiShouHu, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqQiShouHu.displayName = 'proto.proto.CProtoReqQiShouHu';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoReqQiShouHu.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqQiShouHu.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqQiShouHu.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqQiShouHu} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqQiShouHu.toObject = function(includeInstance, msg) {
  var f, obj = {
    mType: jspb.Message.getField(msg, 1),
    mCardList: jspb.Message.toObjectList(msg.getMCardList(),
    proto.proto.CProtoCard.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqQiShouHu}
 */
proto.proto.CProtoReqQiShouHu.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqQiShouHu;
  return proto.proto.CProtoReqQiShouHu.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqQiShouHu} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqQiShouHu}
 */
proto.proto.CProtoReqQiShouHu.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMType(value);
      break;
    case 2:
      var value = new proto.proto.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoCard.deserializeBinaryFromReader);
      msg.addMCard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqQiShouHu.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqQiShouHu.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqQiShouHu} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqQiShouHu.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMCardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.CProtoCard.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 m_type = 1;
 * @return {number}
 */
proto.proto.CProtoReqQiShouHu.prototype.getMType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoReqQiShouHu.prototype.setMType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqQiShouHu.prototype.clearMType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqQiShouHu.prototype.hasMType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated CProtoCard m_card = 2;
 * @return {!Array.<!proto.proto.CProtoCard>}
 */
proto.proto.CProtoReqQiShouHu.prototype.getMCardList = function() {
  return /** @type{!Array.<!proto.proto.CProtoCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoCard, 2));
};


/** @param {!Array.<!proto.proto.CProtoCard>} value */
proto.proto.CProtoReqQiShouHu.prototype.setMCardList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.CProtoCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoCard}
 */
proto.proto.CProtoReqQiShouHu.prototype.addMCard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.CProtoCard, opt_index);
};


proto.proto.CProtoReqQiShouHu.prototype.clearMCardList = function() {
  this.setMCardList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspQiShouHu = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRspQiShouHu.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRspQiShouHu, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspQiShouHu.displayName = 'proto.proto.CProtoRspQiShouHu';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRspQiShouHu.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspQiShouHu.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspQiShouHu.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspQiShouHu} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspQiShouHu.toObject = function(includeInstance, msg) {
  var f, obj = {
    mType: jspb.Message.getField(msg, 1),
    mCardList: jspb.Message.toObjectList(msg.getMCardList(),
    proto.proto.CProtoCard.toObject, includeInstance),
    mPos: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspQiShouHu}
 */
proto.proto.CProtoRspQiShouHu.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspQiShouHu;
  return proto.proto.CProtoRspQiShouHu.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspQiShouHu} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspQiShouHu}
 */
proto.proto.CProtoRspQiShouHu.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMType(value);
      break;
    case 2:
      var value = new proto.proto.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoCard.deserializeBinaryFromReader);
      msg.addMCard(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMPos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspQiShouHu.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspQiShouHu.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspQiShouHu} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspQiShouHu.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMCardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.CProtoCard.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required int32 m_type = 1;
 * @return {number}
 */
proto.proto.CProtoRspQiShouHu.prototype.getMType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspQiShouHu.prototype.setMType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspQiShouHu.prototype.clearMType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspQiShouHu.prototype.hasMType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated CProtoCard m_card = 2;
 * @return {!Array.<!proto.proto.CProtoCard>}
 */
proto.proto.CProtoRspQiShouHu.prototype.getMCardList = function() {
  return /** @type{!Array.<!proto.proto.CProtoCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoCard, 2));
};


/** @param {!Array.<!proto.proto.CProtoCard>} value */
proto.proto.CProtoRspQiShouHu.prototype.setMCardList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.CProtoCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoCard}
 */
proto.proto.CProtoRspQiShouHu.prototype.addMCard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.CProtoCard, opt_index);
};


proto.proto.CProtoRspQiShouHu.prototype.clearMCardList = function() {
  this.setMCardList([]);
};


/**
 * required int32 m_pos = 3;
 * @return {number}
 */
proto.proto.CProtoRspQiShouHu.prototype.getMPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoRspQiShouHu.prototype.setMPos = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoRspQiShouHu.prototype.clearMPos = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspQiShouHu.prototype.hasMPos = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyHaiDiLaoYue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifyHaiDiLaoYue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyHaiDiLaoYue.displayName = 'proto.proto.CProtoNotifyHaiDiLaoYue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyHaiDiLaoYue.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyHaiDiLaoYue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyHaiDiLaoYue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyHaiDiLaoYue.toObject = function(includeInstance, msg) {
  var f, obj = {
    mPos: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyHaiDiLaoYue}
 */
proto.proto.CProtoNotifyHaiDiLaoYue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyHaiDiLaoYue;
  return proto.proto.CProtoNotifyHaiDiLaoYue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyHaiDiLaoYue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyHaiDiLaoYue}
 */
proto.proto.CProtoNotifyHaiDiLaoYue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMPos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyHaiDiLaoYue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyHaiDiLaoYue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyHaiDiLaoYue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyHaiDiLaoYue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 m_pos = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyHaiDiLaoYue.prototype.getMPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyHaiDiLaoYue.prototype.setMPos = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyHaiDiLaoYue.prototype.clearMPos = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyHaiDiLaoYue.prototype.hasMPos = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqHaiDiLaoYue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqHaiDiLaoYue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqHaiDiLaoYue.displayName = 'proto.proto.CProtoReqHaiDiLaoYue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqHaiDiLaoYue.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqHaiDiLaoYue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqHaiDiLaoYue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqHaiDiLaoYue.toObject = function(includeInstance, msg) {
  var f, obj = {
    mFlag: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqHaiDiLaoYue}
 */
proto.proto.CProtoReqHaiDiLaoYue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqHaiDiLaoYue;
  return proto.proto.CProtoReqHaiDiLaoYue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqHaiDiLaoYue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqHaiDiLaoYue}
 */
proto.proto.CProtoReqHaiDiLaoYue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMFlag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqHaiDiLaoYue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqHaiDiLaoYue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqHaiDiLaoYue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqHaiDiLaoYue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 m_flag = 1;
 * @return {number}
 */
proto.proto.CProtoReqHaiDiLaoYue.prototype.getMFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoReqHaiDiLaoYue.prototype.setMFlag = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqHaiDiLaoYue.prototype.clearMFlag = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqHaiDiLaoYue.prototype.hasMFlag = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyHaiDiCard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifyHaiDiCard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyHaiDiCard.displayName = 'proto.proto.CProtoNotifyHaiDiCard';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyHaiDiCard.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyHaiDiCard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyHaiDiCard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyHaiDiCard.toObject = function(includeInstance, msg) {
  var f, obj = {
    mColor: jspb.Message.getField(msg, 1),
    mNumber: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyHaiDiCard}
 */
proto.proto.CProtoNotifyHaiDiCard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyHaiDiCard;
  return proto.proto.CProtoNotifyHaiDiCard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyHaiDiCard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyHaiDiCard}
 */
proto.proto.CProtoNotifyHaiDiCard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMColor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyHaiDiCard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyHaiDiCard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyHaiDiCard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyHaiDiCard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 m_color = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyHaiDiCard.prototype.getMColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyHaiDiCard.prototype.setMColor = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyHaiDiCard.prototype.clearMColor = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyHaiDiCard.prototype.hasMColor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_number = 2;
 * @return {number}
 */
proto.proto.CProtoNotifyHaiDiCard.prototype.getMNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyHaiDiCard.prototype.setMNumber = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifyHaiDiCard.prototype.clearMNumber = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyHaiDiCard.prototype.hasMNumber = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyFinalReport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoNotifyFinalReport.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoNotifyFinalReport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyFinalReport.displayName = 'proto.proto.CProtoNotifyFinalReport';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoNotifyFinalReport.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyFinalReport.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyFinalReport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyFinalReport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyFinalReport.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.proto.CProtoNotifyFinalReport.CProtoItem.toObject, includeInstance),
    rightway: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyFinalReport}
 */
proto.proto.CProtoNotifyFinalReport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyFinalReport;
  return proto.proto.CProtoNotifyFinalReport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyFinalReport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyFinalReport}
 */
proto.proto.CProtoNotifyFinalReport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.CProtoNotifyFinalReport.CProtoItem;
      reader.readMessage(value,proto.proto.CProtoNotifyFinalReport.CProtoItem.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRightway(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyFinalReport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyFinalReport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyFinalReport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyFinalReport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.CProtoNotifyFinalReport.CProtoItem.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyFinalReport.CProtoItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifyFinalReport.CProtoItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyFinalReport.CProtoItem.displayName = 'proto.proto.CProtoNotifyFinalReport.CProtoItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyFinalReport.CProtoItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyFinalReport.CProtoItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyFinalReport.CProtoItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    mPos: jspb.Message.getField(msg, 1),
    mBomb: jspb.Message.getField(msg, 2),
    mDbomb: jspb.Message.getField(msg, 3),
    mGold: jspb.Message.getField(msg, 4),
    mDzimo: jspb.Message.getField(msg, 5),
    mZimo: jspb.Message.getField(msg, 6),
    mDwin: jspb.Message.getField(msg, 7),
    mWin: jspb.Message.getField(msg, 8),
    mAgang: jspb.Message.getField(msg, 9),
    mMgang: jspb.Message.getField(msg, 10)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyFinalReport.CProtoItem}
 */
proto.proto.CProtoNotifyFinalReport.CProtoItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyFinalReport.CProtoItem;
  return proto.proto.CProtoNotifyFinalReport.CProtoItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyFinalReport.CProtoItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyFinalReport.CProtoItem}
 */
proto.proto.CProtoNotifyFinalReport.CProtoItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMPos(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMBomb(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMDbomb(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMGold(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMDzimo(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMZimo(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMDwin(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMWin(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMAgang(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMMgang(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyFinalReport.CProtoItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyFinalReport.CProtoItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyFinalReport.CProtoItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeInt32(
      10,
      f
    );
  }
};


/**
 * required int32 m_pos = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.getMPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.setMPos = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.clearMPos = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.hasMPos = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_bomb = 2;
 * @return {number}
 */
proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.getMBomb = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.setMBomb = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.clearMBomb = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.hasMBomb = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 m_dbomb = 3;
 * @return {number}
 */
proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.getMDbomb = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.setMDbomb = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.clearMDbomb = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.hasMDbomb = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 m_gold = 4;
 * @return {number}
 */
proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.getMGold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.setMGold = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.clearMGold = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.hasMGold = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 m_dzimo = 5;
 * @return {number}
 */
proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.getMDzimo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.setMDzimo = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.clearMDzimo = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.hasMDzimo = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int32 m_zimo = 6;
 * @return {number}
 */
proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.getMZimo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.setMZimo = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.clearMZimo = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.hasMZimo = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required int32 m_dwin = 7;
 * @return {number}
 */
proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.getMDwin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.setMDwin = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.clearMDwin = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.hasMDwin = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required int32 m_win = 8;
 * @return {number}
 */
proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.getMWin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.setMWin = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.clearMWin = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.hasMWin = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * required int32 m_agang = 9;
 * @return {number}
 */
proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.getMAgang = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.setMAgang = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.clearMAgang = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.hasMAgang = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * required int32 m_mgang = 10;
 * @return {number}
 */
proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.getMMgang = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.setMMgang = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.clearMMgang = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyFinalReport.CProtoItem.prototype.hasMMgang = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * repeated CProtoItem items = 1;
 * @return {!Array.<!proto.proto.CProtoNotifyFinalReport.CProtoItem>}
 */
proto.proto.CProtoNotifyFinalReport.prototype.getItemsList = function() {
  return /** @type{!Array.<!proto.proto.CProtoNotifyFinalReport.CProtoItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoNotifyFinalReport.CProtoItem, 1));
};


/** @param {!Array.<!proto.proto.CProtoNotifyFinalReport.CProtoItem>} value */
proto.proto.CProtoNotifyFinalReport.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.CProtoNotifyFinalReport.CProtoItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoNotifyFinalReport.CProtoItem}
 */
proto.proto.CProtoNotifyFinalReport.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.CProtoNotifyFinalReport.CProtoItem, opt_index);
};


proto.proto.CProtoNotifyFinalReport.prototype.clearItemsList = function() {
  this.setItemsList([]);
};


/**
 * optional bool rightway = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoNotifyFinalReport.prototype.getRightway = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.proto.CProtoNotifyFinalReport.prototype.setRightway = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifyFinalReport.prototype.clearRightway = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyFinalReport.prototype.hasRightway = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspLimitFree = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRspLimitFree, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspLimitFree.displayName = 'proto.proto.CProtoRspLimitFree';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspLimitFree.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspLimitFree.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspLimitFree} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspLimitFree.toObject = function(includeInstance, msg) {
  var f, obj = {
    enable: jspb.Message.getField(msg, 1),
    gameId: jspb.Message.getField(msg, 2),
    desc: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspLimitFree}
 */
proto.proto.CProtoRspLimitFree.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspLimitFree;
  return proto.proto.CProtoRspLimitFree.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspLimitFree} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspLimitFree}
 */
proto.proto.CProtoRspLimitFree.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnable(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGameId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspLimitFree.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspLimitFree.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspLimitFree} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspLimitFree.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * required bool enable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoRspLimitFree.prototype.getEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.proto.CProtoRspLimitFree.prototype.setEnable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspLimitFree.prototype.clearEnable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspLimitFree.prototype.hasEnable = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 game_id = 2;
 * @return {number}
 */
proto.proto.CProtoRspLimitFree.prototype.getGameId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoRspLimitFree.prototype.setGameId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoRspLimitFree.prototype.clearGameId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspLimitFree.prototype.hasGameId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string desc = 4;
 * @return {string}
 */
proto.proto.CProtoRspLimitFree.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.proto.CProtoRspLimitFree.prototype.setDesc = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoRspLimitFree.prototype.clearDesc = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspLimitFree.prototype.hasDesc = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyChiPeng = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifyChiPeng, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyChiPeng.displayName = 'proto.proto.CProtoNotifyChiPeng';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyChiPeng.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyChiPeng.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyChiPeng} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyChiPeng.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyChiPeng}
 */
proto.proto.CProtoNotifyChiPeng.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyChiPeng;
  return proto.proto.CProtoNotifyChiPeng.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyChiPeng} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyChiPeng}
 */
proto.proto.CProtoNotifyChiPeng.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyChiPeng.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyChiPeng.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyChiPeng} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyChiPeng.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspBroadcast = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRspBroadcast, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspBroadcast.displayName = 'proto.proto.CProtoRspBroadcast';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspBroadcast.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspBroadcast.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspBroadcast} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspBroadcast.toObject = function(includeInstance, msg) {
  var f, obj = {
    mStr: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspBroadcast}
 */
proto.proto.CProtoRspBroadcast.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspBroadcast;
  return proto.proto.CProtoRspBroadcast.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspBroadcast} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspBroadcast}
 */
proto.proto.CProtoRspBroadcast.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMStr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspBroadcast.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspBroadcast.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspBroadcast} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspBroadcast.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string m_str = 1;
 * @return {string}
 */
proto.proto.CProtoRspBroadcast.prototype.getMStr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.CProtoRspBroadcast.prototype.setMStr = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspBroadcast.prototype.clearMStr = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspBroadcast.prototype.hasMStr = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyMyTurnToShow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoNotifyMyTurnToShow.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoNotifyMyTurnToShow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyMyTurnToShow.displayName = 'proto.proto.CProtoNotifyMyTurnToShow';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoNotifyMyTurnToShow.repeatedFields_ = [8,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyMyTurnToShow.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyMyTurnToShow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyMyTurnToShow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyMyTurnToShow.toObject = function(includeInstance, msg) {
  var f, obj = {
    mDcount: jspb.Message.getField(msg, 1),
    mPos: jspb.Message.getField(msg, 2),
    mTime: jspb.Message.getField(msg, 3),
    mGang: jspb.Message.getField(msg, 4),
    mFlag: jspb.Message.getField(msg, 5),
    mColor: jspb.Message.getField(msg, 6),
    mNumber: jspb.Message.getField(msg, 7),
    mThinkList: jspb.Message.toObjectList(msg.getMThinkList(),
    proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem.toObject, includeInstance),
    canPass: jspb.Message.getField(msg, 9),
    mRecomcardsList: jspb.Message.toObjectList(msg.getMRecomcardsList(),
    proto.proto.CProtoCard.toObject, includeInstance),
    mPeekcard: (f = msg.getMPeekcard()) && proto.proto.CProtoCard.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyMyTurnToShow}
 */
proto.proto.CProtoNotifyMyTurnToShow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyMyTurnToShow;
  return proto.proto.CProtoNotifyMyTurnToShow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyMyTurnToShow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyMyTurnToShow}
 */
proto.proto.CProtoNotifyMyTurnToShow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMDcount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMPos(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMGang(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMFlag(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMColor(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMNumber(value);
      break;
    case 8:
      var value = new proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem;
      reader.readMessage(value,proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem.deserializeBinaryFromReader);
      msg.addMThink(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanPass(value);
      break;
    case 10:
      var value = new proto.proto.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoCard.deserializeBinaryFromReader);
      msg.addMRecomcards(value);
      break;
    case 11:
      var value = new proto.proto.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoCard.deserializeBinaryFromReader);
      msg.setMPeekcard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyMyTurnToShow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyMyTurnToShow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyMyTurnToShow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyMyTurnToShow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getMThinkList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getMRecomcardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.proto.CProtoCard.serializeBinaryToWriter
    );
  }
  f = message.getMPeekcard();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.proto.CProtoCard.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct.displayName = 'proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct.toObject = function(includeInstance, msg) {
  var f, obj = {
    mColor: jspb.Message.getField(msg, 1),
    mNumber: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct}
 */
proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct;
  return proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct}
 */
proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMColor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 m_color = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct.prototype.getMColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct.prototype.setMColor = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct.prototype.clearMColor = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct.prototype.hasMColor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_number = 2;
 * @return {number}
 */
proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct.prototype.getMNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct.prototype.setMNumber = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct.prototype.clearMNumber = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct.prototype.hasMNumber = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem.displayName = 'proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    mType: jspb.Message.getField(msg, 1),
    mCardlistList: jspb.Message.toObjectList(msg.getMCardlistList(),
    proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem}
 */
proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem;
  return proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem}
 */
proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMType(value);
      break;
    case 2:
      var value = new proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct;
      reader.readMessage(value,proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct.deserializeBinaryFromReader);
      msg.addMCardlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMCardlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 m_type = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem.prototype.getMType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem.prototype.setMType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem.prototype.clearMType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem.prototype.hasMType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated CProtoShowStruct m_cardList = 2;
 * @return {!Array.<!proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct>}
 */
proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem.prototype.getMCardlistList = function() {
  return /** @type{!Array.<!proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct, 2));
};


/** @param {!Array.<!proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct>} value */
proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem.prototype.setMCardlistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct}
 */
proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem.prototype.addMCardlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.CProtoNotifyMyTurnToShow.CProtoShowStruct, opt_index);
};


proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem.prototype.clearMCardlistList = function() {
  this.setMCardlistList([]);
};


/**
 * required int32 m_dCount = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyMyTurnToShow.prototype.getMDcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyMyTurnToShow.prototype.setMDcount = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyMyTurnToShow.prototype.clearMDcount = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyMyTurnToShow.prototype.hasMDcount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_pos = 2;
 * @return {number}
 */
proto.proto.CProtoNotifyMyTurnToShow.prototype.getMPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyMyTurnToShow.prototype.setMPos = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifyMyTurnToShow.prototype.clearMPos = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyMyTurnToShow.prototype.hasMPos = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 m_time = 3;
 * @return {number}
 */
proto.proto.CProtoNotifyMyTurnToShow.prototype.getMTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyMyTurnToShow.prototype.setMTime = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoNotifyMyTurnToShow.prototype.clearMTime = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyMyTurnToShow.prototype.hasMTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 m_gang = 4;
 * @return {number}
 */
proto.proto.CProtoNotifyMyTurnToShow.prototype.getMGang = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyMyTurnToShow.prototype.setMGang = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoNotifyMyTurnToShow.prototype.clearMGang = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyMyTurnToShow.prototype.hasMGang = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 m_flag = 5;
 * @return {number}
 */
proto.proto.CProtoNotifyMyTurnToShow.prototype.getMFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyMyTurnToShow.prototype.setMFlag = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.proto.CProtoNotifyMyTurnToShow.prototype.clearMFlag = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyMyTurnToShow.prototype.hasMFlag = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int32 m_color = 6;
 * @return {number}
 */
proto.proto.CProtoNotifyMyTurnToShow.prototype.getMColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyMyTurnToShow.prototype.setMColor = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.proto.CProtoNotifyMyTurnToShow.prototype.clearMColor = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyMyTurnToShow.prototype.hasMColor = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required int32 m_number = 7;
 * @return {number}
 */
proto.proto.CProtoNotifyMyTurnToShow.prototype.getMNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyMyTurnToShow.prototype.setMNumber = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.proto.CProtoNotifyMyTurnToShow.prototype.clearMNumber = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyMyTurnToShow.prototype.hasMNumber = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated CProtoThinkItem m_think = 8;
 * @return {!Array.<!proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem>}
 */
proto.proto.CProtoNotifyMyTurnToShow.prototype.getMThinkList = function() {
  return /** @type{!Array.<!proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem, 8));
};


/** @param {!Array.<!proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem>} value */
proto.proto.CProtoNotifyMyTurnToShow.prototype.setMThinkList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem}
 */
proto.proto.CProtoNotifyMyTurnToShow.prototype.addMThink = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.proto.CProtoNotifyMyTurnToShow.CProtoThinkItem, opt_index);
};


proto.proto.CProtoNotifyMyTurnToShow.prototype.clearMThinkList = function() {
  this.setMThinkList([]);
};


/**
 * required bool can_pass = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoNotifyMyTurnToShow.prototype.getCanPass = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.proto.CProtoNotifyMyTurnToShow.prototype.setCanPass = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.proto.CProtoNotifyMyTurnToShow.prototype.clearCanPass = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyMyTurnToShow.prototype.hasCanPass = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated CProtoCard m_recomCards = 10;
 * @return {!Array.<!proto.proto.CProtoCard>}
 */
proto.proto.CProtoNotifyMyTurnToShow.prototype.getMRecomcardsList = function() {
  return /** @type{!Array.<!proto.proto.CProtoCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoCard, 10));
};


/** @param {!Array.<!proto.proto.CProtoCard>} value */
proto.proto.CProtoNotifyMyTurnToShow.prototype.setMRecomcardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.proto.CProtoCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoCard}
 */
proto.proto.CProtoNotifyMyTurnToShow.prototype.addMRecomcards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.proto.CProtoCard, opt_index);
};


proto.proto.CProtoNotifyMyTurnToShow.prototype.clearMRecomcardsList = function() {
  this.setMRecomcardsList([]);
};


/**
 * optional CProtoCard m_peekCard = 11;
 * @return {?proto.proto.CProtoCard}
 */
proto.proto.CProtoNotifyMyTurnToShow.prototype.getMPeekcard = function() {
  return /** @type{?proto.proto.CProtoCard} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoCard, 11));
};


/** @param {?proto.proto.CProtoCard|undefined} value */
proto.proto.CProtoNotifyMyTurnToShow.prototype.setMPeekcard = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.proto.CProtoNotifyMyTurnToShow.prototype.clearMPeekcard = function() {
  this.setMPeekcard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyMyTurnToShow.prototype.hasMPeekcard = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyShowTile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoNotifyShowTile.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoNotifyShowTile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyShowTile.displayName = 'proto.proto.CProtoNotifyShowTile';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoNotifyShowTile.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyShowTile.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyShowTile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyShowTile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyShowTile.toObject = function(includeInstance, msg) {
  var f, obj = {
    mType: jspb.Message.getField(msg, 1),
    mThinkList: jspb.Message.toObjectList(msg.getMThinkList(),
    proto.proto.CProtoNotifyShowTile.CProtoShowStruct.toObject, includeInstance),
    mMingcardList: jspb.Message.toObjectList(msg.getMMingcardList(),
    proto.proto.CProtoNotifyShowTile.CProtoShowStruct.toObject, includeInstance),
    mTingcardList: jspb.Message.toObjectList(msg.getMTingcardList(),
    proto.proto.CProtoNotifyShowTile.CProtoShowStruct.toObject, includeInstance),
    mBaojiao: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyShowTile}
 */
proto.proto.CProtoNotifyShowTile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyShowTile;
  return proto.proto.CProtoNotifyShowTile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyShowTile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyShowTile}
 */
proto.proto.CProtoNotifyShowTile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMType(value);
      break;
    case 2:
      var value = new proto.proto.CProtoNotifyShowTile.CProtoShowStruct;
      reader.readMessage(value,proto.proto.CProtoNotifyShowTile.CProtoShowStruct.deserializeBinaryFromReader);
      msg.addMThink(value);
      break;
    case 3:
      var value = new proto.proto.CProtoNotifyShowTile.CProtoShowStruct;
      reader.readMessage(value,proto.proto.CProtoNotifyShowTile.CProtoShowStruct.deserializeBinaryFromReader);
      msg.addMMingcard(value);
      break;
    case 4:
      var value = new proto.proto.CProtoNotifyShowTile.CProtoShowStruct;
      reader.readMessage(value,proto.proto.CProtoNotifyShowTile.CProtoShowStruct.deserializeBinaryFromReader);
      msg.addMTingcard(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMBaojiao(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyShowTile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyShowTile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyShowTile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyShowTile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMThinkList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.CProtoNotifyShowTile.CProtoShowStruct.serializeBinaryToWriter
    );
  }
  f = message.getMMingcardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.proto.CProtoNotifyShowTile.CProtoShowStruct.serializeBinaryToWriter
    );
  }
  f = message.getMTingcardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.proto.CProtoNotifyShowTile.CProtoShowStruct.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyShowTile.CProtoShowStruct = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifyShowTile.CProtoShowStruct, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyShowTile.CProtoShowStruct.displayName = 'proto.proto.CProtoNotifyShowTile.CProtoShowStruct';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyShowTile.CProtoShowStruct.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyShowTile.CProtoShowStruct.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyShowTile.CProtoShowStruct} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyShowTile.CProtoShowStruct.toObject = function(includeInstance, msg) {
  var f, obj = {
    mColor: jspb.Message.getField(msg, 1),
    mNumber: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyShowTile.CProtoShowStruct}
 */
proto.proto.CProtoNotifyShowTile.CProtoShowStruct.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyShowTile.CProtoShowStruct;
  return proto.proto.CProtoNotifyShowTile.CProtoShowStruct.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyShowTile.CProtoShowStruct} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyShowTile.CProtoShowStruct}
 */
proto.proto.CProtoNotifyShowTile.CProtoShowStruct.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMColor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyShowTile.CProtoShowStruct.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyShowTile.CProtoShowStruct.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyShowTile.CProtoShowStruct} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyShowTile.CProtoShowStruct.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 m_color = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyShowTile.CProtoShowStruct.prototype.getMColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyShowTile.CProtoShowStruct.prototype.setMColor = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyShowTile.CProtoShowStruct.prototype.clearMColor = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyShowTile.CProtoShowStruct.prototype.hasMColor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_number = 2;
 * @return {number}
 */
proto.proto.CProtoNotifyShowTile.CProtoShowStruct.prototype.getMNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyShowTile.CProtoShowStruct.prototype.setMNumber = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifyShowTile.CProtoShowStruct.prototype.clearMNumber = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyShowTile.CProtoShowStruct.prototype.hasMNumber = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 m_type = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyShowTile.prototype.getMType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyShowTile.prototype.setMType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyShowTile.prototype.clearMType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyShowTile.prototype.hasMType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated CProtoShowStruct m_think = 2;
 * @return {!Array.<!proto.proto.CProtoNotifyShowTile.CProtoShowStruct>}
 */
proto.proto.CProtoNotifyShowTile.prototype.getMThinkList = function() {
  return /** @type{!Array.<!proto.proto.CProtoNotifyShowTile.CProtoShowStruct>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoNotifyShowTile.CProtoShowStruct, 2));
};


/** @param {!Array.<!proto.proto.CProtoNotifyShowTile.CProtoShowStruct>} value */
proto.proto.CProtoNotifyShowTile.prototype.setMThinkList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.CProtoNotifyShowTile.CProtoShowStruct=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoNotifyShowTile.CProtoShowStruct}
 */
proto.proto.CProtoNotifyShowTile.prototype.addMThink = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.CProtoNotifyShowTile.CProtoShowStruct, opt_index);
};


proto.proto.CProtoNotifyShowTile.prototype.clearMThinkList = function() {
  this.setMThinkList([]);
};


/**
 * repeated CProtoShowStruct m_mingcard = 3;
 * @return {!Array.<!proto.proto.CProtoNotifyShowTile.CProtoShowStruct>}
 */
proto.proto.CProtoNotifyShowTile.prototype.getMMingcardList = function() {
  return /** @type{!Array.<!proto.proto.CProtoNotifyShowTile.CProtoShowStruct>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoNotifyShowTile.CProtoShowStruct, 3));
};


/** @param {!Array.<!proto.proto.CProtoNotifyShowTile.CProtoShowStruct>} value */
proto.proto.CProtoNotifyShowTile.prototype.setMMingcardList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.proto.CProtoNotifyShowTile.CProtoShowStruct=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoNotifyShowTile.CProtoShowStruct}
 */
proto.proto.CProtoNotifyShowTile.prototype.addMMingcard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.proto.CProtoNotifyShowTile.CProtoShowStruct, opt_index);
};


proto.proto.CProtoNotifyShowTile.prototype.clearMMingcardList = function() {
  this.setMMingcardList([]);
};


/**
 * repeated CProtoShowStruct m_tingcard = 4;
 * @return {!Array.<!proto.proto.CProtoNotifyShowTile.CProtoShowStruct>}
 */
proto.proto.CProtoNotifyShowTile.prototype.getMTingcardList = function() {
  return /** @type{!Array.<!proto.proto.CProtoNotifyShowTile.CProtoShowStruct>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoNotifyShowTile.CProtoShowStruct, 4));
};


/** @param {!Array.<!proto.proto.CProtoNotifyShowTile.CProtoShowStruct>} value */
proto.proto.CProtoNotifyShowTile.prototype.setMTingcardList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.proto.CProtoNotifyShowTile.CProtoShowStruct=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoNotifyShowTile.CProtoShowStruct}
 */
proto.proto.CProtoNotifyShowTile.prototype.addMTingcard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.proto.CProtoNotifyShowTile.CProtoShowStruct, opt_index);
};


proto.proto.CProtoNotifyShowTile.prototype.clearMTingcardList = function() {
  this.setMTingcardList([]);
};


/**
 * optional bool m_baoJiao = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoNotifyShowTile.prototype.getMBaojiao = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.proto.CProtoNotifyShowTile.prototype.setMBaojiao = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.proto.CProtoNotifyShowTile.prototype.clearMBaojiao = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyShowTile.prototype.hasMBaojiao = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyBroadcastShow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoNotifyBroadcastShow.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoNotifyBroadcastShow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyBroadcastShow.displayName = 'proto.proto.CProtoNotifyBroadcastShow';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoNotifyBroadcastShow.repeatedFields_ = [5,6,7,10,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyBroadcastShow.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyBroadcastShow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyBroadcastShow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyBroadcastShow.toObject = function(includeInstance, msg) {
  var f, obj = {
    mErrorcode: jspb.Message.getField(msg, 1),
    mPos: jspb.Message.getField(msg, 2),
    mType: jspb.Message.getField(msg, 3),
    mCardcount: jspb.Message.getField(msg, 4),
    mThinkList: jspb.Message.toObjectList(msg.getMThinkList(),
    proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem.toObject, includeInstance),
    mCardvalueList: jspb.Message.toObjectList(msg.getMCardvalueList(),
    proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr.toObject, includeInstance),
    mHuList: jspb.Message.getRepeatedField(msg, 7),
    mColor: jspb.Message.getField(msg, 8),
    mNumber: jspb.Message.getField(msg, 9),
    gangHuaOptsList: jspb.Message.toObjectList(msg.getGangHuaOptsList(),
    proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt.toObject, includeInstance),
    useMingList: jspb.Message.toObjectList(msg.getUseMingList(),
    proto.proto.CProtoCard.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyBroadcastShow}
 */
proto.proto.CProtoNotifyBroadcastShow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyBroadcastShow;
  return proto.proto.CProtoNotifyBroadcastShow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyBroadcastShow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyBroadcastShow}
 */
proto.proto.CProtoNotifyBroadcastShow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMErrorcode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMPos(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMCardcount(value);
      break;
    case 5:
      var value = new proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem;
      reader.readMessage(value,proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem.deserializeBinaryFromReader);
      msg.addMThink(value);
      break;
    case 6:
      var value = new proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr;
      reader.readMessage(value,proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr.deserializeBinaryFromReader);
      msg.addMCardvalue(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addMHu(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMColor(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMNumber(value);
      break;
    case 10:
      var value = new proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt;
      reader.readMessage(value,proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt.deserializeBinaryFromReader);
      msg.addGangHuaOpts(value);
      break;
    case 11:
      var value = new proto.proto.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoCard.deserializeBinaryFromReader);
      msg.addUseMing(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyBroadcastShow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyBroadcastShow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyBroadcastShow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyBroadcastShow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getMThinkList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem.serializeBinaryToWriter
    );
  }
  f = message.getMCardvalueList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr.serializeBinaryToWriter
    );
  }
  f = message.getMHuList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getGangHuaOptsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt.serializeBinaryToWriter
    );
  }
  f = message.getUseMingList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.proto.CProtoCard.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr.displayName = 'proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr.toObject = function(includeInstance, msg) {
  var f, obj = {
    mColor: jspb.Message.getField(msg, 1),
    mNumber: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr}
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr;
  return proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr}
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMColor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 m_color = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr.prototype.getMColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr.prototype.setMColor = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr.prototype.clearMColor = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr.prototype.hasMColor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_number = 2;
 * @return {number}
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr.prototype.getMNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr.prototype.setMNumber = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr.prototype.clearMNumber = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr.prototype.hasMNumber = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem.displayName = 'proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    mColor: jspb.Message.getField(msg, 1),
    mNumber: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem}
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem;
  return proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem}
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMColor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 m_color = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem.prototype.getMColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem.prototype.setMColor = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem.prototype.clearMColor = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem.prototype.hasMColor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_number = 2;
 * @return {number}
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem.prototype.getMNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem.prototype.setMNumber = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem.prototype.clearMNumber = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem.prototype.hasMNumber = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt.displayName = 'proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromMing: jspb.Message.getField(msg, 1),
    card: (f = msg.getCard()) && proto.proto.CProtoCard.toObject(includeInstance, f),
    action: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt}
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt;
  return proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt}
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFromMing(value);
      break;
    case 2:
      var value = new proto.proto.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoCard.deserializeBinaryFromReader);
      msg.setCard(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getCard();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.CProtoCard.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required bool from_ming = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt.prototype.getFromMing = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt.prototype.setFromMing = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt.prototype.clearFromMing = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt.prototype.hasFromMing = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required CProtoCard card = 2;
 * @return {!proto.proto.CProtoCard}
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt.prototype.getCard = function() {
  return /** @type{!proto.proto.CProtoCard} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoCard, 2, 1));
};


/** @param {!proto.proto.CProtoCard} value */
proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt.prototype.setCard = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt.prototype.clearCard = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt.prototype.hasCard = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 action = 3;
 * @return {number}
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt.prototype.getAction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt.prototype.setAction = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt.prototype.clearAction = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt.prototype.hasAction = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 m_errorCode = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyBroadcastShow.prototype.getMErrorcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyBroadcastShow.prototype.setMErrorcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyBroadcastShow.prototype.clearMErrorcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyBroadcastShow.prototype.hasMErrorcode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_pos = 2;
 * @return {number}
 */
proto.proto.CProtoNotifyBroadcastShow.prototype.getMPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyBroadcastShow.prototype.setMPos = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifyBroadcastShow.prototype.clearMPos = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyBroadcastShow.prototype.hasMPos = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 m_type = 3;
 * @return {number}
 */
proto.proto.CProtoNotifyBroadcastShow.prototype.getMType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyBroadcastShow.prototype.setMType = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoNotifyBroadcastShow.prototype.clearMType = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyBroadcastShow.prototype.hasMType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 m_cardCount = 4;
 * @return {number}
 */
proto.proto.CProtoNotifyBroadcastShow.prototype.getMCardcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyBroadcastShow.prototype.setMCardcount = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoNotifyBroadcastShow.prototype.clearMCardcount = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyBroadcastShow.prototype.hasMCardcount = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated CProtoThinkItem m_think = 5;
 * @return {!Array.<!proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem>}
 */
proto.proto.CProtoNotifyBroadcastShow.prototype.getMThinkList = function() {
  return /** @type{!Array.<!proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem, 5));
};


/** @param {!Array.<!proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem>} value */
proto.proto.CProtoNotifyBroadcastShow.prototype.setMThinkList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem}
 */
proto.proto.CProtoNotifyBroadcastShow.prototype.addMThink = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.proto.CProtoNotifyBroadcastShow.CProtoThinkItem, opt_index);
};


proto.proto.CProtoNotifyBroadcastShow.prototype.clearMThinkList = function() {
  this.setMThinkList([]);
};


/**
 * repeated CProtoCardAttr m_cardValue = 6;
 * @return {!Array.<!proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr>}
 */
proto.proto.CProtoNotifyBroadcastShow.prototype.getMCardvalueList = function() {
  return /** @type{!Array.<!proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr, 6));
};


/** @param {!Array.<!proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr>} value */
proto.proto.CProtoNotifyBroadcastShow.prototype.setMCardvalueList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr}
 */
proto.proto.CProtoNotifyBroadcastShow.prototype.addMCardvalue = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.proto.CProtoNotifyBroadcastShow.CProtoCardAttr, opt_index);
};


proto.proto.CProtoNotifyBroadcastShow.prototype.clearMCardvalueList = function() {
  this.setMCardvalueList([]);
};


/**
 * repeated int32 m_hu = 7;
 * @return {!Array.<number>}
 */
proto.proto.CProtoNotifyBroadcastShow.prototype.getMHuList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/** @param {!Array.<number>} value */
proto.proto.CProtoNotifyBroadcastShow.prototype.setMHuList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.CProtoNotifyBroadcastShow.prototype.addMHu = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.proto.CProtoNotifyBroadcastShow.prototype.clearMHuList = function() {
  this.setMHuList([]);
};


/**
 * optional int32 m_color = 8;
 * @return {number}
 */
proto.proto.CProtoNotifyBroadcastShow.prototype.getMColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyBroadcastShow.prototype.setMColor = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.proto.CProtoNotifyBroadcastShow.prototype.clearMColor = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyBroadcastShow.prototype.hasMColor = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 m_number = 9;
 * @return {number}
 */
proto.proto.CProtoNotifyBroadcastShow.prototype.getMNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyBroadcastShow.prototype.setMNumber = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.proto.CProtoNotifyBroadcastShow.prototype.clearMNumber = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyBroadcastShow.prototype.hasMNumber = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated CProtoGangHuaOpt gang_hua_opts = 10;
 * @return {!Array.<!proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt>}
 */
proto.proto.CProtoNotifyBroadcastShow.prototype.getGangHuaOptsList = function() {
  return /** @type{!Array.<!proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt, 10));
};


/** @param {!Array.<!proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt>} value */
proto.proto.CProtoNotifyBroadcastShow.prototype.setGangHuaOptsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt}
 */
proto.proto.CProtoNotifyBroadcastShow.prototype.addGangHuaOpts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.proto.CProtoNotifyBroadcastShow.CProtoGangHuaOpt, opt_index);
};


proto.proto.CProtoNotifyBroadcastShow.prototype.clearGangHuaOptsList = function() {
  this.setGangHuaOptsList([]);
};


/**
 * repeated CProtoCard use_ming = 11;
 * @return {!Array.<!proto.proto.CProtoCard>}
 */
proto.proto.CProtoNotifyBroadcastShow.prototype.getUseMingList = function() {
  return /** @type{!Array.<!proto.proto.CProtoCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoCard, 11));
};


/** @param {!Array.<!proto.proto.CProtoCard>} value */
proto.proto.CProtoNotifyBroadcastShow.prototype.setUseMingList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.proto.CProtoCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoCard}
 */
proto.proto.CProtoNotifyBroadcastShow.prototype.addUseMing = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.proto.CProtoCard, opt_index);
};


proto.proto.CProtoNotifyBroadcastShow.prototype.clearUseMingList = function() {
  this.setUseMingList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyMakeDecisionCS = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoNotifyMakeDecisionCS.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoNotifyMakeDecisionCS, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyMakeDecisionCS.displayName = 'proto.proto.CProtoNotifyMakeDecisionCS';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoNotifyMakeDecisionCS.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyMakeDecisionCS.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyMakeDecisionCS.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyMakeDecisionCS} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyMakeDecisionCS.toObject = function(includeInstance, msg) {
  var f, obj = {
    mFlag: jspb.Message.getField(msg, 1),
    mTime: jspb.Message.getField(msg, 2),
    mColor: jspb.Message.getField(msg, 3),
    mNumber: jspb.Message.getField(msg, 4),
    mThinkList: jspb.Message.toObjectList(msg.getMThinkList(),
    proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem.toObject, includeInstance),
    canPass: jspb.Message.getFieldWithDefault(msg, 6, true)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyMakeDecisionCS}
 */
proto.proto.CProtoNotifyMakeDecisionCS.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyMakeDecisionCS;
  return proto.proto.CProtoNotifyMakeDecisionCS.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyMakeDecisionCS} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyMakeDecisionCS}
 */
proto.proto.CProtoNotifyMakeDecisionCS.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMFlag(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMColor(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMNumber(value);
      break;
    case 5:
      var value = new proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem;
      reader.readMessage(value,proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem.deserializeBinaryFromReader);
      msg.addMThink(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanPass(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyMakeDecisionCS.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyMakeDecisionCS.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyMakeDecisionCS} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyMakeDecisionCS.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getMThinkList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr.displayName = 'proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr.toObject = function(includeInstance, msg) {
  var f, obj = {
    mColor: jspb.Message.getField(msg, 1),
    mNumber: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr}
 */
proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr;
  return proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr}
 */
proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMColor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 m_color = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr.prototype.getMColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr.prototype.setMColor = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr.prototype.clearMColor = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr.prototype.hasMColor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_number = 2;
 * @return {number}
 */
proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr.prototype.getMNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr.prototype.setMNumber = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr.prototype.clearMNumber = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr.prototype.hasMNumber = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem.displayName = 'proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    mType: jspb.Message.getField(msg, 1),
    mCardlistList: jspb.Message.toObjectList(msg.getMCardlistList(),
    proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem}
 */
proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem;
  return proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem}
 */
proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMType(value);
      break;
    case 2:
      var value = new proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr;
      reader.readMessage(value,proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr.deserializeBinaryFromReader);
      msg.addMCardlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMCardlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 m_type = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem.prototype.getMType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem.prototype.setMType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem.prototype.clearMType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem.prototype.hasMType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated CProtoCardAttr m_cardList = 2;
 * @return {!Array.<!proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr>}
 */
proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem.prototype.getMCardlistList = function() {
  return /** @type{!Array.<!proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr, 2));
};


/** @param {!Array.<!proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr>} value */
proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem.prototype.setMCardlistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr}
 */
proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem.prototype.addMCardlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.CProtoNotifyMakeDecisionCS.CProtoCardAttr, opt_index);
};


proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem.prototype.clearMCardlistList = function() {
  this.setMCardlistList([]);
};


/**
 * required int32 m_flag = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyMakeDecisionCS.prototype.getMFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyMakeDecisionCS.prototype.setMFlag = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyMakeDecisionCS.prototype.clearMFlag = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyMakeDecisionCS.prototype.hasMFlag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_time = 2;
 * @return {number}
 */
proto.proto.CProtoNotifyMakeDecisionCS.prototype.getMTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyMakeDecisionCS.prototype.setMTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifyMakeDecisionCS.prototype.clearMTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyMakeDecisionCS.prototype.hasMTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 m_color = 3;
 * @return {number}
 */
proto.proto.CProtoNotifyMakeDecisionCS.prototype.getMColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyMakeDecisionCS.prototype.setMColor = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoNotifyMakeDecisionCS.prototype.clearMColor = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyMakeDecisionCS.prototype.hasMColor = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 m_number = 4;
 * @return {number}
 */
proto.proto.CProtoNotifyMakeDecisionCS.prototype.getMNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyMakeDecisionCS.prototype.setMNumber = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoNotifyMakeDecisionCS.prototype.clearMNumber = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyMakeDecisionCS.prototype.hasMNumber = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated CProtoThinkItem m_think = 5;
 * @return {!Array.<!proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem>}
 */
proto.proto.CProtoNotifyMakeDecisionCS.prototype.getMThinkList = function() {
  return /** @type{!Array.<!proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem, 5));
};


/** @param {!Array.<!proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem>} value */
proto.proto.CProtoNotifyMakeDecisionCS.prototype.setMThinkList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem}
 */
proto.proto.CProtoNotifyMakeDecisionCS.prototype.addMThink = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.proto.CProtoNotifyMakeDecisionCS.CProtoThinkItem, opt_index);
};


proto.proto.CProtoNotifyMakeDecisionCS.prototype.clearMThinkList = function() {
  this.setMThinkList([]);
};


/**
 * optional bool can_pass = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoNotifyMakeDecisionCS.prototype.getCanPass = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, true));
};


/** @param {boolean} value */
proto.proto.CProtoNotifyMakeDecisionCS.prototype.setCanPass = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.proto.CProtoNotifyMakeDecisionCS.prototype.clearCanPass = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyMakeDecisionCS.prototype.hasCanPass = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqPlayerDecision = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoReqPlayerDecision.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoReqPlayerDecision, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqPlayerDecision.displayName = 'proto.proto.CProtoReqPlayerDecision';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoReqPlayerDecision.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqPlayerDecision.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqPlayerDecision.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqPlayerDecision} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqPlayerDecision.toObject = function(includeInstance, msg) {
  var f, obj = {
    mType: jspb.Message.getField(msg, 1),
    mThinkList: jspb.Message.toObjectList(msg.getMThinkList(),
    proto.proto.CProtoReqPlayerDecision.CProtoThinkItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqPlayerDecision}
 */
proto.proto.CProtoReqPlayerDecision.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqPlayerDecision;
  return proto.proto.CProtoReqPlayerDecision.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqPlayerDecision} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqPlayerDecision}
 */
proto.proto.CProtoReqPlayerDecision.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMType(value);
      break;
    case 2:
      var value = new proto.proto.CProtoReqPlayerDecision.CProtoThinkItem;
      reader.readMessage(value,proto.proto.CProtoReqPlayerDecision.CProtoThinkItem.deserializeBinaryFromReader);
      msg.addMThink(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqPlayerDecision.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqPlayerDecision.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqPlayerDecision} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqPlayerDecision.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMThinkList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.CProtoReqPlayerDecision.CProtoThinkItem.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqPlayerDecision.CProtoThinkItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqPlayerDecision.CProtoThinkItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqPlayerDecision.CProtoThinkItem.displayName = 'proto.proto.CProtoReqPlayerDecision.CProtoThinkItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqPlayerDecision.CProtoThinkItem.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqPlayerDecision.CProtoThinkItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqPlayerDecision.CProtoThinkItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqPlayerDecision.CProtoThinkItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    mColor: jspb.Message.getField(msg, 1),
    mNumber: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqPlayerDecision.CProtoThinkItem}
 */
proto.proto.CProtoReqPlayerDecision.CProtoThinkItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqPlayerDecision.CProtoThinkItem;
  return proto.proto.CProtoReqPlayerDecision.CProtoThinkItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqPlayerDecision.CProtoThinkItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqPlayerDecision.CProtoThinkItem}
 */
proto.proto.CProtoReqPlayerDecision.CProtoThinkItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMColor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqPlayerDecision.CProtoThinkItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqPlayerDecision.CProtoThinkItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqPlayerDecision.CProtoThinkItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqPlayerDecision.CProtoThinkItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 m_color = 1;
 * @return {number}
 */
proto.proto.CProtoReqPlayerDecision.CProtoThinkItem.prototype.getMColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoReqPlayerDecision.CProtoThinkItem.prototype.setMColor = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqPlayerDecision.CProtoThinkItem.prototype.clearMColor = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqPlayerDecision.CProtoThinkItem.prototype.hasMColor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_number = 2;
 * @return {number}
 */
proto.proto.CProtoReqPlayerDecision.CProtoThinkItem.prototype.getMNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoReqPlayerDecision.CProtoThinkItem.prototype.setMNumber = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoReqPlayerDecision.CProtoThinkItem.prototype.clearMNumber = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqPlayerDecision.CProtoThinkItem.prototype.hasMNumber = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 m_type = 1;
 * @return {number}
 */
proto.proto.CProtoReqPlayerDecision.prototype.getMType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoReqPlayerDecision.prototype.setMType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqPlayerDecision.prototype.clearMType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqPlayerDecision.prototype.hasMType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated CProtoThinkItem m_think = 2;
 * @return {!Array.<!proto.proto.CProtoReqPlayerDecision.CProtoThinkItem>}
 */
proto.proto.CProtoReqPlayerDecision.prototype.getMThinkList = function() {
  return /** @type{!Array.<!proto.proto.CProtoReqPlayerDecision.CProtoThinkItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoReqPlayerDecision.CProtoThinkItem, 2));
};


/** @param {!Array.<!proto.proto.CProtoReqPlayerDecision.CProtoThinkItem>} value */
proto.proto.CProtoReqPlayerDecision.prototype.setMThinkList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.CProtoReqPlayerDecision.CProtoThinkItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoReqPlayerDecision.CProtoThinkItem}
 */
proto.proto.CProtoReqPlayerDecision.prototype.addMThink = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.CProtoReqPlayerDecision.CProtoThinkItem, opt_index);
};


proto.proto.CProtoReqPlayerDecision.prototype.clearMThinkList = function() {
  this.setMThinkList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspBroadcastDecision = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRspBroadcastDecision.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRspBroadcastDecision, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspBroadcastDecision.displayName = 'proto.proto.CProtoRspBroadcastDecision';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRspBroadcastDecision.repeatedFields_ = [7,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspBroadcastDecision.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspBroadcastDecision.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspBroadcastDecision} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspBroadcastDecision.toObject = function(includeInstance, msg) {
  var f, obj = {
    mErrorcode: jspb.Message.getField(msg, 1),
    mPos: jspb.Message.getField(msg, 2),
    mColor: jspb.Message.getField(msg, 3),
    mNumber: jspb.Message.getField(msg, 4),
    mCardposition: jspb.Message.getField(msg, 11),
    mThink: (f = msg.getMThink()) && proto.proto.CProtoRspBroadcastDecision.CProtoThink.toObject(includeInstance, f),
    mCardcount: jspb.Message.getField(msg, 6),
    mCardvalueList: jspb.Message.toObjectList(msg.getMCardvalueList(),
    proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList.toObject, includeInstance),
    mHucard2Color: jspb.Message.getField(msg, 8),
    mHucard2Number: jspb.Message.getField(msg, 9),
    mHuList: jspb.Message.getRepeatedField(msg, 10)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspBroadcastDecision}
 */
proto.proto.CProtoRspBroadcastDecision.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspBroadcastDecision;
  return proto.proto.CProtoRspBroadcastDecision.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspBroadcastDecision} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspBroadcastDecision}
 */
proto.proto.CProtoRspBroadcastDecision.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMErrorcode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMPos(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMColor(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMNumber(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMCardposition(value);
      break;
    case 5:
      var value = new proto.proto.CProtoRspBroadcastDecision.CProtoThink;
      reader.readMessage(value,proto.proto.CProtoRspBroadcastDecision.CProtoThink.deserializeBinaryFromReader);
      msg.setMThink(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMCardcount(value);
      break;
    case 7:
      var value = new proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList;
      reader.readMessage(value,proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList.deserializeBinaryFromReader);
      msg.addMCardvalue(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMHucard2Color(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMHucard2Number(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addMHu(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspBroadcastDecision.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspBroadcastDecision.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspBroadcastDecision} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspBroadcastDecision.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getMThink();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.proto.CProtoRspBroadcastDecision.CProtoThink.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getMCardvalueList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getMHuList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      10,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList.displayName = 'proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList.toObject = function(includeInstance, msg) {
  var f, obj = {
    mNumber: jspb.Message.getField(msg, 1),
    mColor: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList}
 */
proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList;
  return proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList}
 */
proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMNumber(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMColor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 m_number = 1;
 * @return {number}
 */
proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList.prototype.getMNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList.prototype.setMNumber = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList.prototype.clearMNumber = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList.prototype.hasMNumber = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_color = 2;
 * @return {number}
 */
proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList.prototype.getMColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList.prototype.setMColor = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList.prototype.clearMColor = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList.prototype.hasMColor = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspBroadcastDecision.CProtoThink = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRspBroadcastDecision.CProtoThink.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRspBroadcastDecision.CProtoThink, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspBroadcastDecision.CProtoThink.displayName = 'proto.proto.CProtoRspBroadcastDecision.CProtoThink';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRspBroadcastDecision.CProtoThink.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspBroadcastDecision.CProtoThink.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspBroadcastDecision.CProtoThink.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspBroadcastDecision.CProtoThink} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspBroadcastDecision.CProtoThink.toObject = function(includeInstance, msg) {
  var f, obj = {
    mType: jspb.Message.getField(msg, 1),
    mCardlistList: jspb.Message.toObjectList(msg.getMCardlistList(),
    proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspBroadcastDecision.CProtoThink}
 */
proto.proto.CProtoRspBroadcastDecision.CProtoThink.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspBroadcastDecision.CProtoThink;
  return proto.proto.CProtoRspBroadcastDecision.CProtoThink.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspBroadcastDecision.CProtoThink} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspBroadcastDecision.CProtoThink}
 */
proto.proto.CProtoRspBroadcastDecision.CProtoThink.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMType(value);
      break;
    case 2:
      var value = new proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList;
      reader.readMessage(value,proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList.deserializeBinaryFromReader);
      msg.addMCardlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspBroadcastDecision.CProtoThink.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspBroadcastDecision.CProtoThink.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspBroadcastDecision.CProtoThink} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspBroadcastDecision.CProtoThink.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMCardlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 m_type = 1;
 * @return {number}
 */
proto.proto.CProtoRspBroadcastDecision.CProtoThink.prototype.getMType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspBroadcastDecision.CProtoThink.prototype.setMType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspBroadcastDecision.CProtoThink.prototype.clearMType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspBroadcastDecision.CProtoThink.prototype.hasMType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated CProtoCardAttrList m_cardList = 2;
 * @return {!Array.<!proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList>}
 */
proto.proto.CProtoRspBroadcastDecision.CProtoThink.prototype.getMCardlistList = function() {
  return /** @type{!Array.<!proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList, 2));
};


/** @param {!Array.<!proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList>} value */
proto.proto.CProtoRspBroadcastDecision.CProtoThink.prototype.setMCardlistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList}
 */
proto.proto.CProtoRspBroadcastDecision.CProtoThink.prototype.addMCardlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList, opt_index);
};


proto.proto.CProtoRspBroadcastDecision.CProtoThink.prototype.clearMCardlistList = function() {
  this.setMCardlistList([]);
};


/**
 * required int32 m_errorCode = 1;
 * @return {number}
 */
proto.proto.CProtoRspBroadcastDecision.prototype.getMErrorcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspBroadcastDecision.prototype.setMErrorcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspBroadcastDecision.prototype.clearMErrorcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspBroadcastDecision.prototype.hasMErrorcode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_pos = 2;
 * @return {number}
 */
proto.proto.CProtoRspBroadcastDecision.prototype.getMPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoRspBroadcastDecision.prototype.setMPos = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoRspBroadcastDecision.prototype.clearMPos = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspBroadcastDecision.prototype.hasMPos = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 m_color = 3;
 * @return {number}
 */
proto.proto.CProtoRspBroadcastDecision.prototype.getMColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoRspBroadcastDecision.prototype.setMColor = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoRspBroadcastDecision.prototype.clearMColor = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspBroadcastDecision.prototype.hasMColor = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 m_number = 4;
 * @return {number}
 */
proto.proto.CProtoRspBroadcastDecision.prototype.getMNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.CProtoRspBroadcastDecision.prototype.setMNumber = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoRspBroadcastDecision.prototype.clearMNumber = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspBroadcastDecision.prototype.hasMNumber = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 m_cardposition = 11;
 * @return {number}
 */
proto.proto.CProtoRspBroadcastDecision.prototype.getMCardposition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.proto.CProtoRspBroadcastDecision.prototype.setMCardposition = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.proto.CProtoRspBroadcastDecision.prototype.clearMCardposition = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspBroadcastDecision.prototype.hasMCardposition = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * required CProtoThink m_think = 5;
 * @return {!proto.proto.CProtoRspBroadcastDecision.CProtoThink}
 */
proto.proto.CProtoRspBroadcastDecision.prototype.getMThink = function() {
  return /** @type{!proto.proto.CProtoRspBroadcastDecision.CProtoThink} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoRspBroadcastDecision.CProtoThink, 5, 1));
};


/** @param {!proto.proto.CProtoRspBroadcastDecision.CProtoThink} value */
proto.proto.CProtoRspBroadcastDecision.prototype.setMThink = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.proto.CProtoRspBroadcastDecision.prototype.clearMThink = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspBroadcastDecision.prototype.hasMThink = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 m_cardCount = 6;
 * @return {number}
 */
proto.proto.CProtoRspBroadcastDecision.prototype.getMCardcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.proto.CProtoRspBroadcastDecision.prototype.setMCardcount = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.proto.CProtoRspBroadcastDecision.prototype.clearMCardcount = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspBroadcastDecision.prototype.hasMCardcount = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated CProtoCardAttrList m_cardValue = 7;
 * @return {!Array.<!proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList>}
 */
proto.proto.CProtoRspBroadcastDecision.prototype.getMCardvalueList = function() {
  return /** @type{!Array.<!proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList, 7));
};


/** @param {!Array.<!proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList>} value */
proto.proto.CProtoRspBroadcastDecision.prototype.setMCardvalueList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList}
 */
proto.proto.CProtoRspBroadcastDecision.prototype.addMCardvalue = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.proto.CProtoRspBroadcastDecision.CProtoCardAttrList, opt_index);
};


proto.proto.CProtoRspBroadcastDecision.prototype.clearMCardvalueList = function() {
  this.setMCardvalueList([]);
};


/**
 * optional int32 m_hucard2_color = 8;
 * @return {number}
 */
proto.proto.CProtoRspBroadcastDecision.prototype.getMHucard2Color = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.proto.CProtoRspBroadcastDecision.prototype.setMHucard2Color = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.proto.CProtoRspBroadcastDecision.prototype.clearMHucard2Color = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspBroadcastDecision.prototype.hasMHucard2Color = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 m_hucard2_number = 9;
 * @return {number}
 */
proto.proto.CProtoRspBroadcastDecision.prototype.getMHucard2Number = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.proto.CProtoRspBroadcastDecision.prototype.setMHucard2Number = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.proto.CProtoRspBroadcastDecision.prototype.clearMHucard2Number = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspBroadcastDecision.prototype.hasMHucard2Number = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated int32 m_hu = 10;
 * @return {!Array.<number>}
 */
proto.proto.CProtoRspBroadcastDecision.prototype.getMHuList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 10));
};


/** @param {!Array.<number>} value */
proto.proto.CProtoRspBroadcastDecision.prototype.setMHuList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.CProtoRspBroadcastDecision.prototype.addMHu = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


proto.proto.CProtoRspBroadcastDecision.prototype.clearMHuList = function() {
  this.setMHuList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspUpdateScore = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRspUpdateScore.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRspUpdateScore, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspUpdateScore.displayName = 'proto.proto.CProtoRspUpdateScore';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRspUpdateScore.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspUpdateScore.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspUpdateScore.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspUpdateScore} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspUpdateScore.toObject = function(includeInstance, msg) {
  var f, obj = {
    mScoreList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspUpdateScore}
 */
proto.proto.CProtoRspUpdateScore.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspUpdateScore;
  return proto.proto.CProtoRspUpdateScore.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspUpdateScore} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspUpdateScore}
 */
proto.proto.CProtoRspUpdateScore.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addMScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspUpdateScore.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspUpdateScore.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspUpdateScore} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspUpdateScore.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMScoreList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      1,
      f
    );
  }
};


/**
 * repeated int32 m_score = 1;
 * @return {!Array.<number>}
 */
proto.proto.CProtoRspUpdateScore.prototype.getMScoreList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.proto.CProtoRspUpdateScore.prototype.setMScoreList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.CProtoRspUpdateScore.prototype.addMScore = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.proto.CProtoRspUpdateScore.prototype.clearMScoreList = function() {
  this.setMScoreList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqHeartbeat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqHeartbeat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqHeartbeat.displayName = 'proto.proto.CProtoReqHeartbeat';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqHeartbeat.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqHeartbeat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqHeartbeat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqHeartbeat.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqHeartbeat}
 */
proto.proto.CProtoReqHeartbeat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqHeartbeat;
  return proto.proto.CProtoReqHeartbeat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqHeartbeat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqHeartbeat}
 */
proto.proto.CProtoReqHeartbeat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqHeartbeat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqHeartbeat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqHeartbeat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqHeartbeat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspHeartbeat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRspHeartbeat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspHeartbeat.displayName = 'proto.proto.CProtoRspHeartbeat';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspHeartbeat.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspHeartbeat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspHeartbeat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspHeartbeat.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspHeartbeat}
 */
proto.proto.CProtoRspHeartbeat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspHeartbeat;
  return proto.proto.CProtoRspHeartbeat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspHeartbeat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspHeartbeat}
 */
proto.proto.CProtoRspHeartbeat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspHeartbeat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspHeartbeat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspHeartbeat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspHeartbeat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqCardLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqCardLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqCardLog.displayName = 'proto.proto.CProtoReqCardLog';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqCardLog.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqCardLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqCardLog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqCardLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    mUserid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqCardLog}
 */
proto.proto.CProtoReqCardLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqCardLog;
  return proto.proto.CProtoReqCardLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqCardLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqCardLog}
 */
proto.proto.CProtoReqCardLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqCardLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqCardLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqCardLog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqCardLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 m_userId = 1;
 * @return {number}
 */
proto.proto.CProtoReqCardLog.prototype.getMUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoReqCardLog.prototype.setMUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqCardLog.prototype.clearMUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqCardLog.prototype.hasMUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRsqCardLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRsqCardLog.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRsqCardLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRsqCardLog.displayName = 'proto.proto.CProtoRsqCardLog';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRsqCardLog.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRsqCardLog.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRsqCardLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRsqCardLog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRsqCardLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    mDataList: jspb.Message.toObjectList(msg.getMDataList(),
    proto.proto.CProtoRsqCardLog.CProtoCellData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRsqCardLog}
 */
proto.proto.CProtoRsqCardLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRsqCardLog;
  return proto.proto.CProtoRsqCardLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRsqCardLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRsqCardLog}
 */
proto.proto.CProtoRsqCardLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.CProtoRsqCardLog.CProtoCellData;
      reader.readMessage(value,proto.proto.CProtoRsqCardLog.CProtoCellData.deserializeBinaryFromReader);
      msg.addMData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRsqCardLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRsqCardLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRsqCardLog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRsqCardLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.CProtoRsqCardLog.CProtoCellData.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRsqCardLog.CProtoPlayerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRsqCardLog.CProtoPlayerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRsqCardLog.CProtoPlayerInfo.displayName = 'proto.proto.CProtoRsqCardLog.CProtoPlayerInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRsqCardLog.CProtoPlayerInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRsqCardLog.CProtoPlayerInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRsqCardLog.CProtoPlayerInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRsqCardLog.CProtoPlayerInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    mNickname: jspb.Message.getField(msg, 1),
    mUserid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRsqCardLog.CProtoPlayerInfo}
 */
proto.proto.CProtoRsqCardLog.CProtoPlayerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRsqCardLog.CProtoPlayerInfo;
  return proto.proto.CProtoRsqCardLog.CProtoPlayerInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRsqCardLog.CProtoPlayerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRsqCardLog.CProtoPlayerInfo}
 */
proto.proto.CProtoRsqCardLog.CProtoPlayerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMNickname(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRsqCardLog.CProtoPlayerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRsqCardLog.CProtoPlayerInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRsqCardLog.CProtoPlayerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRsqCardLog.CProtoPlayerInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required string m_nickname = 1;
 * @return {string}
 */
proto.proto.CProtoRsqCardLog.CProtoPlayerInfo.prototype.getMNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.CProtoRsqCardLog.CProtoPlayerInfo.prototype.setMNickname = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRsqCardLog.CProtoPlayerInfo.prototype.clearMNickname = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRsqCardLog.CProtoPlayerInfo.prototype.hasMNickname = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_userId = 2;
 * @return {number}
 */
proto.proto.CProtoRsqCardLog.CProtoPlayerInfo.prototype.getMUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoRsqCardLog.CProtoPlayerInfo.prototype.setMUserid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoRsqCardLog.CProtoPlayerInfo.prototype.clearMUserid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRsqCardLog.CProtoPlayerInfo.prototype.hasMUserid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRsqCardLog.CProtoCellData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRsqCardLog.CProtoCellData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRsqCardLog.CProtoCellData.displayName = 'proto.proto.CProtoRsqCardLog.CProtoCellData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRsqCardLog.CProtoCellData.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRsqCardLog.CProtoCellData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRsqCardLog.CProtoCellData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRsqCardLog.CProtoCellData.toObject = function(includeInstance, msg) {
  var f, obj = {
    mChange: jspb.Message.getField(msg, 1),
    mAfterCard: jspb.Message.getField(msg, 2),
    mType: jspb.Message.getField(msg, 3),
    mTime: jspb.Message.getField(msg, 6),
    mDeskid: jspb.Message.getField(msg, 7),
    mInfo: (f = msg.getMInfo()) && proto.proto.CProtoRsqCardLog.CProtoPlayerInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRsqCardLog.CProtoCellData}
 */
proto.proto.CProtoRsqCardLog.CProtoCellData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRsqCardLog.CProtoCellData;
  return proto.proto.CProtoRsqCardLog.CProtoCellData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRsqCardLog.CProtoCellData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRsqCardLog.CProtoCellData}
 */
proto.proto.CProtoRsqCardLog.CProtoCellData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMChange(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMAfterCard(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMType(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMTime(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMDeskid(value);
      break;
    case 8:
      var value = new proto.proto.CProtoRsqCardLog.CProtoPlayerInfo;
      reader.readMessage(value,proto.proto.CProtoRsqCardLog.CProtoPlayerInfo.deserializeBinaryFromReader);
      msg.setMInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRsqCardLog.CProtoCellData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRsqCardLog.CProtoCellData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRsqCardLog.CProtoCellData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRsqCardLog.CProtoCellData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getMInfo();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.proto.CProtoRsqCardLog.CProtoPlayerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 m_change = 1;
 * @return {number}
 */
proto.proto.CProtoRsqCardLog.CProtoCellData.prototype.getMChange = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRsqCardLog.CProtoCellData.prototype.setMChange = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRsqCardLog.CProtoCellData.prototype.clearMChange = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRsqCardLog.CProtoCellData.prototype.hasMChange = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_after_card = 2;
 * @return {number}
 */
proto.proto.CProtoRsqCardLog.CProtoCellData.prototype.getMAfterCard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoRsqCardLog.CProtoCellData.prototype.setMAfterCard = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoRsqCardLog.CProtoCellData.prototype.clearMAfterCard = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRsqCardLog.CProtoCellData.prototype.hasMAfterCard = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 m_type = 3;
 * @return {number}
 */
proto.proto.CProtoRsqCardLog.CProtoCellData.prototype.getMType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoRsqCardLog.CProtoCellData.prototype.setMType = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoRsqCardLog.CProtoCellData.prototype.clearMType = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRsqCardLog.CProtoCellData.prototype.hasMType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 m_time = 6;
 * @return {number}
 */
proto.proto.CProtoRsqCardLog.CProtoCellData.prototype.getMTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.proto.CProtoRsqCardLog.CProtoCellData.prototype.setMTime = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.proto.CProtoRsqCardLog.CProtoCellData.prototype.clearMTime = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRsqCardLog.CProtoCellData.prototype.hasMTime = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 m_deskId = 7;
 * @return {number}
 */
proto.proto.CProtoRsqCardLog.CProtoCellData.prototype.getMDeskid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.proto.CProtoRsqCardLog.CProtoCellData.prototype.setMDeskid = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.proto.CProtoRsqCardLog.CProtoCellData.prototype.clearMDeskid = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRsqCardLog.CProtoCellData.prototype.hasMDeskid = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional CProtoPlayerInfo m_info = 8;
 * @return {?proto.proto.CProtoRsqCardLog.CProtoPlayerInfo}
 */
proto.proto.CProtoRsqCardLog.CProtoCellData.prototype.getMInfo = function() {
  return /** @type{?proto.proto.CProtoRsqCardLog.CProtoPlayerInfo} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoRsqCardLog.CProtoPlayerInfo, 8));
};


/** @param {?proto.proto.CProtoRsqCardLog.CProtoPlayerInfo|undefined} value */
proto.proto.CProtoRsqCardLog.CProtoCellData.prototype.setMInfo = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.proto.CProtoRsqCardLog.CProtoCellData.prototype.clearMInfo = function() {
  this.setMInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRsqCardLog.CProtoCellData.prototype.hasMInfo = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated CProtoCellData m_data = 1;
 * @return {!Array.<!proto.proto.CProtoRsqCardLog.CProtoCellData>}
 */
proto.proto.CProtoRsqCardLog.prototype.getMDataList = function() {
  return /** @type{!Array.<!proto.proto.CProtoRsqCardLog.CProtoCellData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoRsqCardLog.CProtoCellData, 1));
};


/** @param {!Array.<!proto.proto.CProtoRsqCardLog.CProtoCellData>} value */
proto.proto.CProtoRsqCardLog.prototype.setMDataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.CProtoRsqCardLog.CProtoCellData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoRsqCardLog.CProtoCellData}
 */
proto.proto.CProtoRsqCardLog.prototype.addMData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.CProtoRsqCardLog.CProtoCellData, opt_index);
};


proto.proto.CProtoRsqCardLog.prototype.clearMDataList = function() {
  this.setMDataList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqHistoryRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqHistoryRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqHistoryRecord.displayName = 'proto.proto.CProtoReqHistoryRecord';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqHistoryRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqHistoryRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqHistoryRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqHistoryRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    mUsertype: jspb.Message.getField(msg, 1),
    mUserid: jspb.Message.getField(msg, 2),
    mMaxusernum: jspb.Message.getField(msg, 3),
    mGameid: jspb.Message.getField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqHistoryRecord}
 */
proto.proto.CProtoReqHistoryRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqHistoryRecord;
  return proto.proto.CProtoReqHistoryRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqHistoryRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqHistoryRecord}
 */
proto.proto.CProtoReqHistoryRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.proto.CProtoReqHistoryRecord.emRecordType} */ (reader.readEnum());
      msg.setMUsertype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMUserid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMMaxusernum(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMGameid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqHistoryRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqHistoryRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqHistoryRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqHistoryRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.proto.CProtoReqHistoryRecord.emRecordType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.CProtoReqHistoryRecord.emRecordType = {
  EMCOMMON: 1,
  EMCREATER: 2
};

/**
 * required emRecordType m_userType = 1;
 * @return {!proto.proto.CProtoReqHistoryRecord.emRecordType}
 */
proto.proto.CProtoReqHistoryRecord.prototype.getMUsertype = function() {
  return /** @type {!proto.proto.CProtoReqHistoryRecord.emRecordType} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {!proto.proto.CProtoReqHistoryRecord.emRecordType} value */
proto.proto.CProtoReqHistoryRecord.prototype.setMUsertype = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqHistoryRecord.prototype.clearMUsertype = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqHistoryRecord.prototype.hasMUsertype = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_userId = 2;
 * @return {number}
 */
proto.proto.CProtoReqHistoryRecord.prototype.getMUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoReqHistoryRecord.prototype.setMUserid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoReqHistoryRecord.prototype.clearMUserid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqHistoryRecord.prototype.hasMUserid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 m_maxUserNum = 3;
 * @return {number}
 */
proto.proto.CProtoReqHistoryRecord.prototype.getMMaxusernum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoReqHistoryRecord.prototype.setMMaxusernum = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoReqHistoryRecord.prototype.clearMMaxusernum = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqHistoryRecord.prototype.hasMMaxusernum = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 m_gameId = 8;
 * @return {number}
 */
proto.proto.CProtoReqHistoryRecord.prototype.getMGameid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.proto.CProtoReqHistoryRecord.prototype.setMGameid = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.proto.CProtoReqHistoryRecord.prototype.clearMGameid = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqHistoryRecord.prototype.hasMGameid = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspHistoryRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRspHistoryRecord.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRspHistoryRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspHistoryRecord.displayName = 'proto.proto.CProtoRspHistoryRecord';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRspHistoryRecord.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspHistoryRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspHistoryRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspHistoryRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspHistoryRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    mDataList: jspb.Message.toObjectList(msg.getMDataList(),
    proto.proto.CProtoRspHistoryRecord.CProtoCellData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspHistoryRecord}
 */
proto.proto.CProtoRspHistoryRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspHistoryRecord;
  return proto.proto.CProtoRspHistoryRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspHistoryRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspHistoryRecord}
 */
proto.proto.CProtoRspHistoryRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.CProtoRspHistoryRecord.CProtoCellData;
      reader.readMessage(value,proto.proto.CProtoRspHistoryRecord.CProtoCellData.deserializeBinaryFromReader);
      msg.addMData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspHistoryRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspHistoryRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspHistoryRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspHistoryRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.CProtoRspHistoryRecord.CProtoCellData.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo.displayName = 'proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    mNickname: jspb.Message.getField(msg, 1),
    mScore: jspb.Message.getField(msg, 2),
    mUid: jspb.Message.getField(msg, 3),
    mHeadUrl: jspb.Message.getField(msg, 4),
    mGender: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo}
 */
proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo;
  return proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo}
 */
proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMNickname(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMScore(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMUid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMHeadUrl(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMGender(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * required string m_nickname = 1;
 * @return {string}
 */
proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo.prototype.getMNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo.prototype.setMNickname = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo.prototype.clearMNickname = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo.prototype.hasMNickname = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_score = 2;
 * @return {number}
 */
proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo.prototype.getMScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo.prototype.setMScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo.prototype.clearMScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo.prototype.hasMScore = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 m_uid = 3;
 * @return {number}
 */
proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo.prototype.getMUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo.prototype.setMUid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo.prototype.clearMUid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo.prototype.hasMUid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string m_head_url = 4;
 * @return {string}
 */
proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo.prototype.getMHeadUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo.prototype.setMHeadUrl = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo.prototype.clearMHeadUrl = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo.prototype.hasMHeadUrl = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 m_gender = 5;
 * @return {number}
 */
proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo.prototype.getMGender = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo.prototype.setMGender = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo.prototype.clearMGender = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo.prototype.hasMGender = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspHistoryRecord.CProtoCellData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRspHistoryRecord.CProtoCellData.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRspHistoryRecord.CProtoCellData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspHistoryRecord.CProtoCellData.displayName = 'proto.proto.CProtoRspHistoryRecord.CProtoCellData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRspHistoryRecord.CProtoCellData.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspHistoryRecord.CProtoCellData.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspHistoryRecord.CProtoCellData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspHistoryRecord.CProtoCellData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspHistoryRecord.CProtoCellData.toObject = function(includeInstance, msg) {
  var f, obj = {
    mDeskid: jspb.Message.getField(msg, 1),
    mTime: jspb.Message.getField(msg, 2),
    mInfoList: jspb.Message.toObjectList(msg.getMInfoList(),
    proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo.toObject, includeInstance),
    mId: jspb.Message.getField(msg, 4),
    mState: jspb.Message.getField(msg, 5),
    mPlayType: (f = msg.getMPlayType()) && proto.proto.CProtoPlayType.toObject(includeInstance, f),
    mCreaterUid: jspb.Message.getField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspHistoryRecord.CProtoCellData}
 */
proto.proto.CProtoRspHistoryRecord.CProtoCellData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspHistoryRecord.CProtoCellData;
  return proto.proto.CProtoRspHistoryRecord.CProtoCellData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspHistoryRecord.CProtoCellData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspHistoryRecord.CProtoCellData}
 */
proto.proto.CProtoRspHistoryRecord.CProtoCellData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMDeskid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMTime(value);
      break;
    case 3:
      var value = new proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo;
      reader.readMessage(value,proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo.deserializeBinaryFromReader);
      msg.addMInfo(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMState(value);
      break;
    case 6:
      var value = new proto.proto.CProtoPlayType;
      reader.readMessage(value,proto.proto.CProtoPlayType.deserializeBinaryFromReader);
      msg.setMPlayType(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMCreaterUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspHistoryRecord.CProtoCellData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspHistoryRecord.CProtoCellData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspHistoryRecord.CProtoCellData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspHistoryRecord.CProtoCellData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getMPlayType();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.proto.CProtoPlayType.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * required int32 m_deskId = 1;
 * @return {number}
 */
proto.proto.CProtoRspHistoryRecord.CProtoCellData.prototype.getMDeskid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspHistoryRecord.CProtoCellData.prototype.setMDeskid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspHistoryRecord.CProtoCellData.prototype.clearMDeskid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspHistoryRecord.CProtoCellData.prototype.hasMDeskid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_time = 2;
 * @return {number}
 */
proto.proto.CProtoRspHistoryRecord.CProtoCellData.prototype.getMTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoRspHistoryRecord.CProtoCellData.prototype.setMTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoRspHistoryRecord.CProtoCellData.prototype.clearMTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspHistoryRecord.CProtoCellData.prototype.hasMTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated CProtoPlayerInfo m_info = 3;
 * @return {!Array.<!proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo>}
 */
proto.proto.CProtoRspHistoryRecord.CProtoCellData.prototype.getMInfoList = function() {
  return /** @type{!Array.<!proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo, 3));
};


/** @param {!Array.<!proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo>} value */
proto.proto.CProtoRspHistoryRecord.CProtoCellData.prototype.setMInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo}
 */
proto.proto.CProtoRspHistoryRecord.CProtoCellData.prototype.addMInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.proto.CProtoRspHistoryRecord.CProtoPlayerInfo, opt_index);
};


proto.proto.CProtoRspHistoryRecord.CProtoCellData.prototype.clearMInfoList = function() {
  this.setMInfoList([]);
};


/**
 * required string m_id = 4;
 * @return {string}
 */
proto.proto.CProtoRspHistoryRecord.CProtoCellData.prototype.getMId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.proto.CProtoRspHistoryRecord.CProtoCellData.prototype.setMId = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoRspHistoryRecord.CProtoCellData.prototype.clearMId = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspHistoryRecord.CProtoCellData.prototype.hasMId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 m_state = 5;
 * @return {number}
 */
proto.proto.CProtoRspHistoryRecord.CProtoCellData.prototype.getMState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.proto.CProtoRspHistoryRecord.CProtoCellData.prototype.setMState = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.proto.CProtoRspHistoryRecord.CProtoCellData.prototype.clearMState = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspHistoryRecord.CProtoCellData.prototype.hasMState = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required CProtoPlayType m_play_type = 6;
 * @return {!proto.proto.CProtoPlayType}
 */
proto.proto.CProtoRspHistoryRecord.CProtoCellData.prototype.getMPlayType = function() {
  return /** @type{!proto.proto.CProtoPlayType} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoPlayType, 6, 1));
};


/** @param {!proto.proto.CProtoPlayType} value */
proto.proto.CProtoRspHistoryRecord.CProtoCellData.prototype.setMPlayType = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.proto.CProtoRspHistoryRecord.CProtoCellData.prototype.clearMPlayType = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspHistoryRecord.CProtoCellData.prototype.hasMPlayType = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required int32 m_creater_uid = 7;
 * @return {number}
 */
proto.proto.CProtoRspHistoryRecord.CProtoCellData.prototype.getMCreaterUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.proto.CProtoRspHistoryRecord.CProtoCellData.prototype.setMCreaterUid = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.proto.CProtoRspHistoryRecord.CProtoCellData.prototype.clearMCreaterUid = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspHistoryRecord.CProtoCellData.prototype.hasMCreaterUid = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated CProtoCellData m_data = 1;
 * @return {!Array.<!proto.proto.CProtoRspHistoryRecord.CProtoCellData>}
 */
proto.proto.CProtoRspHistoryRecord.prototype.getMDataList = function() {
  return /** @type{!Array.<!proto.proto.CProtoRspHistoryRecord.CProtoCellData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoRspHistoryRecord.CProtoCellData, 1));
};


/** @param {!Array.<!proto.proto.CProtoRspHistoryRecord.CProtoCellData>} value */
proto.proto.CProtoRspHistoryRecord.prototype.setMDataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.CProtoRspHistoryRecord.CProtoCellData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoRspHistoryRecord.CProtoCellData}
 */
proto.proto.CProtoRspHistoryRecord.prototype.addMData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.CProtoRspHistoryRecord.CProtoCellData, opt_index);
};


proto.proto.CProtoRspHistoryRecord.prototype.clearMDataList = function() {
  this.setMDataList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqReplay = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqReplay, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqReplay.displayName = 'proto.proto.CProtoReqReplay';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqReplay.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqReplay.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqReplay} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqReplay.toObject = function(includeInstance, msg) {
  var f, obj = {
    mVideoid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqReplay}
 */
proto.proto.CProtoReqReplay.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqReplay;
  return proto.proto.CProtoReqReplay.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqReplay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqReplay}
 */
proto.proto.CProtoReqReplay.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMVideoid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqReplay.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqReplay.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqReplay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqReplay.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string m_videoId = 1;
 * @return {string}
 */
proto.proto.CProtoReqReplay.prototype.getMVideoid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.CProtoReqReplay.prototype.setMVideoid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqReplay.prototype.clearMVideoid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqReplay.prototype.hasMVideoid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoUserInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoUserInfo.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoUserInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoUserInfo.displayName = 'proto.proto.CProtoUserInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoUserInfo.repeatedFields_ = [6,8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoUserInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoUserInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoUserInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoUserInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    mUserid: jspb.Message.getField(msg, 1),
    mSex: jspb.Message.getField(msg, 2),
    mScore: jspb.Message.getField(msg, 3),
    mNikename: jspb.Message.getField(msg, 4),
    mImageurl: jspb.Message.getField(msg, 5),
    mCardlistList: jspb.Message.toObjectList(msg.getMCardlistList(),
    proto.proto.CProtoCard.toObject, includeInstance),
    mZhongnum: jspb.Message.getField(msg, 7),
    mHuacardsnumList: jspb.Message.getRepeatedField(msg, 8),
    mPokerlistList: jspb.Message.getRepeatedField(msg, 9)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoUserInfo}
 */
proto.proto.CProtoUserInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoUserInfo;
  return proto.proto.CProtoUserInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoUserInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoUserInfo}
 */
proto.proto.CProtoUserInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMUserid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMSex(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMScore(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMNikename(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMImageurl(value);
      break;
    case 6:
      var value = new proto.proto.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoCard.deserializeBinaryFromReader);
      msg.addMCardlist(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMZhongnum(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addMHuacardsnum(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addMPokerlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoUserInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoUserInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoUserInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoUserInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMCardlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.proto.CProtoCard.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getMHuacardsnumList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      8,
      f
    );
  }
  f = message.getMPokerlistList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
};


/**
 * required int32 m_userid = 1;
 * @return {number}
 */
proto.proto.CProtoUserInfo.prototype.getMUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoUserInfo.prototype.setMUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoUserInfo.prototype.clearMUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoUserInfo.prototype.hasMUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_sex = 2;
 * @return {number}
 */
proto.proto.CProtoUserInfo.prototype.getMSex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoUserInfo.prototype.setMSex = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoUserInfo.prototype.clearMSex = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoUserInfo.prototype.hasMSex = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 m_score = 3;
 * @return {number}
 */
proto.proto.CProtoUserInfo.prototype.getMScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoUserInfo.prototype.setMScore = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoUserInfo.prototype.clearMScore = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoUserInfo.prototype.hasMScore = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string m_nikename = 4;
 * @return {string}
 */
proto.proto.CProtoUserInfo.prototype.getMNikename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.proto.CProtoUserInfo.prototype.setMNikename = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoUserInfo.prototype.clearMNikename = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoUserInfo.prototype.hasMNikename = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required string m_imageUrl = 5;
 * @return {string}
 */
proto.proto.CProtoUserInfo.prototype.getMImageurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.proto.CProtoUserInfo.prototype.setMImageurl = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.proto.CProtoUserInfo.prototype.clearMImageurl = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoUserInfo.prototype.hasMImageurl = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated CProtoCard m_cardlist = 6;
 * @return {!Array.<!proto.proto.CProtoCard>}
 */
proto.proto.CProtoUserInfo.prototype.getMCardlistList = function() {
  return /** @type{!Array.<!proto.proto.CProtoCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoCard, 6));
};


/** @param {!Array.<!proto.proto.CProtoCard>} value */
proto.proto.CProtoUserInfo.prototype.setMCardlistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.proto.CProtoCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoCard}
 */
proto.proto.CProtoUserInfo.prototype.addMCardlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.proto.CProtoCard, opt_index);
};


proto.proto.CProtoUserInfo.prototype.clearMCardlistList = function() {
  this.setMCardlistList([]);
};


/**
 * optional int32 m_zhongNum = 7;
 * @return {number}
 */
proto.proto.CProtoUserInfo.prototype.getMZhongnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.proto.CProtoUserInfo.prototype.setMZhongnum = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.proto.CProtoUserInfo.prototype.clearMZhongnum = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoUserInfo.prototype.hasMZhongnum = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated int32 m_huaCardsNum = 8;
 * @return {!Array.<number>}
 */
proto.proto.CProtoUserInfo.prototype.getMHuacardsnumList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 8));
};


/** @param {!Array.<number>} value */
proto.proto.CProtoUserInfo.prototype.setMHuacardsnumList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.CProtoUserInfo.prototype.addMHuacardsnum = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.proto.CProtoUserInfo.prototype.clearMHuacardsnumList = function() {
  this.setMHuacardsnumList([]);
};


/**
 * repeated string m_pokerList = 9;
 * @return {!Array.<string>}
 */
proto.proto.CProtoUserInfo.prototype.getMPokerlistList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/** @param {!Array.<string>} value */
proto.proto.CProtoUserInfo.prototype.setMPokerlistList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.proto.CProtoUserInfo.prototype.addMPokerlist = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


proto.proto.CProtoUserInfo.prototype.clearMPokerlistList = function() {
  this.setMPokerlistList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoStepsInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoStepsInfo.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoStepsInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoStepsInfo.displayName = 'proto.proto.CProtoStepsInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoStepsInfo.repeatedFields_ = [4,5,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoStepsInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoStepsInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoStepsInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoStepsInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    mSeatidx: jspb.Message.getField(msg, 1),
    mOpttype: jspb.Message.getField(msg, 2),
    card: (f = msg.getCard()) && proto.proto.CProtoCard.toObject(includeInstance, f),
    mThinkList: jspb.Message.getRepeatedField(msg, 4),
    mCardlistList: jspb.Message.toObjectList(msg.getMCardlistList(),
    proto.proto.CProtoCard.toObject, includeInstance),
    fromMing: jspb.Message.getField(msg, 7),
    mFrom: jspb.Message.getField(msg, 8),
    mHutypesList: jspb.Message.getRepeatedField(msg, 9),
    mBaojiaoopt: (f = msg.getMBaojiaoopt()) && proto.proto.CProtoRspBaoJiaoOpt.toObject(includeInstance, f),
    mChangeshift: jspb.Message.getField(msg, 11),
    mDingque: jspb.Message.getField(msg, 12)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoStepsInfo}
 */
proto.proto.CProtoStepsInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoStepsInfo;
  return proto.proto.CProtoStepsInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoStepsInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoStepsInfo}
 */
proto.proto.CProtoStepsInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMSeatidx(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMOpttype(value);
      break;
    case 3:
      var value = new proto.proto.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoCard.deserializeBinaryFromReader);
      msg.setCard(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addMThink(value);
      break;
    case 5:
      var value = new proto.proto.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoCard.deserializeBinaryFromReader);
      msg.addMCardlist(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFromMing(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMFrom(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addMHutypes(value);
      break;
    case 10:
      var value = new proto.proto.CProtoRspBaoJiaoOpt;
      reader.readMessage(value,proto.proto.CProtoRspBaoJiaoOpt.deserializeBinaryFromReader);
      msg.setMBaojiaoopt(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMChangeshift(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMDingque(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoStepsInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoStepsInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoStepsInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoStepsInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCard();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.CProtoCard.serializeBinaryToWriter
    );
  }
  f = message.getMThinkList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      4,
      f
    );
  }
  f = message.getMCardlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.proto.CProtoCard.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getMHutypesList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      9,
      f
    );
  }
  f = message.getMBaojiaoopt();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.proto.CProtoRspBaoJiaoOpt.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeInt32(
      12,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.CProtoStepsInfo.emActionType = {
  EMZHUAPAI: 1,
  EMDAPAI: 2,
  EMANGANG: 3,
  EMBUGANG: 4,
  EMPENG: 5,
  EMMINGGANG: 6,
  EMJIEPAOHU: 7,
  EMZIMOHU: 8,
  EMLIUJU: 9,
  EMCHI: 10,
  EMQUEYISE: 14,
  EMBANBANHU: 15,
  EMDASIXI: 16,
  EMLIULIUSHUN: 17,
  EMTHINK: 21,
  EMTHINKRESULT: 22,
  EMREMOVEGANG: 23,
  EMCHOOSECARD: 24,
  EMCHANGECARD: 25,
  EMDINGQUE: 26,
  EMHAIDIHINT: 53,
  EMHAIDIYAO: 54,
  EMHAIDIGUO: 55,
  EMHAIDISHOW: 56,
  EMZHUANIAO: 61,
  EMBUZHONG: 62,
  EMBAOJIAO_HINT: 63,
  EMBAOJIAO_YES: 64,
  EMBAOJIAO_NO: 65
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoStepsInfo.CProtoGangHuaOpt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoStepsInfo.CProtoGangHuaOpt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoStepsInfo.CProtoGangHuaOpt.displayName = 'proto.proto.CProtoStepsInfo.CProtoGangHuaOpt';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoStepsInfo.CProtoGangHuaOpt.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoStepsInfo.CProtoGangHuaOpt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoStepsInfo.CProtoGangHuaOpt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoStepsInfo.CProtoGangHuaOpt.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromMing: jspb.Message.getField(msg, 1),
    card: (f = msg.getCard()) && proto.proto.CProtoCard.toObject(includeInstance, f),
    action: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoStepsInfo.CProtoGangHuaOpt}
 */
proto.proto.CProtoStepsInfo.CProtoGangHuaOpt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoStepsInfo.CProtoGangHuaOpt;
  return proto.proto.CProtoStepsInfo.CProtoGangHuaOpt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoStepsInfo.CProtoGangHuaOpt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoStepsInfo.CProtoGangHuaOpt}
 */
proto.proto.CProtoStepsInfo.CProtoGangHuaOpt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFromMing(value);
      break;
    case 2:
      var value = new proto.proto.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoCard.deserializeBinaryFromReader);
      msg.setCard(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoStepsInfo.CProtoGangHuaOpt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoStepsInfo.CProtoGangHuaOpt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoStepsInfo.CProtoGangHuaOpt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoStepsInfo.CProtoGangHuaOpt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getCard();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.CProtoCard.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required bool from_ming = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoStepsInfo.CProtoGangHuaOpt.prototype.getFromMing = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.proto.CProtoStepsInfo.CProtoGangHuaOpt.prototype.setFromMing = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoStepsInfo.CProtoGangHuaOpt.prototype.clearFromMing = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoStepsInfo.CProtoGangHuaOpt.prototype.hasFromMing = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required CProtoCard card = 2;
 * @return {!proto.proto.CProtoCard}
 */
proto.proto.CProtoStepsInfo.CProtoGangHuaOpt.prototype.getCard = function() {
  return /** @type{!proto.proto.CProtoCard} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoCard, 2, 1));
};


/** @param {!proto.proto.CProtoCard} value */
proto.proto.CProtoStepsInfo.CProtoGangHuaOpt.prototype.setCard = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.proto.CProtoStepsInfo.CProtoGangHuaOpt.prototype.clearCard = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoStepsInfo.CProtoGangHuaOpt.prototype.hasCard = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 action = 3;
 * @return {number}
 */
proto.proto.CProtoStepsInfo.CProtoGangHuaOpt.prototype.getAction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoStepsInfo.CProtoGangHuaOpt.prototype.setAction = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoStepsInfo.CProtoGangHuaOpt.prototype.clearAction = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoStepsInfo.CProtoGangHuaOpt.prototype.hasAction = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 m_seatIdx = 1;
 * @return {number}
 */
proto.proto.CProtoStepsInfo.prototype.getMSeatidx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoStepsInfo.prototype.setMSeatidx = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoStepsInfo.prototype.clearMSeatidx = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoStepsInfo.prototype.hasMSeatidx = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_optType = 2;
 * @return {number}
 */
proto.proto.CProtoStepsInfo.prototype.getMOpttype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoStepsInfo.prototype.setMOpttype = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoStepsInfo.prototype.clearMOpttype = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoStepsInfo.prototype.hasMOpttype = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required CProtoCard card = 3;
 * @return {!proto.proto.CProtoCard}
 */
proto.proto.CProtoStepsInfo.prototype.getCard = function() {
  return /** @type{!proto.proto.CProtoCard} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoCard, 3, 1));
};


/** @param {!proto.proto.CProtoCard} value */
proto.proto.CProtoStepsInfo.prototype.setCard = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.proto.CProtoStepsInfo.prototype.clearCard = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoStepsInfo.prototype.hasCard = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated int32 m_think = 4;
 * @return {!Array.<number>}
 */
proto.proto.CProtoStepsInfo.prototype.getMThinkList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array.<number>} value */
proto.proto.CProtoStepsInfo.prototype.setMThinkList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.CProtoStepsInfo.prototype.addMThink = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.proto.CProtoStepsInfo.prototype.clearMThinkList = function() {
  this.setMThinkList([]);
};


/**
 * repeated CProtoCard m_cardList = 5;
 * @return {!Array.<!proto.proto.CProtoCard>}
 */
proto.proto.CProtoStepsInfo.prototype.getMCardlistList = function() {
  return /** @type{!Array.<!proto.proto.CProtoCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoCard, 5));
};


/** @param {!Array.<!proto.proto.CProtoCard>} value */
proto.proto.CProtoStepsInfo.prototype.setMCardlistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.proto.CProtoCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoCard}
 */
proto.proto.CProtoStepsInfo.prototype.addMCardlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.proto.CProtoCard, opt_index);
};


proto.proto.CProtoStepsInfo.prototype.clearMCardlistList = function() {
  this.setMCardlistList([]);
};


/**
 * required bool from_ming = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoStepsInfo.prototype.getFromMing = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.proto.CProtoStepsInfo.prototype.setFromMing = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.proto.CProtoStepsInfo.prototype.clearFromMing = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoStepsInfo.prototype.hasFromMing = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int32 m_from = 8;
 * @return {number}
 */
proto.proto.CProtoStepsInfo.prototype.getMFrom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.proto.CProtoStepsInfo.prototype.setMFrom = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.proto.CProtoStepsInfo.prototype.clearMFrom = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoStepsInfo.prototype.hasMFrom = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated int32 m_huTypes = 9;
 * @return {!Array.<number>}
 */
proto.proto.CProtoStepsInfo.prototype.getMHutypesList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 9));
};


/** @param {!Array.<number>} value */
proto.proto.CProtoStepsInfo.prototype.setMHutypesList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.CProtoStepsInfo.prototype.addMHutypes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


proto.proto.CProtoStepsInfo.prototype.clearMHutypesList = function() {
  this.setMHutypesList([]);
};


/**
 * optional CProtoRspBaoJiaoOpt m_baojiaoOpt = 10;
 * @return {?proto.proto.CProtoRspBaoJiaoOpt}
 */
proto.proto.CProtoStepsInfo.prototype.getMBaojiaoopt = function() {
  return /** @type{?proto.proto.CProtoRspBaoJiaoOpt} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoRspBaoJiaoOpt, 10));
};


/** @param {?proto.proto.CProtoRspBaoJiaoOpt|undefined} value */
proto.proto.CProtoStepsInfo.prototype.setMBaojiaoopt = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.proto.CProtoStepsInfo.prototype.clearMBaojiaoopt = function() {
  this.setMBaojiaoopt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoStepsInfo.prototype.hasMBaojiaoopt = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional int32 m_changeShift = 11;
 * @return {number}
 */
proto.proto.CProtoStepsInfo.prototype.getMChangeshift = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.proto.CProtoStepsInfo.prototype.setMChangeshift = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.proto.CProtoStepsInfo.prototype.clearMChangeshift = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoStepsInfo.prototype.hasMChangeshift = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional int32 m_dingque = 12;
 * @return {number}
 */
proto.proto.CProtoStepsInfo.prototype.getMDingque = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.proto.CProtoStepsInfo.prototype.setMDingque = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.proto.CProtoStepsInfo.prototype.clearMDingque = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoStepsInfo.prototype.hasMDingque = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspReplay = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRspReplay.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRspReplay, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspReplay.displayName = 'proto.proto.CProtoRspReplay';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRspReplay.repeatedFields_ = [5,6,10,11,12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspReplay.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspReplay.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspReplay} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspReplay.toObject = function(includeInstance, msg) {
  var f, obj = {
    mState: jspb.Message.getField(msg, 1),
    mZhuang: jspb.Message.getField(msg, 2),
    mTime: jspb.Message.getField(msg, 3),
    mUserinfoList: jspb.Message.toObjectList(msg.getMUserinfoList(),
    proto.proto.CProtoUserInfo.toObject, includeInstance),
    mOperList: jspb.Message.toObjectList(msg.getMOperList(),
    proto.proto.CProtoStepsInfo.toObject, includeInstance),
    mCurcircle: jspb.Message.getField(msg, 7),
    mMaxcircle: jspb.Message.getField(msg, 8),
    mDeskid: jspb.Message.getFieldWithDefault(msg, 9, 0),
    mKingcardList: jspb.Message.toObjectList(msg.getMKingcardList(),
    proto.proto.CProtoCard.toObject, includeInstance),
    mZhongsList: jspb.Message.getRepeatedField(msg, 11),
    mMingcardsList: jspb.Message.toObjectList(msg.getMMingcardsList(),
    proto.proto.CProtoCard.toObject, includeInstance),
    mPlaytype: (f = msg.getMPlaytype()) && proto.proto.CProtoPlayType.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspReplay}
 */
proto.proto.CProtoRspReplay.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspReplay;
  return proto.proto.CProtoRspReplay.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspReplay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspReplay}
 */
proto.proto.CProtoRspReplay.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMState(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMZhuang(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMTime(value);
      break;
    case 5:
      var value = new proto.proto.CProtoUserInfo;
      reader.readMessage(value,proto.proto.CProtoUserInfo.deserializeBinaryFromReader);
      msg.addMUserinfo(value);
      break;
    case 6:
      var value = new proto.proto.CProtoStepsInfo;
      reader.readMessage(value,proto.proto.CProtoStepsInfo.deserializeBinaryFromReader);
      msg.addMOper(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMCurcircle(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMMaxcircle(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMDeskid(value);
      break;
    case 10:
      var value = new proto.proto.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoCard.deserializeBinaryFromReader);
      msg.addMKingcard(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addMZhongs(value);
      break;
    case 12:
      var value = new proto.proto.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoCard.deserializeBinaryFromReader);
      msg.addMMingcards(value);
      break;
    case 14:
      var value = new proto.proto.CProtoPlayType;
      reader.readMessage(value,proto.proto.CProtoPlayType.deserializeBinaryFromReader);
      msg.setMPlaytype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspReplay.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspReplay.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspReplay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspReplay.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getMUserinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.proto.CProtoUserInfo.serializeBinaryToWriter
    );
  }
  f = message.getMOperList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.proto.CProtoStepsInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getMKingcardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.proto.CProtoCard.serializeBinaryToWriter
    );
  }
  f = message.getMZhongsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      11,
      f
    );
  }
  f = message.getMMingcardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.proto.CProtoCard.serializeBinaryToWriter
    );
  }
  f = message.getMPlaytype();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.proto.CProtoPlayType.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 m_state = 1;
 * @return {number}
 */
proto.proto.CProtoRspReplay.prototype.getMState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspReplay.prototype.setMState = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspReplay.prototype.clearMState = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspReplay.prototype.hasMState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_zhuang = 2;
 * @return {number}
 */
proto.proto.CProtoRspReplay.prototype.getMZhuang = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoRspReplay.prototype.setMZhuang = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoRspReplay.prototype.clearMZhuang = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspReplay.prototype.hasMZhuang = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 m_time = 3;
 * @return {number}
 */
proto.proto.CProtoRspReplay.prototype.getMTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoRspReplay.prototype.setMTime = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoRspReplay.prototype.clearMTime = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspReplay.prototype.hasMTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated CProtoUserInfo m_userInfo = 5;
 * @return {!Array.<!proto.proto.CProtoUserInfo>}
 */
proto.proto.CProtoRspReplay.prototype.getMUserinfoList = function() {
  return /** @type{!Array.<!proto.proto.CProtoUserInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoUserInfo, 5));
};


/** @param {!Array.<!proto.proto.CProtoUserInfo>} value */
proto.proto.CProtoRspReplay.prototype.setMUserinfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.proto.CProtoUserInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoUserInfo}
 */
proto.proto.CProtoRspReplay.prototype.addMUserinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.proto.CProtoUserInfo, opt_index);
};


proto.proto.CProtoRspReplay.prototype.clearMUserinfoList = function() {
  this.setMUserinfoList([]);
};


/**
 * repeated CProtoStepsInfo m_oper = 6;
 * @return {!Array.<!proto.proto.CProtoStepsInfo>}
 */
proto.proto.CProtoRspReplay.prototype.getMOperList = function() {
  return /** @type{!Array.<!proto.proto.CProtoStepsInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoStepsInfo, 6));
};


/** @param {!Array.<!proto.proto.CProtoStepsInfo>} value */
proto.proto.CProtoRspReplay.prototype.setMOperList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.proto.CProtoStepsInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoStepsInfo}
 */
proto.proto.CProtoRspReplay.prototype.addMOper = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.proto.CProtoStepsInfo, opt_index);
};


proto.proto.CProtoRspReplay.prototype.clearMOperList = function() {
  this.setMOperList([]);
};


/**
 * required int32 m_curCircle = 7;
 * @return {number}
 */
proto.proto.CProtoRspReplay.prototype.getMCurcircle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.proto.CProtoRspReplay.prototype.setMCurcircle = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.proto.CProtoRspReplay.prototype.clearMCurcircle = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspReplay.prototype.hasMCurcircle = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required int32 m_maxCircle = 8;
 * @return {number}
 */
proto.proto.CProtoRspReplay.prototype.getMMaxcircle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.proto.CProtoRspReplay.prototype.setMMaxcircle = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.proto.CProtoRspReplay.prototype.clearMMaxcircle = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspReplay.prototype.hasMMaxcircle = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 m_deskId = 9;
 * @return {number}
 */
proto.proto.CProtoRspReplay.prototype.getMDeskid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.proto.CProtoRspReplay.prototype.setMDeskid = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.proto.CProtoRspReplay.prototype.clearMDeskid = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspReplay.prototype.hasMDeskid = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated CProtoCard m_kingCard = 10;
 * @return {!Array.<!proto.proto.CProtoCard>}
 */
proto.proto.CProtoRspReplay.prototype.getMKingcardList = function() {
  return /** @type{!Array.<!proto.proto.CProtoCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoCard, 10));
};


/** @param {!Array.<!proto.proto.CProtoCard>} value */
proto.proto.CProtoRspReplay.prototype.setMKingcardList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.proto.CProtoCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoCard}
 */
proto.proto.CProtoRspReplay.prototype.addMKingcard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.proto.CProtoCard, opt_index);
};


proto.proto.CProtoRspReplay.prototype.clearMKingcardList = function() {
  this.setMKingcardList([]);
};


/**
 * repeated int32 m_zhongs = 11;
 * @return {!Array.<number>}
 */
proto.proto.CProtoRspReplay.prototype.getMZhongsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 11));
};


/** @param {!Array.<number>} value */
proto.proto.CProtoRspReplay.prototype.setMZhongsList = function(value) {
  jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.CProtoRspReplay.prototype.addMZhongs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


proto.proto.CProtoRspReplay.prototype.clearMZhongsList = function() {
  this.setMZhongsList([]);
};


/**
 * repeated CProtoCard m_mingCards = 12;
 * @return {!Array.<!proto.proto.CProtoCard>}
 */
proto.proto.CProtoRspReplay.prototype.getMMingcardsList = function() {
  return /** @type{!Array.<!proto.proto.CProtoCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoCard, 12));
};


/** @param {!Array.<!proto.proto.CProtoCard>} value */
proto.proto.CProtoRspReplay.prototype.setMMingcardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.proto.CProtoCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoCard}
 */
proto.proto.CProtoRspReplay.prototype.addMMingcards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.proto.CProtoCard, opt_index);
};


proto.proto.CProtoRspReplay.prototype.clearMMingcardsList = function() {
  this.setMMingcardsList([]);
};


/**
 * optional CProtoPlayType m_playtype = 14;
 * @return {?proto.proto.CProtoPlayType}
 */
proto.proto.CProtoRspReplay.prototype.getMPlaytype = function() {
  return /** @type{?proto.proto.CProtoPlayType} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoPlayType, 14));
};


/** @param {?proto.proto.CProtoPlayType|undefined} value */
proto.proto.CProtoRspReplay.prototype.setMPlaytype = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.proto.CProtoRspReplay.prototype.clearMPlaytype = function() {
  this.setMPlaytype(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspReplay.prototype.hasMPlaytype = function() {
  return jspb.Message.getField(this, 14) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqShareReplay = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqShareReplay, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqShareReplay.displayName = 'proto.proto.CProtoReqShareReplay';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqShareReplay.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqShareReplay.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqShareReplay} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqShareReplay.toObject = function(includeInstance, msg) {
  var f, obj = {
    mShareid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqShareReplay}
 */
proto.proto.CProtoReqShareReplay.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqShareReplay;
  return proto.proto.CProtoReqShareReplay.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqShareReplay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqShareReplay}
 */
proto.proto.CProtoReqShareReplay.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMShareid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqShareReplay.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqShareReplay.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqShareReplay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqShareReplay.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string m_shareID = 1;
 * @return {string}
 */
proto.proto.CProtoReqShareReplay.prototype.getMShareid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.CProtoReqShareReplay.prototype.setMShareid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqShareReplay.prototype.clearMShareid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqShareReplay.prototype.hasMShareid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspShareReplay = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRspShareReplay.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRspShareReplay, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspShareReplay.displayName = 'proto.proto.CProtoRspShareReplay';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRspShareReplay.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspShareReplay.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspShareReplay.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspShareReplay} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspShareReplay.toObject = function(includeInstance, msg) {
  var f, obj = {
    mErrorid: jspb.Message.getField(msg, 1),
    mDataList: jspb.Message.toObjectList(msg.getMDataList(),
    proto.proto.CProtoRspShareReplay.CProtoReplayItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspShareReplay}
 */
proto.proto.CProtoRspShareReplay.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspShareReplay;
  return proto.proto.CProtoRspShareReplay.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspShareReplay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspShareReplay}
 */
proto.proto.CProtoRspShareReplay.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMErrorid(value);
      break;
    case 2:
      var value = new proto.proto.CProtoRspShareReplay.CProtoReplayItem;
      reader.readMessage(value,proto.proto.CProtoRspShareReplay.CProtoReplayItem.deserializeBinaryFromReader);
      msg.addMData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspShareReplay.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspShareReplay.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspShareReplay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspShareReplay.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.CProtoRspShareReplay.CProtoReplayItem.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspShareReplay.CProtoReplayItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRspShareReplay.CProtoReplayItem.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRspShareReplay.CProtoReplayItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspShareReplay.CProtoReplayItem.displayName = 'proto.proto.CProtoRspShareReplay.CProtoReplayItem';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRspShareReplay.CProtoReplayItem.repeatedFields_ = [2,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspShareReplay.CProtoReplayItem.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspShareReplay.CProtoReplayItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspShareReplay.CProtoReplayItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspShareReplay.CProtoReplayItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    mTime: jspb.Message.getField(msg, 1),
    mScoreList: jspb.Message.getRepeatedField(msg, 2),
    mVideoid: jspb.Message.getField(msg, 3),
    mPkinfoList: jspb.Message.toObjectList(msg.getMPkinfoList(),
    proto.proto.CSubHistoryRoundPK.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspShareReplay.CProtoReplayItem}
 */
proto.proto.CProtoRspShareReplay.CProtoReplayItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspShareReplay.CProtoReplayItem;
  return proto.proto.CProtoRspShareReplay.CProtoReplayItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspShareReplay.CProtoReplayItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspShareReplay.CProtoReplayItem}
 */
proto.proto.CProtoRspShareReplay.CProtoReplayItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addMScore(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMVideoid(value);
      break;
    case 4:
      var value = new proto.proto.CSubHistoryRoundPK;
      reader.readMessage(value,proto.proto.CSubHistoryRoundPK.deserializeBinaryFromReader);
      msg.addMPkinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspShareReplay.CProtoReplayItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspShareReplay.CProtoReplayItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspShareReplay.CProtoReplayItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspShareReplay.CProtoReplayItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMScoreList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMPkinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.proto.CSubHistoryRoundPK.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 m_time = 1;
 * @return {number}
 */
proto.proto.CProtoRspShareReplay.CProtoReplayItem.prototype.getMTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspShareReplay.CProtoReplayItem.prototype.setMTime = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspShareReplay.CProtoReplayItem.prototype.clearMTime = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspShareReplay.CProtoReplayItem.prototype.hasMTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated int32 m_score = 2;
 * @return {!Array.<number>}
 */
proto.proto.CProtoRspShareReplay.CProtoReplayItem.prototype.getMScoreList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.proto.CProtoRspShareReplay.CProtoReplayItem.prototype.setMScoreList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.CProtoRspShareReplay.CProtoReplayItem.prototype.addMScore = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.proto.CProtoRspShareReplay.CProtoReplayItem.prototype.clearMScoreList = function() {
  this.setMScoreList([]);
};


/**
 * required string m_videoId = 3;
 * @return {string}
 */
proto.proto.CProtoRspShareReplay.CProtoReplayItem.prototype.getMVideoid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.proto.CProtoRspShareReplay.CProtoReplayItem.prototype.setMVideoid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoRspShareReplay.CProtoReplayItem.prototype.clearMVideoid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspShareReplay.CProtoReplayItem.prototype.hasMVideoid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated CSubHistoryRoundPK m_pkInfo = 4;
 * @return {!Array.<!proto.proto.CSubHistoryRoundPK>}
 */
proto.proto.CProtoRspShareReplay.CProtoReplayItem.prototype.getMPkinfoList = function() {
  return /** @type{!Array.<!proto.proto.CSubHistoryRoundPK>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CSubHistoryRoundPK, 4));
};


/** @param {!Array.<!proto.proto.CSubHistoryRoundPK>} value */
proto.proto.CProtoRspShareReplay.CProtoReplayItem.prototype.setMPkinfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.proto.CSubHistoryRoundPK=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CSubHistoryRoundPK}
 */
proto.proto.CProtoRspShareReplay.CProtoReplayItem.prototype.addMPkinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.proto.CSubHistoryRoundPK, opt_index);
};


proto.proto.CProtoRspShareReplay.CProtoReplayItem.prototype.clearMPkinfoList = function() {
  this.setMPkinfoList([]);
};


/**
 * required int32 m_errorId = 1;
 * @return {number}
 */
proto.proto.CProtoRspShareReplay.prototype.getMErrorid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspShareReplay.prototype.setMErrorid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspShareReplay.prototype.clearMErrorid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspShareReplay.prototype.hasMErrorid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated CProtoReplayItem m_data = 2;
 * @return {!Array.<!proto.proto.CProtoRspShareReplay.CProtoReplayItem>}
 */
proto.proto.CProtoRspShareReplay.prototype.getMDataList = function() {
  return /** @type{!Array.<!proto.proto.CProtoRspShareReplay.CProtoReplayItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoRspShareReplay.CProtoReplayItem, 2));
};


/** @param {!Array.<!proto.proto.CProtoRspShareReplay.CProtoReplayItem>} value */
proto.proto.CProtoRspShareReplay.prototype.setMDataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.CProtoRspShareReplay.CProtoReplayItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoRspShareReplay.CProtoReplayItem}
 */
proto.proto.CProtoRspShareReplay.prototype.addMData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.CProtoRspShareReplay.CProtoReplayItem, opt_index);
};


proto.proto.CProtoRspShareReplay.prototype.clearMDataList = function() {
  this.setMDataList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqReplaySSS = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqReplaySSS, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqReplaySSS.displayName = 'proto.proto.CProtoReqReplaySSS';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqReplaySSS.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqReplaySSS.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqReplaySSS} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqReplaySSS.toObject = function(includeInstance, msg) {
  var f, obj = {
    mVideoid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqReplaySSS}
 */
proto.proto.CProtoReqReplaySSS.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqReplaySSS;
  return proto.proto.CProtoReqReplaySSS.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqReplaySSS} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqReplaySSS}
 */
proto.proto.CProtoReqReplaySSS.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMVideoid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqReplaySSS.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqReplaySSS.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqReplaySSS} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqReplaySSS.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string m_videoId = 1;
 * @return {string}
 */
proto.proto.CProtoReqReplaySSS.prototype.getMVideoid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.CProtoReqReplaySSS.prototype.setMVideoid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqReplaySSS.prototype.clearMVideoid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqReplaySSS.prototype.hasMVideoid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspReplaySSS = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRspReplaySSS.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRspReplaySSS, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspReplaySSS.displayName = 'proto.proto.CProtoRspReplaySSS';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRspReplaySSS.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspReplaySSS.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspReplaySSS.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspReplaySSS} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspReplaySSS.toObject = function(includeInstance, msg) {
  var f, obj = {
    mUsers: (f = msg.getMUsers()) && proto.proto.CProtoRspReplaySSS.CProtoUsers.toObject(includeInstance, f),
    mItemsList: jspb.Message.toObjectList(msg.getMItemsList(),
    proto.proto.CProtoRspReplaySSS.CProtoReplayInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspReplaySSS}
 */
proto.proto.CProtoRspReplaySSS.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspReplaySSS;
  return proto.proto.CProtoRspReplaySSS.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspReplaySSS} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspReplaySSS}
 */
proto.proto.CProtoRspReplaySSS.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.CProtoRspReplaySSS.CProtoUsers;
      reader.readMessage(value,proto.proto.CProtoRspReplaySSS.CProtoUsers.deserializeBinaryFromReader);
      msg.setMUsers(value);
      break;
    case 2:
      var value = new proto.proto.CProtoRspReplaySSS.CProtoReplayInfo;
      reader.readMessage(value,proto.proto.CProtoRspReplaySSS.CProtoReplayInfo.deserializeBinaryFromReader);
      msg.addMItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspReplaySSS.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspReplaySSS.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspReplaySSS} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspReplaySSS.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMUsers();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.CProtoRspReplaySSS.CProtoUsers.serializeBinaryToWriter
    );
  }
  f = message.getMItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.CProtoRspReplaySSS.CProtoReplayInfo.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.displayName = 'proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.repeatedFields_ = [3,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    mUid: jspb.Message.getField(msg, 1),
    mScore: jspb.Message.getField(msg, 2),
    mPokersList: jspb.Message.getRepeatedField(msg, 3),
    mNormalPokerTypesList: jspb.Message.getRepeatedField(msg, 5),
    mSpecialPokerType: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo}
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo;
  return proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo}
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMScore(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addMPokers(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addMNormalPokerTypes(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMSpecialPokerType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMPokersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getMNormalPokerTypesList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * required int32 m_uid = 1;
 * @return {number}
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.prototype.getMUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.prototype.setMUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.prototype.clearMUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.prototype.hasMUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_score = 2;
 * @return {number}
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.prototype.getMScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.prototype.setMScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.prototype.clearMScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.prototype.hasMScore = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string m_pokers = 3;
 * @return {!Array.<string>}
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.prototype.getMPokersList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<string>} value */
proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.prototype.setMPokersList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.prototype.addMPokers = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.prototype.clearMPokersList = function() {
  this.setMPokersList([]);
};


/**
 * repeated int32 m_normal_poker_types = 5;
 * @return {!Array.<number>}
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.prototype.getMNormalPokerTypesList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array.<number>} value */
proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.prototype.setMNormalPokerTypesList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.prototype.addMNormalPokerTypes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.prototype.clearMNormalPokerTypesList = function() {
  this.setMNormalPokerTypesList([]);
};


/**
 * optional int32 m_special_poker_type = 6;
 * @return {number}
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.prototype.getMSpecialPokerType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.prototype.setMSpecialPokerType = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.prototype.clearMSpecialPokerType = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.prototype.hasMSpecialPokerType = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRspReplaySSS.CProtoReplayInfo.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRspReplaySSS.CProtoReplayInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspReplaySSS.CProtoReplayInfo.displayName = 'proto.proto.CProtoRspReplaySSS.CProtoReplayInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspReplaySSS.CProtoReplayInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspReplaySSS.CProtoReplayInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    mRoundId: jspb.Message.getField(msg, 1),
    mRoundInfoList: jspb.Message.toObjectList(msg.getMRoundInfoList(),
    proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.toObject, includeInstance),
    mTime: jspb.Message.getField(msg, 3),
    mRoundMax: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspReplaySSS.CProtoReplayInfo}
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspReplaySSS.CProtoReplayInfo;
  return proto.proto.CProtoRspReplaySSS.CProtoReplayInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspReplaySSS.CProtoReplayInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspReplaySSS.CProtoReplayInfo}
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMRoundId(value);
      break;
    case 2:
      var value = new proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo;
      reader.readMessage(value,proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.deserializeBinaryFromReader);
      msg.addMRoundInfo(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMRoundMax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspReplaySSS.CProtoReplayInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspReplaySSS.CProtoReplayInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMRoundInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * required int32 m_round_id = 1;
 * @return {number}
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayInfo.prototype.getMRoundId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspReplaySSS.CProtoReplayInfo.prototype.setMRoundId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspReplaySSS.CProtoReplayInfo.prototype.clearMRoundId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayInfo.prototype.hasMRoundId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated CProtoReplayPlayerInfo m_round_info = 2;
 * @return {!Array.<!proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo>}
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayInfo.prototype.getMRoundInfoList = function() {
  return /** @type{!Array.<!proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo, 2));
};


/** @param {!Array.<!proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo>} value */
proto.proto.CProtoRspReplaySSS.CProtoReplayInfo.prototype.setMRoundInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo}
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayInfo.prototype.addMRoundInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.CProtoRspReplaySSS.CProtoReplayPlayerInfo, opt_index);
};


proto.proto.CProtoRspReplaySSS.CProtoReplayInfo.prototype.clearMRoundInfoList = function() {
  this.setMRoundInfoList([]);
};


/**
 * required int32 m_time = 3;
 * @return {number}
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayInfo.prototype.getMTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoRspReplaySSS.CProtoReplayInfo.prototype.setMTime = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoRspReplaySSS.CProtoReplayInfo.prototype.clearMTime = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayInfo.prototype.hasMTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 m_round_max = 4;
 * @return {number}
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayInfo.prototype.getMRoundMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.CProtoRspReplaySSS.CProtoReplayInfo.prototype.setMRoundMax = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoRspReplaySSS.CProtoReplayInfo.prototype.clearMRoundMax = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspReplaySSS.CProtoReplayInfo.prototype.hasMRoundMax = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspReplaySSS.CProtoUserInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRspReplaySSS.CProtoUserInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspReplaySSS.CProtoUserInfo.displayName = 'proto.proto.CProtoRspReplaySSS.CProtoUserInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspReplaySSS.CProtoUserInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspReplaySSS.CProtoUserInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspReplaySSS.CProtoUserInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspReplaySSS.CProtoUserInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    mUid: jspb.Message.getField(msg, 1),
    mNickname: jspb.Message.getField(msg, 2),
    mTotalScore: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspReplaySSS.CProtoUserInfo}
 */
proto.proto.CProtoRspReplaySSS.CProtoUserInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspReplaySSS.CProtoUserInfo;
  return proto.proto.CProtoRspReplaySSS.CProtoUserInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspReplaySSS.CProtoUserInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspReplaySSS.CProtoUserInfo}
 */
proto.proto.CProtoRspReplaySSS.CProtoUserInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMUid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMNickname(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMTotalScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspReplaySSS.CProtoUserInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspReplaySSS.CProtoUserInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspReplaySSS.CProtoUserInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspReplaySSS.CProtoUserInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required int32 m_uid = 1;
 * @return {number}
 */
proto.proto.CProtoRspReplaySSS.CProtoUserInfo.prototype.getMUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspReplaySSS.CProtoUserInfo.prototype.setMUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspReplaySSS.CProtoUserInfo.prototype.clearMUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspReplaySSS.CProtoUserInfo.prototype.hasMUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string m_nickname = 2;
 * @return {string}
 */
proto.proto.CProtoRspReplaySSS.CProtoUserInfo.prototype.getMNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.CProtoRspReplaySSS.CProtoUserInfo.prototype.setMNickname = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoRspReplaySSS.CProtoUserInfo.prototype.clearMNickname = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspReplaySSS.CProtoUserInfo.prototype.hasMNickname = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 m_total_score = 3;
 * @return {number}
 */
proto.proto.CProtoRspReplaySSS.CProtoUserInfo.prototype.getMTotalScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoRspReplaySSS.CProtoUserInfo.prototype.setMTotalScore = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoRspReplaySSS.CProtoUserInfo.prototype.clearMTotalScore = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspReplaySSS.CProtoUserInfo.prototype.hasMTotalScore = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspReplaySSS.CProtoUsers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRspReplaySSS.CProtoUsers.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRspReplaySSS.CProtoUsers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspReplaySSS.CProtoUsers.displayName = 'proto.proto.CProtoRspReplaySSS.CProtoUsers';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRspReplaySSS.CProtoUsers.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspReplaySSS.CProtoUsers.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspReplaySSS.CProtoUsers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspReplaySSS.CProtoUsers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspReplaySSS.CProtoUsers.toObject = function(includeInstance, msg) {
  var f, obj = {
    mUserinfoList: jspb.Message.toObjectList(msg.getMUserinfoList(),
    proto.proto.CProtoRspReplaySSS.CProtoUserInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspReplaySSS.CProtoUsers}
 */
proto.proto.CProtoRspReplaySSS.CProtoUsers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspReplaySSS.CProtoUsers;
  return proto.proto.CProtoRspReplaySSS.CProtoUsers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspReplaySSS.CProtoUsers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspReplaySSS.CProtoUsers}
 */
proto.proto.CProtoRspReplaySSS.CProtoUsers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.CProtoRspReplaySSS.CProtoUserInfo;
      reader.readMessage(value,proto.proto.CProtoRspReplaySSS.CProtoUserInfo.deserializeBinaryFromReader);
      msg.addMUserinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspReplaySSS.CProtoUsers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspReplaySSS.CProtoUsers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspReplaySSS.CProtoUsers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspReplaySSS.CProtoUsers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMUserinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.CProtoRspReplaySSS.CProtoUserInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CProtoUserInfo m_userinfo = 1;
 * @return {!Array.<!proto.proto.CProtoRspReplaySSS.CProtoUserInfo>}
 */
proto.proto.CProtoRspReplaySSS.CProtoUsers.prototype.getMUserinfoList = function() {
  return /** @type{!Array.<!proto.proto.CProtoRspReplaySSS.CProtoUserInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoRspReplaySSS.CProtoUserInfo, 1));
};


/** @param {!Array.<!proto.proto.CProtoRspReplaySSS.CProtoUserInfo>} value */
proto.proto.CProtoRspReplaySSS.CProtoUsers.prototype.setMUserinfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.CProtoRspReplaySSS.CProtoUserInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoRspReplaySSS.CProtoUserInfo}
 */
proto.proto.CProtoRspReplaySSS.CProtoUsers.prototype.addMUserinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.CProtoRspReplaySSS.CProtoUserInfo, opt_index);
};


proto.proto.CProtoRspReplaySSS.CProtoUsers.prototype.clearMUserinfoList = function() {
  this.setMUserinfoList([]);
};


/**
 * required CProtoUsers m_users = 1;
 * @return {!proto.proto.CProtoRspReplaySSS.CProtoUsers}
 */
proto.proto.CProtoRspReplaySSS.prototype.getMUsers = function() {
  return /** @type{!proto.proto.CProtoRspReplaySSS.CProtoUsers} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoRspReplaySSS.CProtoUsers, 1, 1));
};


/** @param {!proto.proto.CProtoRspReplaySSS.CProtoUsers} value */
proto.proto.CProtoRspReplaySSS.prototype.setMUsers = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.CProtoRspReplaySSS.prototype.clearMUsers = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspReplaySSS.prototype.hasMUsers = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated CProtoReplayInfo m_items = 2;
 * @return {!Array.<!proto.proto.CProtoRspReplaySSS.CProtoReplayInfo>}
 */
proto.proto.CProtoRspReplaySSS.prototype.getMItemsList = function() {
  return /** @type{!Array.<!proto.proto.CProtoRspReplaySSS.CProtoReplayInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoRspReplaySSS.CProtoReplayInfo, 2));
};


/** @param {!Array.<!proto.proto.CProtoRspReplaySSS.CProtoReplayInfo>} value */
proto.proto.CProtoRspReplaySSS.prototype.setMItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.CProtoRspReplaySSS.CProtoReplayInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoRspReplaySSS.CProtoReplayInfo}
 */
proto.proto.CProtoRspReplaySSS.prototype.addMItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.CProtoRspReplaySSS.CProtoReplayInfo, opt_index);
};


proto.proto.CProtoRspReplaySSS.prototype.clearMItemsList = function() {
  this.setMItemsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoGameBreif = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoGameBreif.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoGameBreif, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoGameBreif.displayName = 'proto.proto.CProtoGameBreif';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoGameBreif.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoGameBreif.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoGameBreif.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoGameBreif} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoGameBreif.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.proto.CProtoGameBreif.CProtoItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoGameBreif}
 */
proto.proto.CProtoGameBreif.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoGameBreif;
  return proto.proto.CProtoGameBreif.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoGameBreif} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoGameBreif}
 */
proto.proto.CProtoGameBreif.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.CProtoGameBreif.CProtoItem;
      reader.readMessage(value,proto.proto.CProtoGameBreif.CProtoItem.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoGameBreif.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoGameBreif.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoGameBreif} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoGameBreif.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.CProtoGameBreif.CProtoItem.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoGameBreif.CProtoItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoGameBreif.CProtoItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoGameBreif.CProtoItem.displayName = 'proto.proto.CProtoGameBreif.CProtoItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoGameBreif.CProtoItem.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoGameBreif.CProtoItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoGameBreif.CProtoItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoGameBreif.CProtoItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    mid: jspb.Message.getField(msg, 1),
    score: jspb.Message.getField(msg, 2),
    mPkinfo: (f = msg.getMPkinfo()) && proto.proto.CSubHistoryRoundPK.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoGameBreif.CProtoItem}
 */
proto.proto.CProtoGameBreif.CProtoItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoGameBreif.CProtoItem;
  return proto.proto.CProtoGameBreif.CProtoItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoGameBreif.CProtoItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoGameBreif.CProtoItem}
 */
proto.proto.CProtoGameBreif.CProtoItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    case 3:
      var value = new proto.proto.CSubHistoryRoundPK;
      reader.readMessage(value,proto.proto.CSubHistoryRoundPK.deserializeBinaryFromReader);
      msg.setMPkinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoGameBreif.CProtoItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoGameBreif.CProtoItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoGameBreif.CProtoItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoGameBreif.CProtoItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMPkinfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.CSubHistoryRoundPK.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 mid = 1;
 * @return {number}
 */
proto.proto.CProtoGameBreif.CProtoItem.prototype.getMid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoGameBreif.CProtoItem.prototype.setMid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoGameBreif.CProtoItem.prototype.clearMid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoGameBreif.CProtoItem.prototype.hasMid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 score = 2;
 * @return {number}
 */
proto.proto.CProtoGameBreif.CProtoItem.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoGameBreif.CProtoItem.prototype.setScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoGameBreif.CProtoItem.prototype.clearScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoGameBreif.CProtoItem.prototype.hasScore = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CSubHistoryRoundPK m_pkinfo = 3;
 * @return {?proto.proto.CSubHistoryRoundPK}
 */
proto.proto.CProtoGameBreif.CProtoItem.prototype.getMPkinfo = function() {
  return /** @type{?proto.proto.CSubHistoryRoundPK} */ (
    jspb.Message.getWrapperField(this, proto.proto.CSubHistoryRoundPK, 3));
};


/** @param {?proto.proto.CSubHistoryRoundPK|undefined} value */
proto.proto.CProtoGameBreif.CProtoItem.prototype.setMPkinfo = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.proto.CProtoGameBreif.CProtoItem.prototype.clearMPkinfo = function() {
  this.setMPkinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoGameBreif.CProtoItem.prototype.hasMPkinfo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated CProtoItem items = 1;
 * @return {!Array.<!proto.proto.CProtoGameBreif.CProtoItem>}
 */
proto.proto.CProtoGameBreif.prototype.getItemsList = function() {
  return /** @type{!Array.<!proto.proto.CProtoGameBreif.CProtoItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoGameBreif.CProtoItem, 1));
};


/** @param {!Array.<!proto.proto.CProtoGameBreif.CProtoItem>} value */
proto.proto.CProtoGameBreif.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.CProtoGameBreif.CProtoItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoGameBreif.CProtoItem}
 */
proto.proto.CProtoGameBreif.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.CProtoGameBreif.CProtoItem, opt_index);
};


proto.proto.CProtoGameBreif.prototype.clearItemsList = function() {
  this.setItemsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqShareBtn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqShareBtn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqShareBtn.displayName = 'proto.proto.CProtoReqShareBtn';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqShareBtn.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqShareBtn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqShareBtn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqShareBtn.toObject = function(includeInstance, msg) {
  var f, obj = {
    mVideoid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqShareBtn}
 */
proto.proto.CProtoReqShareBtn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqShareBtn;
  return proto.proto.CProtoReqShareBtn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqShareBtn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqShareBtn}
 */
proto.proto.CProtoReqShareBtn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMVideoid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqShareBtn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqShareBtn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqShareBtn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqShareBtn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string m_videoId = 1;
 * @return {string}
 */
proto.proto.CProtoReqShareBtn.prototype.getMVideoid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.CProtoReqShareBtn.prototype.setMVideoid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqShareBtn.prototype.clearMVideoid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqShareBtn.prototype.hasMVideoid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspShareBtn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRspShareBtn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspShareBtn.displayName = 'proto.proto.CProtoRspShareBtn';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspShareBtn.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspShareBtn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspShareBtn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspShareBtn.toObject = function(includeInstance, msg) {
  var f, obj = {
    mErrorid: jspb.Message.getField(msg, 1),
    mShareid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspShareBtn}
 */
proto.proto.CProtoRspShareBtn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspShareBtn;
  return proto.proto.CProtoRspShareBtn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspShareBtn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspShareBtn}
 */
proto.proto.CProtoRspShareBtn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMErrorid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMShareid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspShareBtn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspShareBtn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspShareBtn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspShareBtn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required int32 m_errorId = 1;
 * @return {number}
 */
proto.proto.CProtoRspShareBtn.prototype.getMErrorid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspShareBtn.prototype.setMErrorid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspShareBtn.prototype.clearMErrorid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspShareBtn.prototype.hasMErrorid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string m_shareId = 2;
 * @return {string}
 */
proto.proto.CProtoRspShareBtn.prototype.getMShareid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.CProtoRspShareBtn.prototype.setMShareid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoRspShareBtn.prototype.clearMShareid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspShareBtn.prototype.hasMShareid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspAfterGANG = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRspAfterGANG.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRspAfterGANG, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspAfterGANG.displayName = 'proto.proto.CProtoRspAfterGANG';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRspAfterGANG.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspAfterGANG.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspAfterGANG.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspAfterGANG} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspAfterGANG.toObject = function(includeInstance, msg) {
  var f, obj = {
    mPos: jspb.Message.getField(msg, 1),
    mGang: (f = msg.getMGang()) && proto.proto.CProtoCard.toObject(includeInstance, f),
    mCardList: jspb.Message.toObjectList(msg.getMCardList(),
    proto.proto.CProtoRspAfterGANG.CProtoGangItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspAfterGANG}
 */
proto.proto.CProtoRspAfterGANG.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspAfterGANG;
  return proto.proto.CProtoRspAfterGANG.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspAfterGANG} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspAfterGANG}
 */
proto.proto.CProtoRspAfterGANG.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMPos(value);
      break;
    case 2:
      var value = new proto.proto.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoCard.deserializeBinaryFromReader);
      msg.setMGang(value);
      break;
    case 3:
      var value = new proto.proto.CProtoRspAfterGANG.CProtoGangItem;
      reader.readMessage(value,proto.proto.CProtoRspAfterGANG.CProtoGangItem.deserializeBinaryFromReader);
      msg.addMCard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspAfterGANG.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspAfterGANG.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspAfterGANG} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspAfterGANG.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMGang();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.CProtoCard.serializeBinaryToWriter
    );
  }
  f = message.getMCardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.proto.CProtoRspAfterGANG.CProtoGangItem.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspAfterGANG.CProtoGangItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRspAfterGANG.CProtoGangItem.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRspAfterGANG.CProtoGangItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspAfterGANG.CProtoGangItem.displayName = 'proto.proto.CProtoRspAfterGANG.CProtoGangItem';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRspAfterGANG.CProtoGangItem.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspAfterGANG.CProtoGangItem.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspAfterGANG.CProtoGangItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspAfterGANG.CProtoGangItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspAfterGANG.CProtoGangItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    targetCard: (f = msg.getTargetCard()) && proto.proto.CProtoCard.toObject(includeInstance, f),
    thinksList: jspb.Message.toObjectList(msg.getThinksList(),
    proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspAfterGANG.CProtoGangItem}
 */
proto.proto.CProtoRspAfterGANG.CProtoGangItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspAfterGANG.CProtoGangItem;
  return proto.proto.CProtoRspAfterGANG.CProtoGangItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspAfterGANG.CProtoGangItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspAfterGANG.CProtoGangItem}
 */
proto.proto.CProtoRspAfterGANG.CProtoGangItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoCard.deserializeBinaryFromReader);
      msg.setTargetCard(value);
      break;
    case 2:
      var value = new proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem;
      reader.readMessage(value,proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem.deserializeBinaryFromReader);
      msg.addThinks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspAfterGANG.CProtoGangItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspAfterGANG.CProtoGangItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspAfterGANG.CProtoGangItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspAfterGANG.CProtoGangItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTargetCard();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.CProtoCard.serializeBinaryToWriter
    );
  }
  f = message.getThinksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem.displayName = 'proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    mType: jspb.Message.getField(msg, 1),
    mCardlistList: jspb.Message.toObjectList(msg.getMCardlistList(),
    proto.proto.CProtoCard.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem}
 */
proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem;
  return proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem}
 */
proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMType(value);
      break;
    case 2:
      var value = new proto.proto.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoCard.deserializeBinaryFromReader);
      msg.addMCardlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMCardlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.CProtoCard.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 m_type = 1;
 * @return {number}
 */
proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem.prototype.getMType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem.prototype.setMType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem.prototype.clearMType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem.prototype.hasMType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated CProtoCard m_cardList = 2;
 * @return {!Array.<!proto.proto.CProtoCard>}
 */
proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem.prototype.getMCardlistList = function() {
  return /** @type{!Array.<!proto.proto.CProtoCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoCard, 2));
};


/** @param {!Array.<!proto.proto.CProtoCard>} value */
proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem.prototype.setMCardlistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.CProtoCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoCard}
 */
proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem.prototype.addMCardlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.CProtoCard, opt_index);
};


proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem.prototype.clearMCardlistList = function() {
  this.setMCardlistList([]);
};


/**
 * required CProtoCard target_card = 1;
 * @return {!proto.proto.CProtoCard}
 */
proto.proto.CProtoRspAfterGANG.CProtoGangItem.prototype.getTargetCard = function() {
  return /** @type{!proto.proto.CProtoCard} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoCard, 1, 1));
};


/** @param {!proto.proto.CProtoCard} value */
proto.proto.CProtoRspAfterGANG.CProtoGangItem.prototype.setTargetCard = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.CProtoRspAfterGANG.CProtoGangItem.prototype.clearTargetCard = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspAfterGANG.CProtoGangItem.prototype.hasTargetCard = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated CProtoThinkItem thinks = 2;
 * @return {!Array.<!proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem>}
 */
proto.proto.CProtoRspAfterGANG.CProtoGangItem.prototype.getThinksList = function() {
  return /** @type{!Array.<!proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem, 2));
};


/** @param {!Array.<!proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem>} value */
proto.proto.CProtoRspAfterGANG.CProtoGangItem.prototype.setThinksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem}
 */
proto.proto.CProtoRspAfterGANG.CProtoGangItem.prototype.addThinks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.CProtoRspAfterGANG.CProtoGangItem.CProtoThinkItem, opt_index);
};


proto.proto.CProtoRspAfterGANG.CProtoGangItem.prototype.clearThinksList = function() {
  this.setThinksList([]);
};


/**
 * required int32 m_pos = 1;
 * @return {number}
 */
proto.proto.CProtoRspAfterGANG.prototype.getMPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspAfterGANG.prototype.setMPos = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspAfterGANG.prototype.clearMPos = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspAfterGANG.prototype.hasMPos = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required CProtoCard m_gang = 2;
 * @return {!proto.proto.CProtoCard}
 */
proto.proto.CProtoRspAfterGANG.prototype.getMGang = function() {
  return /** @type{!proto.proto.CProtoCard} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoCard, 2, 1));
};


/** @param {!proto.proto.CProtoCard} value */
proto.proto.CProtoRspAfterGANG.prototype.setMGang = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.proto.CProtoRspAfterGANG.prototype.clearMGang = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspAfterGANG.prototype.hasMGang = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated CProtoGangItem m_card = 3;
 * @return {!Array.<!proto.proto.CProtoRspAfterGANG.CProtoGangItem>}
 */
proto.proto.CProtoRspAfterGANG.prototype.getMCardList = function() {
  return /** @type{!Array.<!proto.proto.CProtoRspAfterGANG.CProtoGangItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoRspAfterGANG.CProtoGangItem, 3));
};


/** @param {!Array.<!proto.proto.CProtoRspAfterGANG.CProtoGangItem>} value */
proto.proto.CProtoRspAfterGANG.prototype.setMCardList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.proto.CProtoRspAfterGANG.CProtoGangItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoRspAfterGANG.CProtoGangItem}
 */
proto.proto.CProtoRspAfterGANG.prototype.addMCard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.proto.CProtoRspAfterGANG.CProtoGangItem, opt_index);
};


proto.proto.CProtoRspAfterGANG.prototype.clearMCardList = function() {
  this.setMCardList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqHistoryRound = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqHistoryRound, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqHistoryRound.displayName = 'proto.proto.CProtoReqHistoryRound';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqHistoryRound.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqHistoryRound.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqHistoryRound} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqHistoryRound.toObject = function(includeInstance, msg) {
  var f, obj = {
    mId: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqHistoryRound}
 */
proto.proto.CProtoReqHistoryRound.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqHistoryRound;
  return proto.proto.CProtoReqHistoryRound.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqHistoryRound} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqHistoryRound}
 */
proto.proto.CProtoReqHistoryRound.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqHistoryRound.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqHistoryRound.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqHistoryRound} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqHistoryRound.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string m_id = 1;
 * @return {string}
 */
proto.proto.CProtoReqHistoryRound.prototype.getMId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.CProtoReqHistoryRound.prototype.setMId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqHistoryRound.prototype.clearMId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqHistoryRound.prototype.hasMId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CSubHistoryRoundPK = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CSubHistoryRoundPK.repeatedFields_, null);
};
goog.inherits(proto.proto.CSubHistoryRoundPK, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CSubHistoryRoundPK.displayName = 'proto.proto.CSubHistoryRoundPK';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CSubHistoryRoundPK.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CSubHistoryRoundPK.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CSubHistoryRoundPK.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CSubHistoryRoundPK} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CSubHistoryRoundPK.toObject = function(includeInstance, msg) {
  var f, obj = {
    mIrank: jspb.Message.getField(msg, 1),
    mScardList: jspb.Message.getRepeatedField(msg, 2),
    mIlose: jspb.Message.getField(msg, 3),
    mBdeal: jspb.Message.getField(msg, 4),
    mBlandlord: jspb.Message.getField(msg, 5),
    mBspring: jspb.Message.getField(msg, 6),
    mRate: jspb.Message.getField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CSubHistoryRoundPK}
 */
proto.proto.CSubHistoryRoundPK.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CSubHistoryRoundPK;
  return proto.proto.CSubHistoryRoundPK.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CSubHistoryRoundPK} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CSubHistoryRoundPK}
 */
proto.proto.CSubHistoryRoundPK.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMIrank(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addMScard(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMIlose(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMBdeal(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMBlandlord(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMBspring(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CSubHistoryRoundPK.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CSubHistoryRoundPK.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CSubHistoryRoundPK} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CSubHistoryRoundPK.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMScardList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional int32 m_iRank = 1;
 * @return {number}
 */
proto.proto.CSubHistoryRoundPK.prototype.getMIrank = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CSubHistoryRoundPK.prototype.setMIrank = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CSubHistoryRoundPK.prototype.clearMIrank = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CSubHistoryRoundPK.prototype.hasMIrank = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string m_sCard = 2;
 * @return {!Array.<string>}
 */
proto.proto.CSubHistoryRoundPK.prototype.getMScardList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<string>} value */
proto.proto.CSubHistoryRoundPK.prototype.setMScardList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.proto.CSubHistoryRoundPK.prototype.addMScard = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.proto.CSubHistoryRoundPK.prototype.clearMScardList = function() {
  this.setMScardList([]);
};


/**
 * optional int32 m_iLose = 3;
 * @return {number}
 */
proto.proto.CSubHistoryRoundPK.prototype.getMIlose = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CSubHistoryRoundPK.prototype.setMIlose = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CSubHistoryRoundPK.prototype.clearMIlose = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CSubHistoryRoundPK.prototype.hasMIlose = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool m_bDeal = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CSubHistoryRoundPK.prototype.getMBdeal = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.proto.CSubHistoryRoundPK.prototype.setMBdeal = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CSubHistoryRoundPK.prototype.clearMBdeal = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CSubHistoryRoundPK.prototype.hasMBdeal = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool m_bLandLord = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CSubHistoryRoundPK.prototype.getMBlandlord = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.proto.CSubHistoryRoundPK.prototype.setMBlandlord = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.proto.CSubHistoryRoundPK.prototype.clearMBlandlord = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CSubHistoryRoundPK.prototype.hasMBlandlord = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool m_bSpring = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CSubHistoryRoundPK.prototype.getMBspring = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.proto.CSubHistoryRoundPK.prototype.setMBspring = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.proto.CSubHistoryRoundPK.prototype.clearMBspring = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CSubHistoryRoundPK.prototype.hasMBspring = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 m_rate = 7;
 * @return {number}
 */
proto.proto.CSubHistoryRoundPK.prototype.getMRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.proto.CSubHistoryRoundPK.prototype.setMRate = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.proto.CSubHistoryRoundPK.prototype.clearMRate = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CSubHistoryRoundPK.prototype.hasMRate = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspHistoryRound = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRspHistoryRound.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRspHistoryRound, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspHistoryRound.displayName = 'proto.proto.CProtoRspHistoryRound';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRspHistoryRound.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspHistoryRound.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspHistoryRound.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspHistoryRound} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspHistoryRound.toObject = function(includeInstance, msg) {
  var f, obj = {
    mMatchList: jspb.Message.toObjectList(msg.getMMatchList(),
    proto.proto.CProtoRspHistoryRound.CProtoMatchData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspHistoryRound}
 */
proto.proto.CProtoRspHistoryRound.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspHistoryRound;
  return proto.proto.CProtoRspHistoryRound.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspHistoryRound} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspHistoryRound}
 */
proto.proto.CProtoRspHistoryRound.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.CProtoRspHistoryRound.CProtoMatchData;
      reader.readMessage(value,proto.proto.CProtoRspHistoryRound.CProtoMatchData.deserializeBinaryFromReader);
      msg.addMMatch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspHistoryRound.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspHistoryRound.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspHistoryRound} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspHistoryRound.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMMatchList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.CProtoRspHistoryRound.CProtoMatchData.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspHistoryRound.CProtoMatchData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRspHistoryRound.CProtoMatchData.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRspHistoryRound.CProtoMatchData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspHistoryRound.CProtoMatchData.displayName = 'proto.proto.CProtoRspHistoryRound.CProtoMatchData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRspHistoryRound.CProtoMatchData.repeatedFields_ = [2,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspHistoryRound.CProtoMatchData.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspHistoryRound.CProtoMatchData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspHistoryRound.CProtoMatchData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspHistoryRound.CProtoMatchData.toObject = function(includeInstance, msg) {
  var f, obj = {
    mTime: jspb.Message.getField(msg, 1),
    mScoreList: jspb.Message.getRepeatedField(msg, 2),
    mVideoid: jspb.Message.getField(msg, 3),
    mPkinfoList: jspb.Message.toObjectList(msg.getMPkinfoList(),
    proto.proto.CSubHistoryRoundPK.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspHistoryRound.CProtoMatchData}
 */
proto.proto.CProtoRspHistoryRound.CProtoMatchData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspHistoryRound.CProtoMatchData;
  return proto.proto.CProtoRspHistoryRound.CProtoMatchData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspHistoryRound.CProtoMatchData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspHistoryRound.CProtoMatchData}
 */
proto.proto.CProtoRspHistoryRound.CProtoMatchData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addMScore(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMVideoid(value);
      break;
    case 4:
      var value = new proto.proto.CSubHistoryRoundPK;
      reader.readMessage(value,proto.proto.CSubHistoryRoundPK.deserializeBinaryFromReader);
      msg.addMPkinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspHistoryRound.CProtoMatchData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspHistoryRound.CProtoMatchData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspHistoryRound.CProtoMatchData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspHistoryRound.CProtoMatchData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMScoreList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMPkinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.proto.CSubHistoryRoundPK.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 m_time = 1;
 * @return {number}
 */
proto.proto.CProtoRspHistoryRound.CProtoMatchData.prototype.getMTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspHistoryRound.CProtoMatchData.prototype.setMTime = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspHistoryRound.CProtoMatchData.prototype.clearMTime = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspHistoryRound.CProtoMatchData.prototype.hasMTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated int32 m_score = 2;
 * @return {!Array.<number>}
 */
proto.proto.CProtoRspHistoryRound.CProtoMatchData.prototype.getMScoreList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.proto.CProtoRspHistoryRound.CProtoMatchData.prototype.setMScoreList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.CProtoRspHistoryRound.CProtoMatchData.prototype.addMScore = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.proto.CProtoRspHistoryRound.CProtoMatchData.prototype.clearMScoreList = function() {
  this.setMScoreList([]);
};


/**
 * required string m_videoId = 3;
 * @return {string}
 */
proto.proto.CProtoRspHistoryRound.CProtoMatchData.prototype.getMVideoid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.proto.CProtoRspHistoryRound.CProtoMatchData.prototype.setMVideoid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoRspHistoryRound.CProtoMatchData.prototype.clearMVideoid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspHistoryRound.CProtoMatchData.prototype.hasMVideoid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated CSubHistoryRoundPK m_pkInfo = 4;
 * @return {!Array.<!proto.proto.CSubHistoryRoundPK>}
 */
proto.proto.CProtoRspHistoryRound.CProtoMatchData.prototype.getMPkinfoList = function() {
  return /** @type{!Array.<!proto.proto.CSubHistoryRoundPK>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CSubHistoryRoundPK, 4));
};


/** @param {!Array.<!proto.proto.CSubHistoryRoundPK>} value */
proto.proto.CProtoRspHistoryRound.CProtoMatchData.prototype.setMPkinfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.proto.CSubHistoryRoundPK=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CSubHistoryRoundPK}
 */
proto.proto.CProtoRspHistoryRound.CProtoMatchData.prototype.addMPkinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.proto.CSubHistoryRoundPK, opt_index);
};


proto.proto.CProtoRspHistoryRound.CProtoMatchData.prototype.clearMPkinfoList = function() {
  this.setMPkinfoList([]);
};


/**
 * repeated CProtoMatchData m_match = 1;
 * @return {!Array.<!proto.proto.CProtoRspHistoryRound.CProtoMatchData>}
 */
proto.proto.CProtoRspHistoryRound.prototype.getMMatchList = function() {
  return /** @type{!Array.<!proto.proto.CProtoRspHistoryRound.CProtoMatchData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoRspHistoryRound.CProtoMatchData, 1));
};


/** @param {!Array.<!proto.proto.CProtoRspHistoryRound.CProtoMatchData>} value */
proto.proto.CProtoRspHistoryRound.prototype.setMMatchList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.CProtoRspHistoryRound.CProtoMatchData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoRspHistoryRound.CProtoMatchData}
 */
proto.proto.CProtoRspHistoryRound.prototype.addMMatch = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.CProtoRspHistoryRound.CProtoMatchData, opt_index);
};


proto.proto.CProtoRspHistoryRound.prototype.clearMMatchList = function() {
  this.setMMatchList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqTransferCard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqTransferCard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqTransferCard.displayName = 'proto.proto.CProtoReqTransferCard';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqTransferCard.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqTransferCard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqTransferCard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqTransferCard.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: jspb.Message.getField(msg, 1),
    count: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqTransferCard}
 */
proto.proto.CProtoReqTransferCard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqTransferCard;
  return proto.proto.CProtoReqTransferCard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqTransferCard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqTransferCard}
 */
proto.proto.CProtoReqTransferCard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTarget(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqTransferCard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqTransferCard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqTransferCard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqTransferCard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 target = 1;
 * @return {number}
 */
proto.proto.CProtoReqTransferCard.prototype.getTarget = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoReqTransferCard.prototype.setTarget = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqTransferCard.prototype.clearTarget = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqTransferCard.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 count = 2;
 * @return {number}
 */
proto.proto.CProtoReqTransferCard.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoReqTransferCard.prototype.setCount = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoReqTransferCard.prototype.clearCount = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqTransferCard.prototype.hasCount = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspTransferCard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRspTransferCard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspTransferCard.displayName = 'proto.proto.CProtoRspTransferCard';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspTransferCard.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspTransferCard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspTransferCard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspTransferCard.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getField(msg, 1),
    remainCard: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspTransferCard}
 */
proto.proto.CProtoRspTransferCard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspTransferCard;
  return proto.proto.CProtoRspTransferCard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspTransferCard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspTransferCard}
 */
proto.proto.CProtoRspTransferCard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRemainCard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspTransferCard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspTransferCard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspTransferCard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspTransferCard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 error = 1;
 * @return {number}
 */
proto.proto.CProtoRspTransferCard.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspTransferCard.prototype.setError = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspTransferCard.prototype.clearError = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspTransferCard.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 remain_card = 2;
 * @return {number}
 */
proto.proto.CProtoRspTransferCard.prototype.getRemainCard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoRspTransferCard.prototype.setRemainCard = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoRspTransferCard.prototype.clearRemainCard = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspTransferCard.prototype.hasRemainCard = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifySaveClient = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifySaveClient, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifySaveClient.displayName = 'proto.proto.CProtoNotifySaveClient';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifySaveClient.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifySaveClient.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifySaveClient} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifySaveClient.toObject = function(includeInstance, msg) {
  var f, obj = {
    loginType: jspb.Message.getField(msg, 1),
    uuid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifySaveClient}
 */
proto.proto.CProtoNotifySaveClient.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifySaveClient;
  return proto.proto.CProtoNotifySaveClient.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifySaveClient} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifySaveClient}
 */
proto.proto.CProtoNotifySaveClient.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLoginType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifySaveClient.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifySaveClient.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifySaveClient} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifySaveClient.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required int32 login_type = 1;
 * @return {number}
 */
proto.proto.CProtoNotifySaveClient.prototype.getLoginType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifySaveClient.prototype.setLoginType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifySaveClient.prototype.clearLoginType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifySaveClient.prototype.hasLoginType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string uuid = 2;
 * @return {string}
 */
proto.proto.CProtoNotifySaveClient.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.CProtoNotifySaveClient.prototype.setUuid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifySaveClient.prototype.clearUuid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifySaveClient.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqWriteLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqWriteLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqWriteLog.displayName = 'proto.proto.CProtoReqWriteLog';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqWriteLog.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqWriteLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqWriteLog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqWriteLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    sql: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqWriteLog}
 */
proto.proto.CProtoReqWriteLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqWriteLog;
  return proto.proto.CProtoReqWriteLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqWriteLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqWriteLog}
 */
proto.proto.CProtoReqWriteLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSql(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqWriteLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqWriteLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqWriteLog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqWriteLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string sql = 1;
 * @return {string}
 */
proto.proto.CProtoReqWriteLog.prototype.getSql = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.CProtoReqWriteLog.prototype.setSql = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqWriteLog.prototype.clearSql = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqWriteLog.prototype.hasSql = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqTargetInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqTargetInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqTargetInfo.displayName = 'proto.proto.CProtoReqTargetInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqTargetInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqTargetInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqTargetInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqTargetInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    mid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqTargetInfo}
 */
proto.proto.CProtoReqTargetInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqTargetInfo;
  return proto.proto.CProtoReqTargetInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqTargetInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqTargetInfo}
 */
proto.proto.CProtoReqTargetInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqTargetInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqTargetInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqTargetInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqTargetInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 mid = 1;
 * @return {number}
 */
proto.proto.CProtoReqTargetInfo.prototype.getMid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoReqTargetInfo.prototype.setMid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqTargetInfo.prototype.clearMid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqTargetInfo.prototype.hasMid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspTargetInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRspTargetInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspTargetInfo.displayName = 'proto.proto.CProtoRspTargetInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspTargetInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspTargetInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspTargetInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspTargetInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getField(msg, 1),
    mid: jspb.Message.getField(msg, 2),
    name: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspTargetInfo}
 */
proto.proto.CProtoRspTargetInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspTargetInfo;
  return proto.proto.CProtoRspTargetInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspTargetInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspTargetInfo}
 */
proto.proto.CProtoRspTargetInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspTargetInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspTargetInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspTargetInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspTargetInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * required int32 error = 1;
 * @return {number}
 */
proto.proto.CProtoRspTargetInfo.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspTargetInfo.prototype.setError = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspTargetInfo.prototype.clearError = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspTargetInfo.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 mid = 2;
 * @return {number}
 */
proto.proto.CProtoRspTargetInfo.prototype.getMid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoRspTargetInfo.prototype.setMid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoRspTargetInfo.prototype.clearMid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspTargetInfo.prototype.hasMid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.proto.CProtoRspTargetInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.proto.CProtoRspTargetInfo.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoRspTargetInfo.prototype.clearName = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspTargetInfo.prototype.hasName = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqSetUserType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqSetUserType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqSetUserType.displayName = 'proto.proto.CProtoReqSetUserType';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqSetUserType.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqSetUserType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqSetUserType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqSetUserType.toObject = function(includeInstance, msg) {
  var f, obj = {
    mid: jspb.Message.getField(msg, 1),
    type: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqSetUserType}
 */
proto.proto.CProtoReqSetUserType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqSetUserType;
  return proto.proto.CProtoReqSetUserType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqSetUserType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqSetUserType}
 */
proto.proto.CProtoReqSetUserType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqSetUserType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqSetUserType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqSetUserType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqSetUserType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 mid = 1;
 * @return {number}
 */
proto.proto.CProtoReqSetUserType.prototype.getMid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoReqSetUserType.prototype.setMid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqSetUserType.prototype.clearMid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqSetUserType.prototype.hasMid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 type = 2;
 * @return {number}
 */
proto.proto.CProtoReqSetUserType.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoReqSetUserType.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoReqSetUserType.prototype.clearType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqSetUserType.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspSetUserType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRspSetUserType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspSetUserType.displayName = 'proto.proto.CProtoRspSetUserType';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspSetUserType.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspSetUserType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspSetUserType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspSetUserType.toObject = function(includeInstance, msg) {
  var f, obj = {
    err: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspSetUserType}
 */
proto.proto.CProtoRspSetUserType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspSetUserType;
  return proto.proto.CProtoRspSetUserType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspSetUserType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspSetUserType}
 */
proto.proto.CProtoRspSetUserType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspSetUserType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspSetUserType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspSetUserType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspSetUserType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 err = 1;
 * @return {number}
 */
proto.proto.CProtoRspSetUserType.prototype.getErr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspSetUserType.prototype.setErr = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspSetUserType.prototype.clearErr = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspSetUserType.prototype.hasErr = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqGmCmd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqGmCmd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqGmCmd.displayName = 'proto.proto.CProtoReqGmCmd';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqGmCmd.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqGmCmd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqGmCmd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqGmCmd.toObject = function(includeInstance, msg) {
  var f, obj = {
    cmd: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqGmCmd}
 */
proto.proto.CProtoReqGmCmd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqGmCmd;
  return proto.proto.CProtoReqGmCmd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqGmCmd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqGmCmd}
 */
proto.proto.CProtoReqGmCmd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCmd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqGmCmd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqGmCmd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqGmCmd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqGmCmd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string cmd = 1;
 * @return {string}
 */
proto.proto.CProtoReqGmCmd.prototype.getCmd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.CProtoReqGmCmd.prototype.setCmd = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqGmCmd.prototype.clearCmd = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqGmCmd.prototype.hasCmd = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspGmCmd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRspGmCmd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspGmCmd.displayName = 'proto.proto.CProtoRspGmCmd';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspGmCmd.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspGmCmd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspGmCmd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspGmCmd.toObject = function(includeInstance, msg) {
  var f, obj = {
    err: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspGmCmd}
 */
proto.proto.CProtoRspGmCmd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspGmCmd;
  return proto.proto.CProtoRspGmCmd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspGmCmd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspGmCmd}
 */
proto.proto.CProtoRspGmCmd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspGmCmd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspGmCmd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspGmCmd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspGmCmd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 err = 1;
 * @return {number}
 */
proto.proto.CProtoRspGmCmd.prototype.getErr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspGmCmd.prototype.setErr = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspGmCmd.prototype.clearErr = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspGmCmd.prototype.hasErr = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqTransferLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqTransferLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqTransferLog.displayName = 'proto.proto.CProtoReqTransferLog';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqTransferLog.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqTransferLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqTransferLog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqTransferLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    mid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqTransferLog}
 */
proto.proto.CProtoReqTransferLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqTransferLog;
  return proto.proto.CProtoReqTransferLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqTransferLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqTransferLog}
 */
proto.proto.CProtoReqTransferLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqTransferLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqTransferLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqTransferLog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqTransferLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 mid = 1;
 * @return {number}
 */
proto.proto.CProtoReqTransferLog.prototype.getMid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoReqTransferLog.prototype.setMid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqTransferLog.prototype.clearMid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqTransferLog.prototype.hasMid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspTransferLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRspTransferLog.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRspTransferLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspTransferLog.displayName = 'proto.proto.CProtoRspTransferLog';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRspTransferLog.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspTransferLog.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspTransferLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspTransferLog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspTransferLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.proto.CProtoRspTransferLog.CProtoItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspTransferLog}
 */
proto.proto.CProtoRspTransferLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspTransferLog;
  return proto.proto.CProtoRspTransferLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspTransferLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspTransferLog}
 */
proto.proto.CProtoRspTransferLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.CProtoRspTransferLog.CProtoItem;
      reader.readMessage(value,proto.proto.CProtoRspTransferLog.CProtoItem.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspTransferLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspTransferLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspTransferLog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspTransferLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.CProtoRspTransferLog.CProtoItem.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspTransferLog.CProtoItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRspTransferLog.CProtoItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspTransferLog.CProtoItem.displayName = 'proto.proto.CProtoRspTransferLog.CProtoItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspTransferLog.CProtoItem.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspTransferLog.CProtoItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspTransferLog.CProtoItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspTransferLog.CProtoItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getField(msg, 1),
    mid: jspb.Message.getField(msg, 2),
    transferCount: jspb.Message.getField(msg, 3),
    time: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspTransferLog.CProtoItem}
 */
proto.proto.CProtoRspTransferLog.CProtoItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspTransferLog.CProtoItem;
  return proto.proto.CProtoRspTransferLog.CProtoItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspTransferLog.CProtoItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspTransferLog.CProtoItem}
 */
proto.proto.CProtoRspTransferLog.CProtoItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTransferCount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspTransferLog.CProtoItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspTransferLog.CProtoItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspTransferLog.CProtoItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspTransferLog.CProtoItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * required string name = 1;
 * @return {string}
 */
proto.proto.CProtoRspTransferLog.CProtoItem.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.CProtoRspTransferLog.CProtoItem.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspTransferLog.CProtoItem.prototype.clearName = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspTransferLog.CProtoItem.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 mid = 2;
 * @return {number}
 */
proto.proto.CProtoRspTransferLog.CProtoItem.prototype.getMid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoRspTransferLog.CProtoItem.prototype.setMid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoRspTransferLog.CProtoItem.prototype.clearMid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspTransferLog.CProtoItem.prototype.hasMid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 transfer_count = 3;
 * @return {number}
 */
proto.proto.CProtoRspTransferLog.CProtoItem.prototype.getTransferCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoRspTransferLog.CProtoItem.prototype.setTransferCount = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoRspTransferLog.CProtoItem.prototype.clearTransferCount = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspTransferLog.CProtoItem.prototype.hasTransferCount = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string time = 4;
 * @return {string}
 */
proto.proto.CProtoRspTransferLog.CProtoItem.prototype.getTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.proto.CProtoRspTransferLog.CProtoItem.prototype.setTime = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoRspTransferLog.CProtoItem.prototype.clearTime = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspTransferLog.CProtoItem.prototype.hasTime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated CProtoItem items = 1;
 * @return {!Array.<!proto.proto.CProtoRspTransferLog.CProtoItem>}
 */
proto.proto.CProtoRspTransferLog.prototype.getItemsList = function() {
  return /** @type{!Array.<!proto.proto.CProtoRspTransferLog.CProtoItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoRspTransferLog.CProtoItem, 1));
};


/** @param {!Array.<!proto.proto.CProtoRspTransferLog.CProtoItem>} value */
proto.proto.CProtoRspTransferLog.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.CProtoRspTransferLog.CProtoItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoRspTransferLog.CProtoItem}
 */
proto.proto.CProtoRspTransferLog.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.CProtoRspTransferLog.CProtoItem, opt_index);
};


proto.proto.CProtoRspTransferLog.prototype.clearItemsList = function() {
  this.setItemsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyAddCardCount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifyAddCardCount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyAddCardCount.displayName = 'proto.proto.CProtoNotifyAddCardCount';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyAddCardCount.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyAddCardCount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyAddCardCount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyAddCardCount.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    mid: jspb.Message.getField(msg, 2),
    diamond: jspb.Message.getField(msg, 3),
    sign: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyAddCardCount}
 */
proto.proto.CProtoNotifyAddCardCount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyAddCardCount;
  return proto.proto.CProtoNotifyAddCardCount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyAddCardCount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyAddCardCount}
 */
proto.proto.CProtoNotifyAddCardCount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDiamond(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSign(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyAddCardCount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyAddCardCount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyAddCardCount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyAddCardCount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * required int32 type = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyAddCardCount.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyAddCardCount.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyAddCardCount.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyAddCardCount.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 mid = 2;
 * @return {number}
 */
proto.proto.CProtoNotifyAddCardCount.prototype.getMid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyAddCardCount.prototype.setMid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifyAddCardCount.prototype.clearMid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyAddCardCount.prototype.hasMid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 diamond = 3;
 * @return {number}
 */
proto.proto.CProtoNotifyAddCardCount.prototype.getDiamond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyAddCardCount.prototype.setDiamond = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoNotifyAddCardCount.prototype.clearDiamond = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyAddCardCount.prototype.hasDiamond = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string sign = 4;
 * @return {string}
 */
proto.proto.CProtoNotifyAddCardCount.prototype.getSign = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.proto.CProtoNotifyAddCardCount.prototype.setSign = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoNotifyAddCardCount.prototype.clearSign = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyAddCardCount.prototype.hasSign = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyNotice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifyNotice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyNotice.displayName = 'proto.proto.CProtoNotifyNotice';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyNotice.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyNotice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyNotice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyNotice.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    msg: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyNotice}
 */
proto.proto.CProtoNotifyNotice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyNotice;
  return proto.proto.CProtoNotifyNotice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyNotice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyNotice}
 */
proto.proto.CProtoNotifyNotice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyNotice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyNotice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyNotice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyNotice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.CProtoNotifyNotice.emType = {
  EMTYPE_DIALOG: 1,
  EMTYPE_TIPS: 2
};

/**
 * required int32 type = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyNotice.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyNotice.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyNotice.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyNotice.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string msg = 2;
 * @return {string}
 */
proto.proto.CProtoNotifyNotice.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.CProtoNotifyNotice.prototype.setMsg = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifyNotice.prototype.clearMsg = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyNotice.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyOutHu = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoNotifyOutHu.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoNotifyOutHu, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyOutHu.displayName = 'proto.proto.CProtoNotifyOutHu';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoNotifyOutHu.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyOutHu.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyOutHu.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyOutHu} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyOutHu.toObject = function(includeInstance, msg) {
  var f, obj = {
    mTypeList: jspb.Message.getRepeatedField(msg, 1),
    mCardList: jspb.Message.toObjectList(msg.getMCardList(),
    proto.proto.CProtoCard.toObject, includeInstance),
    mPos: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyOutHu}
 */
proto.proto.CProtoNotifyOutHu.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyOutHu;
  return proto.proto.CProtoNotifyOutHu.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyOutHu} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyOutHu}
 */
proto.proto.CProtoNotifyOutHu.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addMType(value);
      break;
    case 2:
      var value = new proto.proto.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoCard.deserializeBinaryFromReader);
      msg.addMCard(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMPos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyOutHu.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyOutHu.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyOutHu} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyOutHu.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMTypeList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      1,
      f
    );
  }
  f = message.getMCardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.CProtoCard.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * repeated int32 m_type = 1;
 * @return {!Array.<number>}
 */
proto.proto.CProtoNotifyOutHu.prototype.getMTypeList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.proto.CProtoNotifyOutHu.prototype.setMTypeList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.CProtoNotifyOutHu.prototype.addMType = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.proto.CProtoNotifyOutHu.prototype.clearMTypeList = function() {
  this.setMTypeList([]);
};


/**
 * repeated CProtoCard m_card = 2;
 * @return {!Array.<!proto.proto.CProtoCard>}
 */
proto.proto.CProtoNotifyOutHu.prototype.getMCardList = function() {
  return /** @type{!Array.<!proto.proto.CProtoCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoCard, 2));
};


/** @param {!Array.<!proto.proto.CProtoCard>} value */
proto.proto.CProtoNotifyOutHu.prototype.setMCardList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.CProtoCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoCard}
 */
proto.proto.CProtoNotifyOutHu.prototype.addMCard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.CProtoCard, opt_index);
};


proto.proto.CProtoNotifyOutHu.prototype.clearMCardList = function() {
  this.setMCardList([]);
};


/**
 * required int32 m_pos = 3;
 * @return {number}
 */
proto.proto.CProtoNotifyOutHu.prototype.getMPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyOutHu.prototype.setMPos = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoNotifyOutHu.prototype.clearMPos = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyOutHu.prototype.hasMPos = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyOptAfterOutHu = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoNotifyOptAfterOutHu.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoNotifyOptAfterOutHu, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyOptAfterOutHu.displayName = 'proto.proto.CProtoNotifyOptAfterOutHu';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoNotifyOptAfterOutHu.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyOptAfterOutHu.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyOptAfterOutHu.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyOptAfterOutHu} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyOptAfterOutHu.toObject = function(includeInstance, msg) {
  var f, obj = {
    mTypeList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyOptAfterOutHu}
 */
proto.proto.CProtoNotifyOptAfterOutHu.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyOptAfterOutHu;
  return proto.proto.CProtoNotifyOptAfterOutHu.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyOptAfterOutHu} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyOptAfterOutHu}
 */
proto.proto.CProtoNotifyOptAfterOutHu.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addMType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyOptAfterOutHu.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyOptAfterOutHu.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyOptAfterOutHu} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyOptAfterOutHu.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMTypeList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      1,
      f
    );
  }
};


/**
 * repeated int32 m_type = 1;
 * @return {!Array.<number>}
 */
proto.proto.CProtoNotifyOptAfterOutHu.prototype.getMTypeList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.proto.CProtoNotifyOptAfterOutHu.prototype.setMTypeList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.CProtoNotifyOptAfterOutHu.prototype.addMType = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.proto.CProtoNotifyOptAfterOutHu.prototype.clearMTypeList = function() {
  this.setMTypeList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqOptAfterOutHu = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqOptAfterOutHu, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqOptAfterOutHu.displayName = 'proto.proto.CProtoReqOptAfterOutHu';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqOptAfterOutHu.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqOptAfterOutHu.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqOptAfterOutHu} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqOptAfterOutHu.toObject = function(includeInstance, msg) {
  var f, obj = {
    continueGame: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqOptAfterOutHu}
 */
proto.proto.CProtoReqOptAfterOutHu.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqOptAfterOutHu;
  return proto.proto.CProtoReqOptAfterOutHu.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqOptAfterOutHu} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqOptAfterOutHu}
 */
proto.proto.CProtoReqOptAfterOutHu.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setContinueGame(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqOptAfterOutHu.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqOptAfterOutHu.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqOptAfterOutHu} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqOptAfterOutHu.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * required bool continue_game = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoReqOptAfterOutHu.prototype.getContinueGame = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.proto.CProtoReqOptAfterOutHu.prototype.setContinueGame = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqOptAfterOutHu.prototype.clearContinueGame = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqOptAfterOutHu.prototype.hasContinueGame = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqFengUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqFengUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqFengUser.displayName = 'proto.proto.CProtoReqFengUser';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqFengUser.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqFengUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqFengUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqFengUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    targetMid: jspb.Message.getField(msg, 1),
    status: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqFengUser}
 */
proto.proto.CProtoReqFengUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqFengUser;
  return proto.proto.CProtoReqFengUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqFengUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqFengUser}
 */
proto.proto.CProtoReqFengUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTargetMid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqFengUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqFengUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqFengUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqFengUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 target_mid = 1;
 * @return {number}
 */
proto.proto.CProtoReqFengUser.prototype.getTargetMid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoReqFengUser.prototype.setTargetMid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqFengUser.prototype.clearTargetMid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqFengUser.prototype.hasTargetMid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 status = 2;
 * @return {number}
 */
proto.proto.CProtoReqFengUser.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoReqFengUser.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoReqFengUser.prototype.clearStatus = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqFengUser.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspFengUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRspFengUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspFengUser.displayName = 'proto.proto.CProtoRspFengUser';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspFengUser.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspFengUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspFengUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspFengUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    err: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspFengUser}
 */
proto.proto.CProtoRspFengUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspFengUser;
  return proto.proto.CProtoRspFengUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspFengUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspFengUser}
 */
proto.proto.CProtoRspFengUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspFengUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspFengUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspFengUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspFengUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 err = 1;
 * @return {number}
 */
proto.proto.CProtoRspFengUser.prototype.getErr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspFengUser.prototype.setErr = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspFengUser.prototype.clearErr = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspFengUser.prototype.hasErr = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqQueryRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqQueryRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqQueryRoom.displayName = 'proto.proto.CProtoReqQueryRoom';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqQueryRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqQueryRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqQueryRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqQueryRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqQueryRoom}
 */
proto.proto.CProtoReqQueryRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqQueryRoom;
  return proto.proto.CProtoReqQueryRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqQueryRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqQueryRoom}
 */
proto.proto.CProtoReqQueryRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqQueryRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqQueryRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqQueryRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqQueryRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 roomid = 1;
 * @return {number}
 */
proto.proto.CProtoReqQueryRoom.prototype.getRoomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoReqQueryRoom.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqQueryRoom.prototype.clearRoomid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqQueryRoom.prototype.hasRoomid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspQueryRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRspQueryRoom.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRspQueryRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspQueryRoom.displayName = 'proto.proto.CProtoRspQueryRoom';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRspQueryRoom.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspQueryRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspQueryRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspQueryRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspQueryRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    err: jspb.Message.getField(msg, 1),
    namesList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspQueryRoom}
 */
proto.proto.CProtoRspQueryRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspQueryRoom;
  return proto.proto.CProtoRspQueryRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspQueryRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspQueryRoom}
 */
proto.proto.CProtoRspQueryRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErr(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspQueryRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspQueryRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspQueryRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspQueryRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * required int32 err = 1;
 * @return {number}
 */
proto.proto.CProtoRspQueryRoom.prototype.getErr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspQueryRoom.prototype.setErr = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspQueryRoom.prototype.clearErr = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspQueryRoom.prototype.hasErr = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string names = 2;
 * @return {!Array.<string>}
 */
proto.proto.CProtoRspQueryRoom.prototype.getNamesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<string>} value */
proto.proto.CProtoRspQueryRoom.prototype.setNamesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.proto.CProtoRspQueryRoom.prototype.addNames = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.proto.CProtoRspQueryRoom.prototype.clearNamesList = function() {
  this.setNamesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqGmDismissRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqGmDismissRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqGmDismissRoom.displayName = 'proto.proto.CProtoReqGmDismissRoom';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqGmDismissRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqGmDismissRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqGmDismissRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqGmDismissRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqGmDismissRoom}
 */
proto.proto.CProtoReqGmDismissRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqGmDismissRoom;
  return proto.proto.CProtoReqGmDismissRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqGmDismissRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqGmDismissRoom}
 */
proto.proto.CProtoReqGmDismissRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqGmDismissRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqGmDismissRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqGmDismissRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqGmDismissRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 roomid = 1;
 * @return {number}
 */
proto.proto.CProtoReqGmDismissRoom.prototype.getRoomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoReqGmDismissRoom.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqGmDismissRoom.prototype.clearRoomid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqGmDismissRoom.prototype.hasRoomid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspGmDismissRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRspGmDismissRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspGmDismissRoom.displayName = 'proto.proto.CProtoRspGmDismissRoom';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspGmDismissRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspGmDismissRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspGmDismissRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspGmDismissRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    err: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspGmDismissRoom}
 */
proto.proto.CProtoRspGmDismissRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspGmDismissRoom;
  return proto.proto.CProtoRspGmDismissRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspGmDismissRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspGmDismissRoom}
 */
proto.proto.CProtoRspGmDismissRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspGmDismissRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspGmDismissRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspGmDismissRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspGmDismissRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 err = 1;
 * @return {number}
 */
proto.proto.CProtoRspGmDismissRoom.prototype.getErr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspGmDismissRoom.prototype.setErr = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspGmDismissRoom.prototype.clearErr = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspGmDismissRoom.prototype.hasErr = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqTransferLogByTime = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqTransferLogByTime, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqTransferLogByTime.displayName = 'proto.proto.CProtoReqTransferLogByTime';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqTransferLogByTime.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqTransferLogByTime.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqTransferLogByTime} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqTransferLogByTime.toObject = function(includeInstance, msg) {
  var f, obj = {
    mid: jspb.Message.getField(msg, 1),
    start: jspb.Message.getField(msg, 2),
    end: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqTransferLogByTime}
 */
proto.proto.CProtoReqTransferLogByTime.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqTransferLogByTime;
  return proto.proto.CProtoReqTransferLogByTime.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqTransferLogByTime} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqTransferLogByTime}
 */
proto.proto.CProtoReqTransferLogByTime.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStart(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqTransferLogByTime.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqTransferLogByTime.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqTransferLogByTime} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqTransferLogByTime.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * required int32 mid = 1;
 * @return {number}
 */
proto.proto.CProtoReqTransferLogByTime.prototype.getMid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoReqTransferLogByTime.prototype.setMid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqTransferLogByTime.prototype.clearMid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqTransferLogByTime.prototype.hasMid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string start = 2;
 * @return {string}
 */
proto.proto.CProtoReqTransferLogByTime.prototype.getStart = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.CProtoReqTransferLogByTime.prototype.setStart = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoReqTransferLogByTime.prototype.clearStart = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqTransferLogByTime.prototype.hasStart = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string end = 3;
 * @return {string}
 */
proto.proto.CProtoReqTransferLogByTime.prototype.getEnd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.proto.CProtoReqTransferLogByTime.prototype.setEnd = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoReqTransferLogByTime.prototype.clearEnd = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqTransferLogByTime.prototype.hasEnd = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspTransferLogByTime = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRspTransferLogByTime.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRspTransferLogByTime, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspTransferLogByTime.displayName = 'proto.proto.CProtoRspTransferLogByTime';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRspTransferLogByTime.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspTransferLogByTime.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspTransferLogByTime.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspTransferLogByTime} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspTransferLogByTime.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.proto.CProtoRspTransferLogByTime.CProtoItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspTransferLogByTime}
 */
proto.proto.CProtoRspTransferLogByTime.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspTransferLogByTime;
  return proto.proto.CProtoRspTransferLogByTime.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspTransferLogByTime} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspTransferLogByTime}
 */
proto.proto.CProtoRspTransferLogByTime.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.CProtoRspTransferLogByTime.CProtoItem;
      reader.readMessage(value,proto.proto.CProtoRspTransferLogByTime.CProtoItem.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspTransferLogByTime.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspTransferLogByTime.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspTransferLogByTime} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspTransferLogByTime.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.CProtoRspTransferLogByTime.CProtoItem.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspTransferLogByTime.CProtoItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRspTransferLogByTime.CProtoItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspTransferLogByTime.CProtoItem.displayName = 'proto.proto.CProtoRspTransferLogByTime.CProtoItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspTransferLogByTime.CProtoItem.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspTransferLogByTime.CProtoItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspTransferLogByTime.CProtoItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspTransferLogByTime.CProtoItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    mid: jspb.Message.getField(msg, 1),
    name: jspb.Message.getField(msg, 2),
    transferCount: jspb.Message.getField(msg, 3),
    logTime: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspTransferLogByTime.CProtoItem}
 */
proto.proto.CProtoRspTransferLogByTime.CProtoItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspTransferLogByTime.CProtoItem;
  return proto.proto.CProtoRspTransferLogByTime.CProtoItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspTransferLogByTime.CProtoItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspTransferLogByTime.CProtoItem}
 */
proto.proto.CProtoRspTransferLogByTime.CProtoItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTransferCount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspTransferLogByTime.CProtoItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspTransferLogByTime.CProtoItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspTransferLogByTime.CProtoItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspTransferLogByTime.CProtoItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * required int32 mid = 1;
 * @return {number}
 */
proto.proto.CProtoRspTransferLogByTime.CProtoItem.prototype.getMid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspTransferLogByTime.CProtoItem.prototype.setMid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspTransferLogByTime.CProtoItem.prototype.clearMid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspTransferLogByTime.CProtoItem.prototype.hasMid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string name = 2;
 * @return {string}
 */
proto.proto.CProtoRspTransferLogByTime.CProtoItem.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.CProtoRspTransferLogByTime.CProtoItem.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoRspTransferLogByTime.CProtoItem.prototype.clearName = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspTransferLogByTime.CProtoItem.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 transfer_count = 3;
 * @return {number}
 */
proto.proto.CProtoRspTransferLogByTime.CProtoItem.prototype.getTransferCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoRspTransferLogByTime.CProtoItem.prototype.setTransferCount = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoRspTransferLogByTime.CProtoItem.prototype.clearTransferCount = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspTransferLogByTime.CProtoItem.prototype.hasTransferCount = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string log_time = 4;
 * @return {string}
 */
proto.proto.CProtoRspTransferLogByTime.CProtoItem.prototype.getLogTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.proto.CProtoRspTransferLogByTime.CProtoItem.prototype.setLogTime = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoRspTransferLogByTime.CProtoItem.prototype.clearLogTime = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspTransferLogByTime.CProtoItem.prototype.hasLogTime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated CProtoItem items = 1;
 * @return {!Array.<!proto.proto.CProtoRspTransferLogByTime.CProtoItem>}
 */
proto.proto.CProtoRspTransferLogByTime.prototype.getItemsList = function() {
  return /** @type{!Array.<!proto.proto.CProtoRspTransferLogByTime.CProtoItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoRspTransferLogByTime.CProtoItem, 1));
};


/** @param {!Array.<!proto.proto.CProtoRspTransferLogByTime.CProtoItem>} value */
proto.proto.CProtoRspTransferLogByTime.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.CProtoRspTransferLogByTime.CProtoItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoRspTransferLogByTime.CProtoItem}
 */
proto.proto.CProtoRspTransferLogByTime.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.CProtoRspTransferLogByTime.CProtoItem, opt_index);
};


proto.proto.CProtoRspTransferLogByTime.prototype.clearItemsList = function() {
  this.setItemsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqTransferLogByMid = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqTransferLogByMid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqTransferLogByMid.displayName = 'proto.proto.CProtoReqTransferLogByMid';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqTransferLogByMid.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqTransferLogByMid.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqTransferLogByMid} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqTransferLogByMid.toObject = function(includeInstance, msg) {
  var f, obj = {
    mid: jspb.Message.getField(msg, 1),
    dstMid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqTransferLogByMid}
 */
proto.proto.CProtoReqTransferLogByMid.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqTransferLogByMid;
  return proto.proto.CProtoReqTransferLogByMid.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqTransferLogByMid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqTransferLogByMid}
 */
proto.proto.CProtoReqTransferLogByMid.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDstMid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqTransferLogByMid.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqTransferLogByMid.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqTransferLogByMid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqTransferLogByMid.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 mid = 1;
 * @return {number}
 */
proto.proto.CProtoReqTransferLogByMid.prototype.getMid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoReqTransferLogByMid.prototype.setMid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqTransferLogByMid.prototype.clearMid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqTransferLogByMid.prototype.hasMid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 dst_mid = 2;
 * @return {number}
 */
proto.proto.CProtoReqTransferLogByMid.prototype.getDstMid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoReqTransferLogByMid.prototype.setDstMid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoReqTransferLogByMid.prototype.clearDstMid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqTransferLogByMid.prototype.hasDstMid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspTransferLogByMid = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRspTransferLogByMid.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRspTransferLogByMid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspTransferLogByMid.displayName = 'proto.proto.CProtoRspTransferLogByMid';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRspTransferLogByMid.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspTransferLogByMid.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspTransferLogByMid.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspTransferLogByMid} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspTransferLogByMid.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.proto.CProtoRspTransferLogByMid.CProtoItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspTransferLogByMid}
 */
proto.proto.CProtoRspTransferLogByMid.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspTransferLogByMid;
  return proto.proto.CProtoRspTransferLogByMid.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspTransferLogByMid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspTransferLogByMid}
 */
proto.proto.CProtoRspTransferLogByMid.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.CProtoRspTransferLogByMid.CProtoItem;
      reader.readMessage(value,proto.proto.CProtoRspTransferLogByMid.CProtoItem.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspTransferLogByMid.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspTransferLogByMid.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspTransferLogByMid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspTransferLogByMid.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.CProtoRspTransferLogByMid.CProtoItem.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspTransferLogByMid.CProtoItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRspTransferLogByMid.CProtoItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspTransferLogByMid.CProtoItem.displayName = 'proto.proto.CProtoRspTransferLogByMid.CProtoItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspTransferLogByMid.CProtoItem.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspTransferLogByMid.CProtoItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspTransferLogByMid.CProtoItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspTransferLogByMid.CProtoItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    transferCount: jspb.Message.getField(msg, 1),
    logTime: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspTransferLogByMid.CProtoItem}
 */
proto.proto.CProtoRspTransferLogByMid.CProtoItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspTransferLogByMid.CProtoItem;
  return proto.proto.CProtoRspTransferLogByMid.CProtoItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspTransferLogByMid.CProtoItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspTransferLogByMid.CProtoItem}
 */
proto.proto.CProtoRspTransferLogByMid.CProtoItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTransferCount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspTransferLogByMid.CProtoItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspTransferLogByMid.CProtoItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspTransferLogByMid.CProtoItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspTransferLogByMid.CProtoItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required int32 transfer_count = 1;
 * @return {number}
 */
proto.proto.CProtoRspTransferLogByMid.CProtoItem.prototype.getTransferCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspTransferLogByMid.CProtoItem.prototype.setTransferCount = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspTransferLogByMid.CProtoItem.prototype.clearTransferCount = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspTransferLogByMid.CProtoItem.prototype.hasTransferCount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string log_time = 2;
 * @return {string}
 */
proto.proto.CProtoRspTransferLogByMid.CProtoItem.prototype.getLogTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.CProtoRspTransferLogByMid.CProtoItem.prototype.setLogTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoRspTransferLogByMid.CProtoItem.prototype.clearLogTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspTransferLogByMid.CProtoItem.prototype.hasLogTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated CProtoItem items = 1;
 * @return {!Array.<!proto.proto.CProtoRspTransferLogByMid.CProtoItem>}
 */
proto.proto.CProtoRspTransferLogByMid.prototype.getItemsList = function() {
  return /** @type{!Array.<!proto.proto.CProtoRspTransferLogByMid.CProtoItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoRspTransferLogByMid.CProtoItem, 1));
};


/** @param {!Array.<!proto.proto.CProtoRspTransferLogByMid.CProtoItem>} value */
proto.proto.CProtoRspTransferLogByMid.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.CProtoRspTransferLogByMid.CProtoItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoRspTransferLogByMid.CProtoItem}
 */
proto.proto.CProtoRspTransferLogByMid.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.CProtoRspTransferLogByMid.CProtoItem, opt_index);
};


proto.proto.CProtoRspTransferLogByMid.prototype.clearItemsList = function() {
  this.setItemsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqStatData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqStatData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqStatData.displayName = 'proto.proto.CProtoReqStatData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqStatData.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqStatData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqStatData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqStatData.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqStatData}
 */
proto.proto.CProtoReqStatData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqStatData;
  return proto.proto.CProtoReqStatData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqStatData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqStatData}
 */
proto.proto.CProtoReqStatData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqStatData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqStatData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqStatData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqStatData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspStatData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRspStatData.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRspStatData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspStatData.displayName = 'proto.proto.CProtoRspStatData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRspStatData.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspStatData.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspStatData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspStatData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspStatData.toObject = function(includeInstance, msg) {
  var f, obj = {
    statDataList: jspb.Message.toObjectList(msg.getStatDataList(),
    proto.proto.CProtoRspStatData.CProtoItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspStatData}
 */
proto.proto.CProtoRspStatData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspStatData;
  return proto.proto.CProtoRspStatData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspStatData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspStatData}
 */
proto.proto.CProtoRspStatData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.CProtoRspStatData.CProtoItem;
      reader.readMessage(value,proto.proto.CProtoRspStatData.CProtoItem.deserializeBinaryFromReader);
      msg.addStatData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspStatData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspStatData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspStatData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspStatData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.CProtoRspStatData.CProtoItem.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspStatData.CProtoItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRspStatData.CProtoItem.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRspStatData.CProtoItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspStatData.CProtoItem.displayName = 'proto.proto.CProtoRspStatData.CProtoItem';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRspStatData.CProtoItem.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspStatData.CProtoItem.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspStatData.CProtoItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspStatData.CProtoItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspStatData.CProtoItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    desc: jspb.Message.getField(msg, 1),
    valueList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspStatData.CProtoItem}
 */
proto.proto.CProtoRspStatData.CProtoItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspStatData.CProtoItem;
  return proto.proto.CProtoRspStatData.CProtoItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspStatData.CProtoItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspStatData.CProtoItem}
 */
proto.proto.CProtoRspStatData.CProtoItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspStatData.CProtoItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspStatData.CProtoItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspStatData.CProtoItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspStatData.CProtoItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValueList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      2,
      f
    );
  }
};


/**
 * required string desc = 1;
 * @return {string}
 */
proto.proto.CProtoRspStatData.CProtoItem.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.CProtoRspStatData.CProtoItem.prototype.setDesc = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspStatData.CProtoItem.prototype.clearDesc = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspStatData.CProtoItem.prototype.hasDesc = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated int32 value = 2;
 * @return {!Array.<number>}
 */
proto.proto.CProtoRspStatData.CProtoItem.prototype.getValueList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.proto.CProtoRspStatData.CProtoItem.prototype.setValueList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.CProtoRspStatData.CProtoItem.prototype.addValue = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.proto.CProtoRspStatData.CProtoItem.prototype.clearValueList = function() {
  this.setValueList([]);
};


/**
 * repeated CProtoItem stat_data = 1;
 * @return {!Array.<!proto.proto.CProtoRspStatData.CProtoItem>}
 */
proto.proto.CProtoRspStatData.prototype.getStatDataList = function() {
  return /** @type{!Array.<!proto.proto.CProtoRspStatData.CProtoItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoRspStatData.CProtoItem, 1));
};


/** @param {!Array.<!proto.proto.CProtoRspStatData.CProtoItem>} value */
proto.proto.CProtoRspStatData.prototype.setStatDataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.CProtoRspStatData.CProtoItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoRspStatData.CProtoItem}
 */
proto.proto.CProtoRspStatData.prototype.addStatData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.CProtoRspStatData.CProtoItem, opt_index);
};


proto.proto.CProtoRspStatData.prototype.clearStatDataList = function() {
  this.setStatDataList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyRemoveBuGang = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifyRemoveBuGang, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyRemoveBuGang.displayName = 'proto.proto.CProtoNotifyRemoveBuGang';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyRemoveBuGang.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyRemoveBuGang.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyRemoveBuGang} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyRemoveBuGang.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatid: jspb.Message.getField(msg, 1),
    card: (f = msg.getCard()) && proto.proto.CProtoCard.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyRemoveBuGang}
 */
proto.proto.CProtoNotifyRemoveBuGang.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyRemoveBuGang;
  return proto.proto.CProtoNotifyRemoveBuGang.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyRemoveBuGang} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyRemoveBuGang}
 */
proto.proto.CProtoNotifyRemoveBuGang.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeatid(value);
      break;
    case 2:
      var value = new proto.proto.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoCard.deserializeBinaryFromReader);
      msg.setCard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyRemoveBuGang.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyRemoveBuGang.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyRemoveBuGang} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyRemoveBuGang.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCard();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.CProtoCard.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 seatid = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyRemoveBuGang.prototype.getSeatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRemoveBuGang.prototype.setSeatid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyRemoveBuGang.prototype.clearSeatid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRemoveBuGang.prototype.hasSeatid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required CProtoCard card = 2;
 * @return {!proto.proto.CProtoCard}
 */
proto.proto.CProtoNotifyRemoveBuGang.prototype.getCard = function() {
  return /** @type{!proto.proto.CProtoCard} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoCard, 2, 1));
};


/** @param {!proto.proto.CProtoCard} value */
proto.proto.CProtoNotifyRemoveBuGang.prototype.setCard = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.proto.CProtoNotifyRemoveBuGang.prototype.clearCard = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRemoveBuGang.prototype.hasCard = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqMyRoomList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqMyRoomList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqMyRoomList.displayName = 'proto.proto.CProtoReqMyRoomList';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqMyRoomList.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqMyRoomList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqMyRoomList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqMyRoomList.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqMyRoomList}
 */
proto.proto.CProtoReqMyRoomList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqMyRoomList;
  return proto.proto.CProtoReqMyRoomList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqMyRoomList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqMyRoomList}
 */
proto.proto.CProtoReqMyRoomList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqMyRoomList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqMyRoomList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqMyRoomList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqMyRoomList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspMyRoomList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRspMyRoomList.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRspMyRoomList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspMyRoomList.displayName = 'proto.proto.CProtoRspMyRoomList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRspMyRoomList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspMyRoomList.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspMyRoomList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspMyRoomList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspMyRoomList.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.proto.CProtoRspMyRoomList.CProtoItem.toObject, includeInstance),
    playerRoomMax: jspb.Message.getField(msg, 9)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspMyRoomList}
 */
proto.proto.CProtoRspMyRoomList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspMyRoomList;
  return proto.proto.CProtoRspMyRoomList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspMyRoomList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspMyRoomList}
 */
proto.proto.CProtoRspMyRoomList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.CProtoRspMyRoomList.CProtoItem;
      reader.readMessage(value,proto.proto.CProtoRspMyRoomList.CProtoItem.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerRoomMax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspMyRoomList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspMyRoomList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspMyRoomList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspMyRoomList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.CProtoRspMyRoomList.CProtoItem.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspMyRoomList.CProtoItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRspMyRoomList.CProtoItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspMyRoomList.CProtoItem.displayName = 'proto.proto.CProtoRspMyRoomList.CProtoItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspMyRoomList.CProtoItem.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspMyRoomList.CProtoItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspMyRoomList.CProtoItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspMyRoomList.CProtoItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getField(msg, 1),
    currPlayerCount: jspb.Message.getField(msg, 2),
    mPlaytype: (f = msg.getMPlaytype()) && proto.proto.CProtoPlayType.toObject(includeInstance, f),
    roomState: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspMyRoomList.CProtoItem}
 */
proto.proto.CProtoRspMyRoomList.CProtoItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspMyRoomList.CProtoItem;
  return proto.proto.CProtoRspMyRoomList.CProtoItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspMyRoomList.CProtoItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspMyRoomList.CProtoItem}
 */
proto.proto.CProtoRspMyRoomList.CProtoItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrPlayerCount(value);
      break;
    case 3:
      var value = new proto.proto.CProtoPlayType;
      reader.readMessage(value,proto.proto.CProtoPlayType.deserializeBinaryFromReader);
      msg.setMPlaytype(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspMyRoomList.CProtoItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspMyRoomList.CProtoItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspMyRoomList.CProtoItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspMyRoomList.CProtoItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMPlaytype();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.CProtoPlayType.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * required int32 roomid = 1;
 * @return {number}
 */
proto.proto.CProtoRspMyRoomList.CProtoItem.prototype.getRoomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspMyRoomList.CProtoItem.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspMyRoomList.CProtoItem.prototype.clearRoomid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspMyRoomList.CProtoItem.prototype.hasRoomid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 curr_player_count = 2;
 * @return {number}
 */
proto.proto.CProtoRspMyRoomList.CProtoItem.prototype.getCurrPlayerCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoRspMyRoomList.CProtoItem.prototype.setCurrPlayerCount = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoRspMyRoomList.CProtoItem.prototype.clearCurrPlayerCount = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspMyRoomList.CProtoItem.prototype.hasCurrPlayerCount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required CProtoPlayType m_playtype = 3;
 * @return {!proto.proto.CProtoPlayType}
 */
proto.proto.CProtoRspMyRoomList.CProtoItem.prototype.getMPlaytype = function() {
  return /** @type{!proto.proto.CProtoPlayType} */ (
    jspb.Message.getWrapperField(this, proto.proto.CProtoPlayType, 3, 1));
};


/** @param {!proto.proto.CProtoPlayType} value */
proto.proto.CProtoRspMyRoomList.CProtoItem.prototype.setMPlaytype = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.proto.CProtoRspMyRoomList.CProtoItem.prototype.clearMPlaytype = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspMyRoomList.CProtoItem.prototype.hasMPlaytype = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 room_state = 4;
 * @return {number}
 */
proto.proto.CProtoRspMyRoomList.CProtoItem.prototype.getRoomState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.CProtoRspMyRoomList.CProtoItem.prototype.setRoomState = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoRspMyRoomList.CProtoItem.prototype.clearRoomState = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspMyRoomList.CProtoItem.prototype.hasRoomState = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated CProtoItem items = 1;
 * @return {!Array.<!proto.proto.CProtoRspMyRoomList.CProtoItem>}
 */
proto.proto.CProtoRspMyRoomList.prototype.getItemsList = function() {
  return /** @type{!Array.<!proto.proto.CProtoRspMyRoomList.CProtoItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoRspMyRoomList.CProtoItem, 1));
};


/** @param {!Array.<!proto.proto.CProtoRspMyRoomList.CProtoItem>} value */
proto.proto.CProtoRspMyRoomList.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.CProtoRspMyRoomList.CProtoItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoRspMyRoomList.CProtoItem}
 */
proto.proto.CProtoRspMyRoomList.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.CProtoRspMyRoomList.CProtoItem, opt_index);
};


proto.proto.CProtoRspMyRoomList.prototype.clearItemsList = function() {
  this.setItemsList([]);
};


/**
 * optional int32 player_room_max = 9;
 * @return {number}
 */
proto.proto.CProtoRspMyRoomList.prototype.getPlayerRoomMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.proto.CProtoRspMyRoomList.prototype.setPlayerRoomMax = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.proto.CProtoRspMyRoomList.prototype.clearPlayerRoomMax = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspMyRoomList.prototype.hasPlayerRoomMax = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyRoomPlayerCount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifyRoomPlayerCount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyRoomPlayerCount.displayName = 'proto.proto.CProtoNotifyRoomPlayerCount';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyRoomPlayerCount.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyRoomPlayerCount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyRoomPlayerCount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyRoomPlayerCount.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getField(msg, 1),
    currPlayerCount: jspb.Message.getField(msg, 2),
    roomState: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyRoomPlayerCount}
 */
proto.proto.CProtoNotifyRoomPlayerCount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyRoomPlayerCount;
  return proto.proto.CProtoNotifyRoomPlayerCount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyRoomPlayerCount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyRoomPlayerCount}
 */
proto.proto.CProtoNotifyRoomPlayerCount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrPlayerCount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyRoomPlayerCount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyRoomPlayerCount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyRoomPlayerCount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyRoomPlayerCount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * required int32 roomid = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyRoomPlayerCount.prototype.getRoomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoomPlayerCount.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyRoomPlayerCount.prototype.clearRoomid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoomPlayerCount.prototype.hasRoomid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 curr_player_count = 2;
 * @return {number}
 */
proto.proto.CProtoNotifyRoomPlayerCount.prototype.getCurrPlayerCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoomPlayerCount.prototype.setCurrPlayerCount = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifyRoomPlayerCount.prototype.clearCurrPlayerCount = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoomPlayerCount.prototype.hasCurrPlayerCount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 room_state = 4;
 * @return {number}
 */
proto.proto.CProtoNotifyRoomPlayerCount.prototype.getRoomState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyRoomPlayerCount.prototype.setRoomState = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoNotifyRoomPlayerCount.prototype.clearRoomState = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyRoomPlayerCount.prototype.hasRoomState = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyCreaterRemoveRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifyCreaterRemoveRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyCreaterRemoveRoom.displayName = 'proto.proto.CProtoNotifyCreaterRemoveRoom';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyCreaterRemoveRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyCreaterRemoveRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyCreaterRemoveRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyCreaterRemoveRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyCreaterRemoveRoom}
 */
proto.proto.CProtoNotifyCreaterRemoveRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyCreaterRemoveRoom;
  return proto.proto.CProtoNotifyCreaterRemoveRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyCreaterRemoveRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyCreaterRemoveRoom}
 */
proto.proto.CProtoNotifyCreaterRemoveRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyCreaterRemoveRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyCreaterRemoveRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyCreaterRemoveRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyCreaterRemoveRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 roomid = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyCreaterRemoveRoom.prototype.getRoomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyCreaterRemoveRoom.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyCreaterRemoveRoom.prototype.clearRoomid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyCreaterRemoveRoom.prototype.hasRoomid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyReturnDiamond = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifyReturnDiamond, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyReturnDiamond.displayName = 'proto.proto.CProtoNotifyReturnDiamond';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyReturnDiamond.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyReturnDiamond.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyReturnDiamond} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyReturnDiamond.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getField(msg, 1),
    diamond: jspb.Message.getField(msg, 2),
    gameCount: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyReturnDiamond}
 */
proto.proto.CProtoNotifyReturnDiamond.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyReturnDiamond;
  return proto.proto.CProtoNotifyReturnDiamond.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyReturnDiamond} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyReturnDiamond}
 */
proto.proto.CProtoNotifyReturnDiamond.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDiamond(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGameCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyReturnDiamond.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyReturnDiamond.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyReturnDiamond} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyReturnDiamond.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required int32 roomid = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyReturnDiamond.prototype.getRoomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyReturnDiamond.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyReturnDiamond.prototype.clearRoomid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyReturnDiamond.prototype.hasRoomid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 diamond = 2;
 * @return {number}
 */
proto.proto.CProtoNotifyReturnDiamond.prototype.getDiamond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyReturnDiamond.prototype.setDiamond = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifyReturnDiamond.prototype.clearDiamond = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyReturnDiamond.prototype.hasDiamond = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 game_count = 3;
 * @return {number}
 */
proto.proto.CProtoNotifyReturnDiamond.prototype.getGameCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyReturnDiamond.prototype.setGameCount = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoNotifyReturnDiamond.prototype.clearGameCount = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyReturnDiamond.prototype.hasGameCount = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyCanBaoJiao = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifyCanBaoJiao, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyCanBaoJiao.displayName = 'proto.proto.CProtoNotifyCanBaoJiao';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyCanBaoJiao.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyCanBaoJiao.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyCanBaoJiao} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyCanBaoJiao.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyCanBaoJiao}
 */
proto.proto.CProtoNotifyCanBaoJiao.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyCanBaoJiao;
  return proto.proto.CProtoNotifyCanBaoJiao.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyCanBaoJiao} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyCanBaoJiao}
 */
proto.proto.CProtoNotifyCanBaoJiao.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyCanBaoJiao.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyCanBaoJiao.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyCanBaoJiao} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyCanBaoJiao.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqBaoJiaoOpt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqBaoJiaoOpt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqBaoJiaoOpt.displayName = 'proto.proto.CProtoReqBaoJiaoOpt';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqBaoJiaoOpt.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqBaoJiaoOpt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqBaoJiaoOpt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqBaoJiaoOpt.toObject = function(includeInstance, msg) {
  var f, obj = {
    baojiao: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqBaoJiaoOpt}
 */
proto.proto.CProtoReqBaoJiaoOpt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqBaoJiaoOpt;
  return proto.proto.CProtoReqBaoJiaoOpt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqBaoJiaoOpt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqBaoJiaoOpt}
 */
proto.proto.CProtoReqBaoJiaoOpt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBaojiao(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqBaoJiaoOpt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqBaoJiaoOpt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqBaoJiaoOpt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqBaoJiaoOpt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * required bool baojiao = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoReqBaoJiaoOpt.prototype.getBaojiao = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.proto.CProtoReqBaoJiaoOpt.prototype.setBaojiao = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqBaoJiaoOpt.prototype.clearBaojiao = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqBaoJiaoOpt.prototype.hasBaojiao = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspBaoJiaoOpt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRspBaoJiaoOpt.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRspBaoJiaoOpt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspBaoJiaoOpt.displayName = 'proto.proto.CProtoRspBaoJiaoOpt';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRspBaoJiaoOpt.repeatedFields_ = [3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspBaoJiaoOpt.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspBaoJiaoOpt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspBaoJiaoOpt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspBaoJiaoOpt.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatid: jspb.Message.getField(msg, 1),
    baojiao: jspb.Message.getField(msg, 2),
    baojiaoCardsList: jspb.Message.toObjectList(msg.getBaojiaoCardsList(),
    proto.proto.CProtoRspBaoJiaoOpt.CProtoCard.toObject, includeInstance),
    tingCardsList: jspb.Message.toObjectList(msg.getTingCardsList(),
    proto.proto.CProtoRspBaoJiaoOpt.CProtoCard.toObject, includeInstance),
    anCardsList: jspb.Message.toObjectList(msg.getAnCardsList(),
    proto.proto.CProtoRspBaoJiaoOpt.CProtoCard.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspBaoJiaoOpt}
 */
proto.proto.CProtoRspBaoJiaoOpt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspBaoJiaoOpt;
  return proto.proto.CProtoRspBaoJiaoOpt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspBaoJiaoOpt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspBaoJiaoOpt}
 */
proto.proto.CProtoRspBaoJiaoOpt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeatid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBaojiao(value);
      break;
    case 3:
      var value = new proto.proto.CProtoRspBaoJiaoOpt.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoRspBaoJiaoOpt.CProtoCard.deserializeBinaryFromReader);
      msg.addBaojiaoCards(value);
      break;
    case 4:
      var value = new proto.proto.CProtoRspBaoJiaoOpt.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoRspBaoJiaoOpt.CProtoCard.deserializeBinaryFromReader);
      msg.addTingCards(value);
      break;
    case 5:
      var value = new proto.proto.CProtoRspBaoJiaoOpt.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoRspBaoJiaoOpt.CProtoCard.deserializeBinaryFromReader);
      msg.addAnCards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspBaoJiaoOpt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspBaoJiaoOpt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspBaoJiaoOpt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspBaoJiaoOpt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getBaojiaoCardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.proto.CProtoRspBaoJiaoOpt.CProtoCard.serializeBinaryToWriter
    );
  }
  f = message.getTingCardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.proto.CProtoRspBaoJiaoOpt.CProtoCard.serializeBinaryToWriter
    );
  }
  f = message.getAnCardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.proto.CProtoRspBaoJiaoOpt.CProtoCard.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspBaoJiaoOpt.CProtoCard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRspBaoJiaoOpt.CProtoCard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspBaoJiaoOpt.CProtoCard.displayName = 'proto.proto.CProtoRspBaoJiaoOpt.CProtoCard';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspBaoJiaoOpt.CProtoCard.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspBaoJiaoOpt.CProtoCard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspBaoJiaoOpt.CProtoCard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspBaoJiaoOpt.CProtoCard.toObject = function(includeInstance, msg) {
  var f, obj = {
    mColor: jspb.Message.getField(msg, 1),
    mNumber: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspBaoJiaoOpt.CProtoCard}
 */
proto.proto.CProtoRspBaoJiaoOpt.CProtoCard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspBaoJiaoOpt.CProtoCard;
  return proto.proto.CProtoRspBaoJiaoOpt.CProtoCard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspBaoJiaoOpt.CProtoCard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspBaoJiaoOpt.CProtoCard}
 */
proto.proto.CProtoRspBaoJiaoOpt.CProtoCard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMColor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspBaoJiaoOpt.CProtoCard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspBaoJiaoOpt.CProtoCard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspBaoJiaoOpt.CProtoCard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspBaoJiaoOpt.CProtoCard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 m_color = 1;
 * @return {number}
 */
proto.proto.CProtoRspBaoJiaoOpt.CProtoCard.prototype.getMColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspBaoJiaoOpt.CProtoCard.prototype.setMColor = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspBaoJiaoOpt.CProtoCard.prototype.clearMColor = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspBaoJiaoOpt.CProtoCard.prototype.hasMColor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_number = 2;
 * @return {number}
 */
proto.proto.CProtoRspBaoJiaoOpt.CProtoCard.prototype.getMNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoRspBaoJiaoOpt.CProtoCard.prototype.setMNumber = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoRspBaoJiaoOpt.CProtoCard.prototype.clearMNumber = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspBaoJiaoOpt.CProtoCard.prototype.hasMNumber = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 seatid = 1;
 * @return {number}
 */
proto.proto.CProtoRspBaoJiaoOpt.prototype.getSeatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspBaoJiaoOpt.prototype.setSeatid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspBaoJiaoOpt.prototype.clearSeatid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspBaoJiaoOpt.prototype.hasSeatid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bool baojiao = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoRspBaoJiaoOpt.prototype.getBaojiao = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.proto.CProtoRspBaoJiaoOpt.prototype.setBaojiao = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoRspBaoJiaoOpt.prototype.clearBaojiao = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspBaoJiaoOpt.prototype.hasBaojiao = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated CProtoCard baojiao_cards = 3;
 * @return {!Array.<!proto.proto.CProtoRspBaoJiaoOpt.CProtoCard>}
 */
proto.proto.CProtoRspBaoJiaoOpt.prototype.getBaojiaoCardsList = function() {
  return /** @type{!Array.<!proto.proto.CProtoRspBaoJiaoOpt.CProtoCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoRspBaoJiaoOpt.CProtoCard, 3));
};


/** @param {!Array.<!proto.proto.CProtoRspBaoJiaoOpt.CProtoCard>} value */
proto.proto.CProtoRspBaoJiaoOpt.prototype.setBaojiaoCardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.proto.CProtoRspBaoJiaoOpt.CProtoCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoRspBaoJiaoOpt.CProtoCard}
 */
proto.proto.CProtoRspBaoJiaoOpt.prototype.addBaojiaoCards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.proto.CProtoRspBaoJiaoOpt.CProtoCard, opt_index);
};


proto.proto.CProtoRspBaoJiaoOpt.prototype.clearBaojiaoCardsList = function() {
  this.setBaojiaoCardsList([]);
};


/**
 * repeated CProtoCard ting_cards = 4;
 * @return {!Array.<!proto.proto.CProtoRspBaoJiaoOpt.CProtoCard>}
 */
proto.proto.CProtoRspBaoJiaoOpt.prototype.getTingCardsList = function() {
  return /** @type{!Array.<!proto.proto.CProtoRspBaoJiaoOpt.CProtoCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoRspBaoJiaoOpt.CProtoCard, 4));
};


/** @param {!Array.<!proto.proto.CProtoRspBaoJiaoOpt.CProtoCard>} value */
proto.proto.CProtoRspBaoJiaoOpt.prototype.setTingCardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.proto.CProtoRspBaoJiaoOpt.CProtoCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoRspBaoJiaoOpt.CProtoCard}
 */
proto.proto.CProtoRspBaoJiaoOpt.prototype.addTingCards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.proto.CProtoRspBaoJiaoOpt.CProtoCard, opt_index);
};


proto.proto.CProtoRspBaoJiaoOpt.prototype.clearTingCardsList = function() {
  this.setTingCardsList([]);
};


/**
 * repeated CProtoCard an_cards = 5;
 * @return {!Array.<!proto.proto.CProtoRspBaoJiaoOpt.CProtoCard>}
 */
proto.proto.CProtoRspBaoJiaoOpt.prototype.getAnCardsList = function() {
  return /** @type{!Array.<!proto.proto.CProtoRspBaoJiaoOpt.CProtoCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoRspBaoJiaoOpt.CProtoCard, 5));
};


/** @param {!Array.<!proto.proto.CProtoRspBaoJiaoOpt.CProtoCard>} value */
proto.proto.CProtoRspBaoJiaoOpt.prototype.setAnCardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.proto.CProtoRspBaoJiaoOpt.CProtoCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoRspBaoJiaoOpt.CProtoCard}
 */
proto.proto.CProtoRspBaoJiaoOpt.prototype.addAnCards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.proto.CProtoRspBaoJiaoOpt.CProtoCard, opt_index);
};


proto.proto.CProtoRspBaoJiaoOpt.prototype.clearAnCardsList = function() {
  this.setAnCardsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqLocations = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqLocations, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqLocations.displayName = 'proto.proto.CProtoReqLocations';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqLocations.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqLocations.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqLocations} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqLocations.toObject = function(includeInstance, msg) {
  var f, obj = {
    longitude: jspb.Message.getField(msg, 1),
    latitude: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqLocations}
 */
proto.proto.CProtoReqLocations.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqLocations;
  return proto.proto.CProtoReqLocations.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqLocations} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqLocations}
 */
proto.proto.CProtoReqLocations.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLongitude(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLatitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqLocations.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqLocations.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqLocations} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqLocations.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required string longitude = 1;
 * @return {string}
 */
proto.proto.CProtoReqLocations.prototype.getLongitude = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.CProtoReqLocations.prototype.setLongitude = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoReqLocations.prototype.clearLongitude = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqLocations.prototype.hasLongitude = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string latitude = 2;
 * @return {string}
 */
proto.proto.CProtoReqLocations.prototype.getLatitude = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.CProtoReqLocations.prototype.setLatitude = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoReqLocations.prototype.clearLatitude = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoReqLocations.prototype.hasLatitude = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspLocations = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRspLocations.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRspLocations, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspLocations.displayName = 'proto.proto.CProtoRspLocations';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRspLocations.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspLocations.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspLocations.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspLocations} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspLocations.toObject = function(includeInstance, msg) {
  var f, obj = {
    locationsList: jspb.Message.toObjectList(msg.getLocationsList(),
    proto.proto.CProtoRspLocations.locationInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspLocations}
 */
proto.proto.CProtoRspLocations.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspLocations;
  return proto.proto.CProtoRspLocations.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspLocations} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspLocations}
 */
proto.proto.CProtoRspLocations.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.CProtoRspLocations.locationInfo;
      reader.readMessage(value,proto.proto.CProtoRspLocations.locationInfo.deserializeBinaryFromReader);
      msg.addLocations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspLocations.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspLocations.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspLocations} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspLocations.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.CProtoRspLocations.locationInfo.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspLocations.locationInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRspLocations.locationInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspLocations.locationInfo.displayName = 'proto.proto.CProtoRspLocations.locationInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspLocations.locationInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspLocations.locationInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspLocations.locationInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspLocations.locationInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatId: jspb.Message.getField(msg, 1),
    longitude: jspb.Message.getField(msg, 2),
    latitude: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspLocations.locationInfo}
 */
proto.proto.CProtoRspLocations.locationInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspLocations.locationInfo;
  return proto.proto.CProtoRspLocations.locationInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspLocations.locationInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspLocations.locationInfo}
 */
proto.proto.CProtoRspLocations.locationInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeatId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLongitude(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLatitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspLocations.locationInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspLocations.locationInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspLocations.locationInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspLocations.locationInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * required int32 seat_id = 1;
 * @return {number}
 */
proto.proto.CProtoRspLocations.locationInfo.prototype.getSeatId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspLocations.locationInfo.prototype.setSeatId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspLocations.locationInfo.prototype.clearSeatId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspLocations.locationInfo.prototype.hasSeatId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string longitude = 2;
 * @return {string}
 */
proto.proto.CProtoRspLocations.locationInfo.prototype.getLongitude = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.CProtoRspLocations.locationInfo.prototype.setLongitude = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoRspLocations.locationInfo.prototype.clearLongitude = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspLocations.locationInfo.prototype.hasLongitude = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string latitude = 3;
 * @return {string}
 */
proto.proto.CProtoRspLocations.locationInfo.prototype.getLatitude = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.proto.CProtoRspLocations.locationInfo.prototype.setLatitude = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoRspLocations.locationInfo.prototype.clearLatitude = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspLocations.locationInfo.prototype.hasLatitude = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated locationInfo locations = 1;
 * @return {!Array.<!proto.proto.CProtoRspLocations.locationInfo>}
 */
proto.proto.CProtoRspLocations.prototype.getLocationsList = function() {
  return /** @type{!Array.<!proto.proto.CProtoRspLocations.locationInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoRspLocations.locationInfo, 1));
};


/** @param {!Array.<!proto.proto.CProtoRspLocations.locationInfo>} value */
proto.proto.CProtoRspLocations.prototype.setLocationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.CProtoRspLocations.locationInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoRspLocations.locationInfo}
 */
proto.proto.CProtoRspLocations.prototype.addLocations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.CProtoRspLocations.locationInfo, opt_index);
};


proto.proto.CProtoRspLocations.prototype.clearLocationsList = function() {
  this.setLocationsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqActivity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqActivity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqActivity.displayName = 'proto.proto.CProtoReqActivity';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqActivity.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqActivity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqActivity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqActivity.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqActivity}
 */
proto.proto.CProtoReqActivity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqActivity;
  return proto.proto.CProtoReqActivity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqActivity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqActivity}
 */
proto.proto.CProtoReqActivity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqActivity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqActivity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqActivity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqActivity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspActivity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRspActivity.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRspActivity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspActivity.displayName = 'proto.proto.CProtoRspActivity';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRspActivity.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspActivity.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspActivity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspActivity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspActivity.toObject = function(includeInstance, msg) {
  var f, obj = {
    mActivitysList: jspb.Message.toObjectList(msg.getMActivitysList(),
    proto.proto.CProtoRspActivity.activity.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspActivity}
 */
proto.proto.CProtoRspActivity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspActivity;
  return proto.proto.CProtoRspActivity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspActivity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspActivity}
 */
proto.proto.CProtoRspActivity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.CProtoRspActivity.activity;
      reader.readMessage(value,proto.proto.CProtoRspActivity.activity.deserializeBinaryFromReader);
      msg.addMActivitys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspActivity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspActivity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspActivity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspActivity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMActivitysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.CProtoRspActivity.activity.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspActivity.activity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRspActivity.activity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspActivity.activity.displayName = 'proto.proto.CProtoRspActivity.activity';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspActivity.activity.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspActivity.activity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspActivity.activity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspActivity.activity.toObject = function(includeInstance, msg) {
  var f, obj = {
    mType: jspb.Message.getField(msg, 1),
    mOpen: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspActivity.activity}
 */
proto.proto.CProtoRspActivity.activity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspActivity.activity;
  return proto.proto.CProtoRspActivity.activity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspActivity.activity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspActivity.activity}
 */
proto.proto.CProtoRspActivity.activity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMType(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMOpen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspActivity.activity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspActivity.activity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspActivity.activity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspActivity.activity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * required int32 m_type = 1;
 * @return {number}
 */
proto.proto.CProtoRspActivity.activity.prototype.getMType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspActivity.activity.prototype.setMType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspActivity.activity.prototype.clearMType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspActivity.activity.prototype.hasMType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bool m_open = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CProtoRspActivity.activity.prototype.getMOpen = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.proto.CProtoRspActivity.activity.prototype.setMOpen = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoRspActivity.activity.prototype.clearMOpen = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspActivity.activity.prototype.hasMOpen = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated activity m_activitys = 1;
 * @return {!Array.<!proto.proto.CProtoRspActivity.activity>}
 */
proto.proto.CProtoRspActivity.prototype.getMActivitysList = function() {
  return /** @type{!Array.<!proto.proto.CProtoRspActivity.activity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoRspActivity.activity, 1));
};


/** @param {!Array.<!proto.proto.CProtoRspActivity.activity>} value */
proto.proto.CProtoRspActivity.prototype.setMActivitysList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.CProtoRspActivity.activity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoRspActivity.activity}
 */
proto.proto.CProtoRspActivity.prototype.addMActivitys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.CProtoRspActivity.activity, opt_index);
};


proto.proto.CProtoRspActivity.prototype.clearMActivitysList = function() {
  this.setMActivitysList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqGetFreeDiamond = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqGetFreeDiamond, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqGetFreeDiamond.displayName = 'proto.proto.CProtoReqGetFreeDiamond';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqGetFreeDiamond.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqGetFreeDiamond.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqGetFreeDiamond} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqGetFreeDiamond.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqGetFreeDiamond}
 */
proto.proto.CProtoReqGetFreeDiamond.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqGetFreeDiamond;
  return proto.proto.CProtoReqGetFreeDiamond.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqGetFreeDiamond} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqGetFreeDiamond}
 */
proto.proto.CProtoReqGetFreeDiamond.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqGetFreeDiamond.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqGetFreeDiamond.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqGetFreeDiamond} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqGetFreeDiamond.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspGetFreeDiamond = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRspGetFreeDiamond, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspGetFreeDiamond.displayName = 'proto.proto.CProtoRspGetFreeDiamond';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspGetFreeDiamond.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspGetFreeDiamond.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspGetFreeDiamond} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspGetFreeDiamond.toObject = function(includeInstance, msg) {
  var f, obj = {
    mGetDiamondCount: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspGetFreeDiamond}
 */
proto.proto.CProtoRspGetFreeDiamond.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspGetFreeDiamond;
  return proto.proto.CProtoRspGetFreeDiamond.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspGetFreeDiamond} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspGetFreeDiamond}
 */
proto.proto.CProtoRspGetFreeDiamond.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMGetDiamondCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspGetFreeDiamond.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspGetFreeDiamond.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspGetFreeDiamond} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspGetFreeDiamond.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 m_get_diamond_count = 1;
 * @return {number}
 */
proto.proto.CProtoRspGetFreeDiamond.prototype.getMGetDiamondCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspGetFreeDiamond.prototype.setMGetDiamondCount = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspGetFreeDiamond.prototype.clearMGetDiamondCount = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspGetFreeDiamond.prototype.hasMGetDiamondCount = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqSharedDiamond = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqSharedDiamond, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqSharedDiamond.displayName = 'proto.proto.CProtoReqSharedDiamond';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqSharedDiamond.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqSharedDiamond.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqSharedDiamond} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqSharedDiamond.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqSharedDiamond}
 */
proto.proto.CProtoReqSharedDiamond.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqSharedDiamond;
  return proto.proto.CProtoReqSharedDiamond.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqSharedDiamond} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqSharedDiamond}
 */
proto.proto.CProtoReqSharedDiamond.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqSharedDiamond.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqSharedDiamond.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqSharedDiamond} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqSharedDiamond.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspSharedDiamond = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRspSharedDiamond, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspSharedDiamond.displayName = 'proto.proto.CProtoRspSharedDiamond';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspSharedDiamond.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspSharedDiamond.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspSharedDiamond} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspSharedDiamond.toObject = function(includeInstance, msg) {
  var f, obj = {
    mDiamondnum: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspSharedDiamond}
 */
proto.proto.CProtoRspSharedDiamond.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspSharedDiamond;
  return proto.proto.CProtoRspSharedDiamond.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspSharedDiamond} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspSharedDiamond}
 */
proto.proto.CProtoRspSharedDiamond.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMDiamondnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspSharedDiamond.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspSharedDiamond.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspSharedDiamond} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspSharedDiamond.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 m_diamondNum = 1;
 * @return {number}
 */
proto.proto.CProtoRspSharedDiamond.prototype.getMDiamondnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspSharedDiamond.prototype.setMDiamondnum = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspSharedDiamond.prototype.clearMDiamondnum = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspSharedDiamond.prototype.hasMDiamondnum = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqLimitFree = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqLimitFree, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqLimitFree.displayName = 'proto.proto.CProtoReqLimitFree';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqLimitFree.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqLimitFree.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqLimitFree} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqLimitFree.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqLimitFree}
 */
proto.proto.CProtoReqLimitFree.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqLimitFree;
  return proto.proto.CProtoReqLimitFree.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqLimitFree} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqLimitFree}
 */
proto.proto.CProtoReqLimitFree.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqLimitFree.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqLimitFree.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqLimitFree} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqLimitFree.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqGameConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoReqGameConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqGameConfig.displayName = 'proto.proto.CProtoReqGameConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqGameConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqGameConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqGameConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqGameConfig.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqGameConfig}
 */
proto.proto.CProtoReqGameConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqGameConfig;
  return proto.proto.CProtoReqGameConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqGameConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqGameConfig}
 */
proto.proto.CProtoReqGameConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqGameConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqGameConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqGameConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqGameConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspGameConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRspGameConfig.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRspGameConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspGameConfig.displayName = 'proto.proto.CProtoRspGameConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRspGameConfig.repeatedFields_ = [1,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspGameConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspGameConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspGameConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspGameConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    cardItemsList: jspb.Message.toObjectList(msg.getCardItemsList(),
    proto.proto.CProtoRspGameConfig.CProtoCardItem.toObject, includeInstance),
    gameId: jspb.Message.getField(msg, 3),
    playerRoomMax: jspb.Message.getField(msg, 4),
    cardItemsPkList: jspb.Message.toObjectList(msg.getCardItemsPkList(),
    proto.proto.CProtoRspGameConfig.CProtoCardItemPK.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspGameConfig}
 */
proto.proto.CProtoRspGameConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspGameConfig;
  return proto.proto.CProtoRspGameConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspGameConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspGameConfig}
 */
proto.proto.CProtoRspGameConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.CProtoRspGameConfig.CProtoCardItem;
      reader.readMessage(value,proto.proto.CProtoRspGameConfig.CProtoCardItem.deserializeBinaryFromReader);
      msg.addCardItems(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGameId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerRoomMax(value);
      break;
    case 5:
      var value = new proto.proto.CProtoRspGameConfig.CProtoCardItemPK;
      reader.readMessage(value,proto.proto.CProtoRspGameConfig.CProtoCardItemPK.deserializeBinaryFromReader);
      msg.addCardItemsPk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspGameConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspGameConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspGameConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspGameConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCardItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.CProtoRspGameConfig.CProtoCardItem.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getCardItemsPkList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.proto.CProtoRspGameConfig.CProtoCardItemPK.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspGameConfig.CProtoCardItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRspGameConfig.CProtoCardItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspGameConfig.CProtoCardItem.displayName = 'proto.proto.CProtoRspGameConfig.CProtoCardItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItem.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspGameConfig.CProtoCardItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspGameConfig.CProtoCardItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspGameConfig.CProtoCardItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameMax: jspb.Message.getField(msg, 1),
    aaPay: jspb.Message.getField(msg, 2),
    createrPay2: jspb.Message.getField(msg, 3),
    createrPay3: jspb.Message.getField(msg, 4),
    createrPay4: jspb.Message.getField(msg, 5),
    createrPay5: jspb.Message.getField(msg, 6),
    createrPay6: jspb.Message.getField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspGameConfig.CProtoCardItem}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspGameConfig.CProtoCardItem;
  return proto.proto.CProtoRspGameConfig.CProtoCardItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspGameConfig.CProtoCardItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspGameConfig.CProtoCardItem}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGameMax(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAaPay(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCreaterPay2(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCreaterPay3(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCreaterPay4(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCreaterPay5(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCreaterPay6(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspGameConfig.CProtoCardItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspGameConfig.CProtoCardItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspGameConfig.CProtoCardItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * required int32 game_max = 1;
 * @return {number}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItem.prototype.getGameMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspGameConfig.CProtoCardItem.prototype.setGameMax = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspGameConfig.CProtoCardItem.prototype.clearGameMax = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItem.prototype.hasGameMax = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 aa_pay = 2;
 * @return {number}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItem.prototype.getAaPay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoRspGameConfig.CProtoCardItem.prototype.setAaPay = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoRspGameConfig.CProtoCardItem.prototype.clearAaPay = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItem.prototype.hasAaPay = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 creater_pay_2 = 3;
 * @return {number}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItem.prototype.getCreaterPay2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoRspGameConfig.CProtoCardItem.prototype.setCreaterPay2 = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoRspGameConfig.CProtoCardItem.prototype.clearCreaterPay2 = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItem.prototype.hasCreaterPay2 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 creater_pay_3 = 4;
 * @return {number}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItem.prototype.getCreaterPay3 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.CProtoRspGameConfig.CProtoCardItem.prototype.setCreaterPay3 = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoRspGameConfig.CProtoCardItem.prototype.clearCreaterPay3 = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItem.prototype.hasCreaterPay3 = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 creater_pay_4 = 5;
 * @return {number}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItem.prototype.getCreaterPay4 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.proto.CProtoRspGameConfig.CProtoCardItem.prototype.setCreaterPay4 = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.proto.CProtoRspGameConfig.CProtoCardItem.prototype.clearCreaterPay4 = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItem.prototype.hasCreaterPay4 = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 creater_pay_5 = 6;
 * @return {number}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItem.prototype.getCreaterPay5 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.proto.CProtoRspGameConfig.CProtoCardItem.prototype.setCreaterPay5 = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.proto.CProtoRspGameConfig.CProtoCardItem.prototype.clearCreaterPay5 = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItem.prototype.hasCreaterPay5 = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 creater_pay_6 = 7;
 * @return {number}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItem.prototype.getCreaterPay6 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.proto.CProtoRspGameConfig.CProtoCardItem.prototype.setCreaterPay6 = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.proto.CProtoRspGameConfig.CProtoCardItem.prototype.clearCreaterPay6 = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItem.prototype.hasCreaterPay6 = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRspGameConfig.CProtoCardItemPK, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspGameConfig.CProtoCardItemPK.displayName = 'proto.proto.CProtoRspGameConfig.CProtoCardItemPK';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspGameConfig.CProtoCardItemPK.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspGameConfig.CProtoCardItemPK} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameMax: jspb.Message.getField(msg, 1),
    createrPay: jspb.Message.getField(msg, 2),
    aaPay1: jspb.Message.getField(msg, 3),
    aaPay2: jspb.Message.getField(msg, 4),
    aaPay3: jspb.Message.getField(msg, 5),
    aaPay4: jspb.Message.getField(msg, 6),
    aaPay5: jspb.Message.getField(msg, 7),
    aaPay6: jspb.Message.getField(msg, 8),
    aaPay7: jspb.Message.getField(msg, 9)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspGameConfig.CProtoCardItemPK}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspGameConfig.CProtoCardItemPK;
  return proto.proto.CProtoRspGameConfig.CProtoCardItemPK.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspGameConfig.CProtoCardItemPK} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspGameConfig.CProtoCardItemPK}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGameMax(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCreaterPay(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAaPay1(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAaPay2(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAaPay3(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAaPay4(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAaPay5(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAaPay6(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAaPay7(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspGameConfig.CProtoCardItemPK.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspGameConfig.CProtoCardItemPK} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
};


/**
 * required int32 game_max = 1;
 * @return {number}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.getGameMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.setGameMax = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.clearGameMax = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.hasGameMax = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 creater_pay = 2;
 * @return {number}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.getCreaterPay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.setCreaterPay = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.clearCreaterPay = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.hasCreaterPay = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 aa_pay_1 = 3;
 * @return {number}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.getAaPay1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.setAaPay1 = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.clearAaPay1 = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.hasAaPay1 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 aa_pay_2 = 4;
 * @return {number}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.getAaPay2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.setAaPay2 = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.clearAaPay2 = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.hasAaPay2 = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 aa_pay_3 = 5;
 * @return {number}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.getAaPay3 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.setAaPay3 = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.clearAaPay3 = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.hasAaPay3 = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int32 aa_pay_4 = 6;
 * @return {number}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.getAaPay4 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.setAaPay4 = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.clearAaPay4 = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.hasAaPay4 = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required int32 aa_pay_5 = 7;
 * @return {number}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.getAaPay5 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.setAaPay5 = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.clearAaPay5 = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.hasAaPay5 = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required int32 aa_pay_6 = 8;
 * @return {number}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.getAaPay6 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.setAaPay6 = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.clearAaPay6 = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.hasAaPay6 = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * required int32 aa_pay_7 = 9;
 * @return {number}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.getAaPay7 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.setAaPay7 = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.clearAaPay7 = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspGameConfig.CProtoCardItemPK.prototype.hasAaPay7 = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated CProtoCardItem card_items = 1;
 * @return {!Array.<!proto.proto.CProtoRspGameConfig.CProtoCardItem>}
 */
proto.proto.CProtoRspGameConfig.prototype.getCardItemsList = function() {
  return /** @type{!Array.<!proto.proto.CProtoRspGameConfig.CProtoCardItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoRspGameConfig.CProtoCardItem, 1));
};


/** @param {!Array.<!proto.proto.CProtoRspGameConfig.CProtoCardItem>} value */
proto.proto.CProtoRspGameConfig.prototype.setCardItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.CProtoRspGameConfig.CProtoCardItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoRspGameConfig.CProtoCardItem}
 */
proto.proto.CProtoRspGameConfig.prototype.addCardItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.CProtoRspGameConfig.CProtoCardItem, opt_index);
};


proto.proto.CProtoRspGameConfig.prototype.clearCardItemsList = function() {
  this.setCardItemsList([]);
};


/**
 * required int32 game_id = 3;
 * @return {number}
 */
proto.proto.CProtoRspGameConfig.prototype.getGameId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoRspGameConfig.prototype.setGameId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoRspGameConfig.prototype.clearGameId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspGameConfig.prototype.hasGameId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 player_room_max = 4;
 * @return {number}
 */
proto.proto.CProtoRspGameConfig.prototype.getPlayerRoomMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.CProtoRspGameConfig.prototype.setPlayerRoomMax = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoRspGameConfig.prototype.clearPlayerRoomMax = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspGameConfig.prototype.hasPlayerRoomMax = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated CProtoCardItemPK card_items_pk = 5;
 * @return {!Array.<!proto.proto.CProtoRspGameConfig.CProtoCardItemPK>}
 */
proto.proto.CProtoRspGameConfig.prototype.getCardItemsPkList = function() {
  return /** @type{!Array.<!proto.proto.CProtoRspGameConfig.CProtoCardItemPK>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoRspGameConfig.CProtoCardItemPK, 5));
};


/** @param {!Array.<!proto.proto.CProtoRspGameConfig.CProtoCardItemPK>} value */
proto.proto.CProtoRspGameConfig.prototype.setCardItemsPkList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.proto.CProtoRspGameConfig.CProtoCardItemPK=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoRspGameConfig.CProtoCardItemPK}
 */
proto.proto.CProtoRspGameConfig.prototype.addCardItemsPk = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.proto.CProtoRspGameConfig.CProtoCardItemPK, opt_index);
};


proto.proto.CProtoRspGameConfig.prototype.clearCardItemsPkList = function() {
  this.setCardItemsPkList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifySettleDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoNotifySettleDetails.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoNotifySettleDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifySettleDetails.displayName = 'proto.proto.CProtoNotifySettleDetails';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoNotifySettleDetails.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifySettleDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifySettleDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifySettleDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifySettleDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    selfItemsList: jspb.Message.toObjectList(msg.getSelfItemsList(),
    proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.toObject, includeInstance),
    scoreItemsList: jspb.Message.toObjectList(msg.getScoreItemsList(),
    proto.proto.CProtoNotifySettleDetails.CProtoScoreItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifySettleDetails}
 */
proto.proto.CProtoNotifySettleDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifySettleDetails;
  return proto.proto.CProtoNotifySettleDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifySettleDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifySettleDetails}
 */
proto.proto.CProtoNotifySettleDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.CProtoNotifySettleDetails.CProtoSelfItem;
      reader.readMessage(value,proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.deserializeBinaryFromReader);
      msg.addSelfItems(value);
      break;
    case 2:
      var value = new proto.proto.CProtoNotifySettleDetails.CProtoScoreItem;
      reader.readMessage(value,proto.proto.CProtoNotifySettleDetails.CProtoScoreItem.deserializeBinaryFromReader);
      msg.addScoreItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifySettleDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifySettleDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifySettleDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifySettleDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelfItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.serializeBinaryToWriter
    );
  }
  f = message.getScoreItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.CProtoNotifySettleDetails.CProtoScoreItem.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.CProtoNotifySettleDetails.emType = {
  EMTYPE_ZIMO: 1,
  EMTYPE_BEIZIMO: 2,
  EMTYPE_JIEPAO: 3,
  EMTYPE_DIANPAO: 4,
  EMTYPE_CHAJIAO: 5,
  EMTYPE_BEICHAJIAO: 6
};

/**
 * @enum {number}
 */
proto.proto.CProtoNotifySettleDetails.emSubType = {
  EMSUBTYPE_HU: 1,
  EMSUBTYPE_GANG: 2,
  EMSUBTYPE_SELFBAOJIAO: 3,
  EMSUBTYPE_OPPOBAOJIAO: 4
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem.displayName = 'proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    subType: jspb.Message.getField(msg, 1),
    huType: jspb.Message.getField(msg, 2),
    fanNum: jspb.Message.getField(msg, 3),
    subScore: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem}
 */
proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem;
  return proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem}
 */
proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSubType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHuType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFanNum(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSubScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * required int32 sub_type = 1;
 * @return {number}
 */
proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem.prototype.getSubType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem.prototype.setSubType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem.prototype.clearSubType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem.prototype.hasSubType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 hu_type = 2;
 * @return {number}
 */
proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem.prototype.getHuType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem.prototype.setHuType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem.prototype.clearHuType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem.prototype.hasHuType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 fan_num = 3;
 * @return {number}
 */
proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem.prototype.getFanNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem.prototype.setFanNum = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem.prototype.clearFanNum = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem.prototype.hasFanNum = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 sub_score = 4;
 * @return {number}
 */
proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem.prototype.getSubScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem.prototype.setSubScore = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem.prototype.clearSubScore = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem.prototype.hasSubScore = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifySettleDetails.CProtoSelfItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoNotifySettleDetails.CProtoSelfItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.displayName = 'proto.proto.CProtoNotifySettleDetails.CProtoSelfItem';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifySettleDetails.CProtoSelfItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    fanSum: jspb.Message.getField(msg, 2),
    score: jspb.Message.getField(msg, 3),
    oppoSeatid: jspb.Message.getField(msg, 4),
    subItemsList: jspb.Message.toObjectList(msg.getSubItemsList(),
    proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifySettleDetails.CProtoSelfItem}
 */
proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifySettleDetails.CProtoSelfItem;
  return proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifySettleDetails.CProtoSelfItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifySettleDetails.CProtoSelfItem}
 */
proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFanSum(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOppoSeatid(value);
      break;
    case 5:
      var value = new proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem;
      reader.readMessage(value,proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem.deserializeBinaryFromReader);
      msg.addSubItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifySettleDetails.CProtoSelfItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getSubItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 type = 1;
 * @return {number}
 */
proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 fan_sum = 2;
 * @return {number}
 */
proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.prototype.getFanSum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.prototype.setFanSum = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.prototype.clearFanSum = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.prototype.hasFanSum = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 score = 3;
 * @return {number}
 */
proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.prototype.setScore = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.prototype.clearScore = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.prototype.hasScore = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 oppo_seatid = 4;
 * @return {number}
 */
proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.prototype.getOppoSeatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.prototype.setOppoSeatid = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.prototype.clearOppoSeatid = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.prototype.hasOppoSeatid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated CProtoSubSelfItem sub_items = 5;
 * @return {!Array.<!proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem>}
 */
proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.prototype.getSubItemsList = function() {
  return /** @type{!Array.<!proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem, 5));
};


/** @param {!Array.<!proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem>} value */
proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.prototype.setSubItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem}
 */
proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.prototype.addSubItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.proto.CProtoNotifySettleDetails.CProtoSubSelfItem, opt_index);
};


proto.proto.CProtoNotifySettleDetails.CProtoSelfItem.prototype.clearSubItemsList = function() {
  this.setSubItemsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifySettleDetails.CProtoScoreItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifySettleDetails.CProtoScoreItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifySettleDetails.CProtoScoreItem.displayName = 'proto.proto.CProtoNotifySettleDetails.CProtoScoreItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifySettleDetails.CProtoScoreItem.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifySettleDetails.CProtoScoreItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifySettleDetails.CProtoScoreItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifySettleDetails.CProtoScoreItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatId: jspb.Message.getField(msg, 1),
    score: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifySettleDetails.CProtoScoreItem}
 */
proto.proto.CProtoNotifySettleDetails.CProtoScoreItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifySettleDetails.CProtoScoreItem;
  return proto.proto.CProtoNotifySettleDetails.CProtoScoreItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifySettleDetails.CProtoScoreItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifySettleDetails.CProtoScoreItem}
 */
proto.proto.CProtoNotifySettleDetails.CProtoScoreItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeatId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifySettleDetails.CProtoScoreItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifySettleDetails.CProtoScoreItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifySettleDetails.CProtoScoreItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifySettleDetails.CProtoScoreItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 seat_id = 1;
 * @return {number}
 */
proto.proto.CProtoNotifySettleDetails.CProtoScoreItem.prototype.getSeatId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifySettleDetails.CProtoScoreItem.prototype.setSeatId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifySettleDetails.CProtoScoreItem.prototype.clearSeatId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifySettleDetails.CProtoScoreItem.prototype.hasSeatId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 score = 2;
 * @return {number}
 */
proto.proto.CProtoNotifySettleDetails.CProtoScoreItem.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifySettleDetails.CProtoScoreItem.prototype.setScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifySettleDetails.CProtoScoreItem.prototype.clearScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifySettleDetails.CProtoScoreItem.prototype.hasScore = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated CProtoSelfItem self_items = 1;
 * @return {!Array.<!proto.proto.CProtoNotifySettleDetails.CProtoSelfItem>}
 */
proto.proto.CProtoNotifySettleDetails.prototype.getSelfItemsList = function() {
  return /** @type{!Array.<!proto.proto.CProtoNotifySettleDetails.CProtoSelfItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoNotifySettleDetails.CProtoSelfItem, 1));
};


/** @param {!Array.<!proto.proto.CProtoNotifySettleDetails.CProtoSelfItem>} value */
proto.proto.CProtoNotifySettleDetails.prototype.setSelfItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.CProtoNotifySettleDetails.CProtoSelfItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoNotifySettleDetails.CProtoSelfItem}
 */
proto.proto.CProtoNotifySettleDetails.prototype.addSelfItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.CProtoNotifySettleDetails.CProtoSelfItem, opt_index);
};


proto.proto.CProtoNotifySettleDetails.prototype.clearSelfItemsList = function() {
  this.setSelfItemsList([]);
};


/**
 * repeated CProtoScoreItem score_items = 2;
 * @return {!Array.<!proto.proto.CProtoNotifySettleDetails.CProtoScoreItem>}
 */
proto.proto.CProtoNotifySettleDetails.prototype.getScoreItemsList = function() {
  return /** @type{!Array.<!proto.proto.CProtoNotifySettleDetails.CProtoScoreItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoNotifySettleDetails.CProtoScoreItem, 2));
};


/** @param {!Array.<!proto.proto.CProtoNotifySettleDetails.CProtoScoreItem>} value */
proto.proto.CProtoNotifySettleDetails.prototype.setScoreItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.CProtoNotifySettleDetails.CProtoScoreItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoNotifySettleDetails.CProtoScoreItem}
 */
proto.proto.CProtoNotifySettleDetails.prototype.addScoreItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.CProtoNotifySettleDetails.CProtoScoreItem, opt_index);
};


proto.proto.CProtoNotifySettleDetails.prototype.clearScoreItemsList = function() {
  this.setScoreItemsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifySettleAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoNotifySettleAccount.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoNotifySettleAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifySettleAccount.displayName = 'proto.proto.CProtoNotifySettleAccount';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoNotifySettleAccount.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifySettleAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifySettleAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifySettleAccount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifySettleAccount.toObject = function(includeInstance, msg) {
  var f, obj = {
    scoreItemsList: jspb.Message.toObjectList(msg.getScoreItemsList(),
    proto.proto.CProtoNotifySettleAccount.CProtoScoreItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifySettleAccount}
 */
proto.proto.CProtoNotifySettleAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifySettleAccount;
  return proto.proto.CProtoNotifySettleAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifySettleAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifySettleAccount}
 */
proto.proto.CProtoNotifySettleAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.CProtoNotifySettleAccount.CProtoScoreItem;
      reader.readMessage(value,proto.proto.CProtoNotifySettleAccount.CProtoScoreItem.deserializeBinaryFromReader);
      msg.addScoreItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifySettleAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifySettleAccount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifySettleAccount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifySettleAccount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScoreItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.CProtoNotifySettleAccount.CProtoScoreItem.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.CProtoNotifySettleAccount.emUserType = {
  EMUSERTYPE_NONE: 0,
  EMUSERTYPE_ZIMO: 1,
  EMUSERTYPE_BEIZIMO: 2,
  EMUSERTYPE_JIEPAO: 3,
  EMUSERTYPE_DIANPAO: 4,
  EMUSERTYPE_CHAJIAO: 5,
  EMUSERTYPE_BEICHAJIAO: 6
};

/**
 * @enum {number}
 */
proto.proto.CProtoNotifySettleAccount.emScoreType = {
  EMSCORETYPE_HU: 1,
  EMSCORETYPE_GANG: 2,
  EMSCORETYPE_BAOJIAO: 3,
  EMSCORETYPE_OPPOBAOJIAO: 4
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifySettleAccount.CProtoUserScore = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifySettleAccount.CProtoUserScore, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifySettleAccount.CProtoUserScore.displayName = 'proto.proto.CProtoNotifySettleAccount.CProtoUserScore';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifySettleAccount.CProtoUserScore.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifySettleAccount.CProtoUserScore.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifySettleAccount.CProtoUserScore} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifySettleAccount.CProtoUserScore.toObject = function(includeInstance, msg) {
  var f, obj = {
    scoreType: jspb.Message.getField(msg, 1),
    huType: jspb.Message.getField(msg, 2),
    fanNum: jspb.Message.getField(msg, 3),
    subScore: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifySettleAccount.CProtoUserScore}
 */
proto.proto.CProtoNotifySettleAccount.CProtoUserScore.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifySettleAccount.CProtoUserScore;
  return proto.proto.CProtoNotifySettleAccount.CProtoUserScore.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifySettleAccount.CProtoUserScore} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifySettleAccount.CProtoUserScore}
 */
proto.proto.CProtoNotifySettleAccount.CProtoUserScore.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.proto.CProtoNotifySettleAccount.emScoreType} */ (reader.readEnum());
      msg.setScoreType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHuType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFanNum(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSubScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifySettleAccount.CProtoUserScore.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifySettleAccount.CProtoUserScore.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifySettleAccount.CProtoUserScore} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifySettleAccount.CProtoUserScore.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.proto.CProtoNotifySettleAccount.emScoreType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional emScoreType score_type = 1;
 * @return {!proto.proto.CProtoNotifySettleAccount.emScoreType}
 */
proto.proto.CProtoNotifySettleAccount.CProtoUserScore.prototype.getScoreType = function() {
  return /** @type {!proto.proto.CProtoNotifySettleAccount.emScoreType} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {!proto.proto.CProtoNotifySettleAccount.emScoreType} value */
proto.proto.CProtoNotifySettleAccount.CProtoUserScore.prototype.setScoreType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifySettleAccount.CProtoUserScore.prototype.clearScoreType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifySettleAccount.CProtoUserScore.prototype.hasScoreType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 hu_type = 2;
 * @return {number}
 */
proto.proto.CProtoNotifySettleAccount.CProtoUserScore.prototype.getHuType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifySettleAccount.CProtoUserScore.prototype.setHuType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifySettleAccount.CProtoUserScore.prototype.clearHuType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifySettleAccount.CProtoUserScore.prototype.hasHuType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 fan_num = 3;
 * @return {number}
 */
proto.proto.CProtoNotifySettleAccount.CProtoUserScore.prototype.getFanNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifySettleAccount.CProtoUserScore.prototype.setFanNum = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoNotifySettleAccount.CProtoUserScore.prototype.clearFanNum = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifySettleAccount.CProtoUserScore.prototype.hasFanNum = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 sub_score = 4;
 * @return {number}
 */
proto.proto.CProtoNotifySettleAccount.CProtoUserScore.prototype.getSubScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifySettleAccount.CProtoUserScore.prototype.setSubScore = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proto.CProtoNotifySettleAccount.CProtoUserScore.prototype.clearSubScore = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifySettleAccount.CProtoUserScore.prototype.hasSubScore = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifySettleAccount.CProtoScoreItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoNotifySettleAccount.CProtoScoreItem.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoNotifySettleAccount.CProtoScoreItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifySettleAccount.CProtoScoreItem.displayName = 'proto.proto.CProtoNotifySettleAccount.CProtoScoreItem';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoNotifySettleAccount.CProtoScoreItem.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifySettleAccount.CProtoScoreItem.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifySettleAccount.CProtoScoreItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifySettleAccount.CProtoScoreItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifySettleAccount.CProtoScoreItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatId: jspb.Message.getField(msg, 1),
    userType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    totalScore: jspb.Message.getField(msg, 3),
    subItemsList: jspb.Message.toObjectList(msg.getSubItemsList(),
    proto.proto.CProtoNotifySettleAccount.CProtoUserScore.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifySettleAccount.CProtoScoreItem}
 */
proto.proto.CProtoNotifySettleAccount.CProtoScoreItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifySettleAccount.CProtoScoreItem;
  return proto.proto.CProtoNotifySettleAccount.CProtoScoreItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifySettleAccount.CProtoScoreItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifySettleAccount.CProtoScoreItem}
 */
proto.proto.CProtoNotifySettleAccount.CProtoScoreItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeatId(value);
      break;
    case 2:
      var value = /** @type {!proto.proto.CProtoNotifySettleAccount.emUserType} */ (reader.readEnum());
      msg.setUserType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalScore(value);
      break;
    case 4:
      var value = new proto.proto.CProtoNotifySettleAccount.CProtoUserScore;
      reader.readMessage(value,proto.proto.CProtoNotifySettleAccount.CProtoUserScore.deserializeBinaryFromReader);
      msg.addSubItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifySettleAccount.CProtoScoreItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifySettleAccount.CProtoScoreItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifySettleAccount.CProtoScoreItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifySettleAccount.CProtoScoreItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {!proto.proto.CProtoNotifySettleAccount.emUserType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getSubItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.proto.CProtoNotifySettleAccount.CProtoUserScore.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 seat_id = 1;
 * @return {number}
 */
proto.proto.CProtoNotifySettleAccount.CProtoScoreItem.prototype.getSeatId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifySettleAccount.CProtoScoreItem.prototype.setSeatId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifySettleAccount.CProtoScoreItem.prototype.clearSeatId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifySettleAccount.CProtoScoreItem.prototype.hasSeatId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional emUserType user_type = 2;
 * @return {!proto.proto.CProtoNotifySettleAccount.emUserType}
 */
proto.proto.CProtoNotifySettleAccount.CProtoScoreItem.prototype.getUserType = function() {
  return /** @type {!proto.proto.CProtoNotifySettleAccount.emUserType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.proto.CProtoNotifySettleAccount.emUserType} value */
proto.proto.CProtoNotifySettleAccount.CProtoScoreItem.prototype.setUserType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifySettleAccount.CProtoScoreItem.prototype.clearUserType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifySettleAccount.CProtoScoreItem.prototype.hasUserType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 total_score = 3;
 * @return {number}
 */
proto.proto.CProtoNotifySettleAccount.CProtoScoreItem.prototype.getTotalScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifySettleAccount.CProtoScoreItem.prototype.setTotalScore = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoNotifySettleAccount.CProtoScoreItem.prototype.clearTotalScore = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifySettleAccount.CProtoScoreItem.prototype.hasTotalScore = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated CProtoUserScore sub_items = 4;
 * @return {!Array.<!proto.proto.CProtoNotifySettleAccount.CProtoUserScore>}
 */
proto.proto.CProtoNotifySettleAccount.CProtoScoreItem.prototype.getSubItemsList = function() {
  return /** @type{!Array.<!proto.proto.CProtoNotifySettleAccount.CProtoUserScore>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoNotifySettleAccount.CProtoUserScore, 4));
};


/** @param {!Array.<!proto.proto.CProtoNotifySettleAccount.CProtoUserScore>} value */
proto.proto.CProtoNotifySettleAccount.CProtoScoreItem.prototype.setSubItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.proto.CProtoNotifySettleAccount.CProtoUserScore=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoNotifySettleAccount.CProtoUserScore}
 */
proto.proto.CProtoNotifySettleAccount.CProtoScoreItem.prototype.addSubItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.proto.CProtoNotifySettleAccount.CProtoUserScore, opt_index);
};


proto.proto.CProtoNotifySettleAccount.CProtoScoreItem.prototype.clearSubItemsList = function() {
  this.setSubItemsList([]);
};


/**
 * repeated CProtoScoreItem score_items = 1;
 * @return {!Array.<!proto.proto.CProtoNotifySettleAccount.CProtoScoreItem>}
 */
proto.proto.CProtoNotifySettleAccount.prototype.getScoreItemsList = function() {
  return /** @type{!Array.<!proto.proto.CProtoNotifySettleAccount.CProtoScoreItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoNotifySettleAccount.CProtoScoreItem, 1));
};


/** @param {!Array.<!proto.proto.CProtoNotifySettleAccount.CProtoScoreItem>} value */
proto.proto.CProtoNotifySettleAccount.prototype.setScoreItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.CProtoNotifySettleAccount.CProtoScoreItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoNotifySettleAccount.CProtoScoreItem}
 */
proto.proto.CProtoNotifySettleAccount.prototype.addScoreItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.CProtoNotifySettleAccount.CProtoScoreItem, opt_index);
};


proto.proto.CProtoNotifySettleAccount.prototype.clearScoreItemsList = function() {
  this.setScoreItemsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyStartChooseCard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifyStartChooseCard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyStartChooseCard.displayName = 'proto.proto.CProtoNotifyStartChooseCard';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyStartChooseCard.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyStartChooseCard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyStartChooseCard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyStartChooseCard.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: jspb.Message.getField(msg, 1),
    count: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyStartChooseCard}
 */
proto.proto.CProtoNotifyStartChooseCard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyStartChooseCard;
  return proto.proto.CProtoNotifyStartChooseCard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyStartChooseCard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyStartChooseCard}
 */
proto.proto.CProtoNotifyStartChooseCard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAction(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyStartChooseCard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyStartChooseCard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyStartChooseCard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyStartChooseCard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 action = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyStartChooseCard.prototype.getAction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyStartChooseCard.prototype.setAction = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyStartChooseCard.prototype.clearAction = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyStartChooseCard.prototype.hasAction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 count = 2;
 * @return {number}
 */
proto.proto.CProtoNotifyStartChooseCard.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyStartChooseCard.prototype.setCount = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifyStartChooseCard.prototype.clearCount = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyStartChooseCard.prototype.hasCount = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoReqChooseCard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoReqChooseCard.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoReqChooseCard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoReqChooseCard.displayName = 'proto.proto.CProtoReqChooseCard';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoReqChooseCard.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoReqChooseCard.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoReqChooseCard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoReqChooseCard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqChooseCard.toObject = function(includeInstance, msg) {
  var f, obj = {
    cardsList: jspb.Message.toObjectList(msg.getCardsList(),
    proto.proto.CProtoCard.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoReqChooseCard}
 */
proto.proto.CProtoReqChooseCard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoReqChooseCard;
  return proto.proto.CProtoReqChooseCard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoReqChooseCard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoReqChooseCard}
 */
proto.proto.CProtoReqChooseCard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoCard.deserializeBinaryFromReader);
      msg.addCards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoReqChooseCard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoReqChooseCard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoReqChooseCard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoReqChooseCard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.CProtoCard.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CProtoCard cards = 1;
 * @return {!Array.<!proto.proto.CProtoCard>}
 */
proto.proto.CProtoReqChooseCard.prototype.getCardsList = function() {
  return /** @type{!Array.<!proto.proto.CProtoCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoCard, 1));
};


/** @param {!Array.<!proto.proto.CProtoCard>} value */
proto.proto.CProtoReqChooseCard.prototype.setCardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.CProtoCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoCard}
 */
proto.proto.CProtoReqChooseCard.prototype.addCards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.CProtoCard, opt_index);
};


proto.proto.CProtoReqChooseCard.prototype.clearCardsList = function() {
  this.setCardsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspChooseCard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoRspChooseCard.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoRspChooseCard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspChooseCard.displayName = 'proto.proto.CProtoRspChooseCard';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoRspChooseCard.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspChooseCard.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspChooseCard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspChooseCard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspChooseCard.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatid: jspb.Message.getField(msg, 1),
    action: jspb.Message.getField(msg, 2),
    count: jspb.Message.getField(msg, 3),
    cardsList: jspb.Message.toObjectList(msg.getCardsList(),
    proto.proto.CProtoCard.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspChooseCard}
 */
proto.proto.CProtoRspChooseCard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspChooseCard;
  return proto.proto.CProtoRspChooseCard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspChooseCard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspChooseCard}
 */
proto.proto.CProtoRspChooseCard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeatid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAction(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 4:
      var value = new proto.proto.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoCard.deserializeBinaryFromReader);
      msg.addCards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspChooseCard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspChooseCard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspChooseCard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspChooseCard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getCardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.proto.CProtoCard.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 seatid = 1;
 * @return {number}
 */
proto.proto.CProtoRspChooseCard.prototype.getSeatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspChooseCard.prototype.setSeatid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspChooseCard.prototype.clearSeatid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspChooseCard.prototype.hasSeatid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 action = 2;
 * @return {number}
 */
proto.proto.CProtoRspChooseCard.prototype.getAction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoRspChooseCard.prototype.setAction = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoRspChooseCard.prototype.clearAction = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspChooseCard.prototype.hasAction = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 count = 3;
 * @return {number}
 */
proto.proto.CProtoRspChooseCard.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.CProtoRspChooseCard.prototype.setCount = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.proto.CProtoRspChooseCard.prototype.clearCount = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspChooseCard.prototype.hasCount = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated CProtoCard cards = 4;
 * @return {!Array.<!proto.proto.CProtoCard>}
 */
proto.proto.CProtoRspChooseCard.prototype.getCardsList = function() {
  return /** @type{!Array.<!proto.proto.CProtoCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoCard, 4));
};


/** @param {!Array.<!proto.proto.CProtoCard>} value */
proto.proto.CProtoRspChooseCard.prototype.setCardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.proto.CProtoCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoCard}
 */
proto.proto.CProtoRspChooseCard.prototype.addCards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.proto.CProtoCard, opt_index);
};


proto.proto.CProtoRspChooseCard.prototype.clearCardsList = function() {
  this.setCardsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyChangeCard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoNotifyChangeCard.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoNotifyChangeCard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyChangeCard.displayName = 'proto.proto.CProtoNotifyChangeCard';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoNotifyChangeCard.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyChangeCard.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyChangeCard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyChangeCard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyChangeCard.toObject = function(includeInstance, msg) {
  var f, obj = {
    shift: jspb.Message.getField(msg, 1),
    cardsList: jspb.Message.toObjectList(msg.getCardsList(),
    proto.proto.CProtoCard.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyChangeCard}
 */
proto.proto.CProtoNotifyChangeCard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyChangeCard;
  return proto.proto.CProtoNotifyChangeCard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyChangeCard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyChangeCard}
 */
proto.proto.CProtoNotifyChangeCard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setShift(value);
      break;
    case 2:
      var value = new proto.proto.CProtoCard;
      reader.readMessage(value,proto.proto.CProtoCard.deserializeBinaryFromReader);
      msg.addCards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyChangeCard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyChangeCard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyChangeCard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyChangeCard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.CProtoCard.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 shift = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyChangeCard.prototype.getShift = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyChangeCard.prototype.setShift = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyChangeCard.prototype.clearShift = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyChangeCard.prototype.hasShift = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated CProtoCard cards = 2;
 * @return {!Array.<!proto.proto.CProtoCard>}
 */
proto.proto.CProtoNotifyChangeCard.prototype.getCardsList = function() {
  return /** @type{!Array.<!proto.proto.CProtoCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.CProtoCard, 2));
};


/** @param {!Array.<!proto.proto.CProtoCard>} value */
proto.proto.CProtoNotifyChangeCard.prototype.setCardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.CProtoCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CProtoCard}
 */
proto.proto.CProtoNotifyChangeCard.prototype.addCards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.CProtoCard, opt_index);
};


proto.proto.CProtoNotifyChangeCard.prototype.clearCardsList = function() {
  this.setCardsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyErrorCode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoNotifyErrorCode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyErrorCode.displayName = 'proto.proto.CProtoNotifyErrorCode';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyErrorCode.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyErrorCode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyErrorCode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyErrorCode.toObject = function(includeInstance, msg) {
  var f, obj = {
    err: jspb.Message.getField(msg, 1),
    errMsg: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyErrorCode}
 */
proto.proto.CProtoNotifyErrorCode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyErrorCode;
  return proto.proto.CProtoNotifyErrorCode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyErrorCode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyErrorCode}
 */
proto.proto.CProtoNotifyErrorCode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErr(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyErrorCode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyErrorCode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyErrorCode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyErrorCode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required int32 err = 1;
 * @return {number}
 */
proto.proto.CProtoNotifyErrorCode.prototype.getErr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoNotifyErrorCode.prototype.setErr = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoNotifyErrorCode.prototype.clearErr = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyErrorCode.prototype.hasErr = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string err_msg = 2;
 * @return {string}
 */
proto.proto.CProtoNotifyErrorCode.prototype.getErrMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.CProtoNotifyErrorCode.prototype.setErrMsg = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoNotifyErrorCode.prototype.clearErrMsg = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoNotifyErrorCode.prototype.hasErrMsg = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoNotifyBridgeGameServer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CProtoNotifyBridgeGameServer.repeatedFields_, null);
};
goog.inherits(proto.proto.CProtoNotifyBridgeGameServer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoNotifyBridgeGameServer.displayName = 'proto.proto.CProtoNotifyBridgeGameServer';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CProtoNotifyBridgeGameServer.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoNotifyBridgeGameServer.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoNotifyBridgeGameServer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoNotifyBridgeGameServer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyBridgeGameServer.toObject = function(includeInstance, msg) {
  var f, obj = {
    midListList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoNotifyBridgeGameServer}
 */
proto.proto.CProtoNotifyBridgeGameServer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoNotifyBridgeGameServer;
  return proto.proto.CProtoNotifyBridgeGameServer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoNotifyBridgeGameServer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoNotifyBridgeGameServer}
 */
proto.proto.CProtoNotifyBridgeGameServer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addMidList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoNotifyBridgeGameServer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoNotifyBridgeGameServer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoNotifyBridgeGameServer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoNotifyBridgeGameServer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMidListList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      1,
      f
    );
  }
};


/**
 * repeated int32 mid_list = 1;
 * @return {!Array.<number>}
 */
proto.proto.CProtoNotifyBridgeGameServer.prototype.getMidListList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.proto.CProtoNotifyBridgeGameServer.prototype.setMidListList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.CProtoNotifyBridgeGameServer.prototype.addMidList = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.proto.CProtoNotifyBridgeGameServer.prototype.clearMidListList = function() {
  this.setMidListList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspServerRegist = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRspServerRegist, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspServerRegist.displayName = 'proto.proto.CProtoRspServerRegist';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspServerRegist.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspServerRegist.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspServerRegist} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspServerRegist.toObject = function(includeInstance, msg) {
  var f, obj = {
    err: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspServerRegist}
 */
proto.proto.CProtoRspServerRegist.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspServerRegist;
  return proto.proto.CProtoRspServerRegist.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspServerRegist} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspServerRegist}
 */
proto.proto.CProtoRspServerRegist.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.proto.error_code} */ (reader.readEnum());
      msg.setErr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspServerRegist.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspServerRegist.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspServerRegist} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspServerRegist.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.proto.error_code} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * required error_code err = 1;
 * @return {!proto.proto.error_code}
 */
proto.proto.CProtoRspServerRegist.prototype.getErr = function() {
  return /** @type {!proto.proto.error_code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.proto.error_code} value */
proto.proto.CProtoRspServerRegist.prototype.setErr = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspServerRegist.prototype.clearErr = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspServerRegist.prototype.hasErr = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CProtoRspReconnectRoomInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CProtoRspReconnectRoomInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CProtoRspReconnectRoomInfo.displayName = 'proto.proto.CProtoRspReconnectRoomInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CProtoRspReconnectRoomInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CProtoRspReconnectRoomInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CProtoRspReconnectRoomInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspReconnectRoomInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    mIgametype: jspb.Message.getField(msg, 1),
    mIroomid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CProtoRspReconnectRoomInfo}
 */
proto.proto.CProtoRspReconnectRoomInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CProtoRspReconnectRoomInfo;
  return proto.proto.CProtoRspReconnectRoomInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CProtoRspReconnectRoomInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CProtoRspReconnectRoomInfo}
 */
proto.proto.CProtoRspReconnectRoomInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMIgametype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMIroomid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CProtoRspReconnectRoomInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CProtoRspReconnectRoomInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CProtoRspReconnectRoomInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CProtoRspReconnectRoomInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 m_iGameType = 1;
 * @return {number}
 */
proto.proto.CProtoRspReconnectRoomInfo.prototype.getMIgametype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.CProtoRspReconnectRoomInfo.prototype.setMIgametype = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proto.CProtoRspReconnectRoomInfo.prototype.clearMIgametype = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspReconnectRoomInfo.prototype.hasMIgametype = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 m_iRoomID = 2;
 * @return {number}
 */
proto.proto.CProtoRspReconnectRoomInfo.prototype.getMIroomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.CProtoRspReconnectRoomInfo.prototype.setMIroomid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.proto.CProtoRspReconnectRoomInfo.prototype.clearMIroomid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CProtoRspReconnectRoomInfo.prototype.hasMIroomid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.proto.cmd = {
  REQLOGIN: 1,
  RSPLOGIN: 2,
  REQLOGINSERVER: 11,
  RSPLOGINSERVER: 12,
  NOTIFYFORTUNE: 13,
  REQHEARTBEAT: 15,
  RSPHEARTBEAT: 16,
  REQCREATECSROOM: 20,
  RSPCREATECSROOM: 21,
  REQJOINROOM: 22,
  RSPJOINROOM: 23,
  REQQUITROOM: 24,
  RSPQUITROOM: 25,
  REQDISMISSROOM: 26,
  RSPDISMISSROOM: 27,
  REQACKDISMISS: 28,
  NOTIFYENTERROOM: 30,
  NOTIFYADDPLAYER: 31,
  NOTIFYREMOVEPLAYER: 32,
  NOTIFYROOMSTATE: 35,
  REQREADY: 36,
  RSPREADY: 37,
  NOTIFYOFFLINESTATE: 40,
  NOTIFYROUNDSTATE: 41,
  NOTIFYDINGQUE: 42,
  REQDINGQUE: 43,
  RSQDINGQUE: 44,
  NOTIFYDINGQUEOVER: 45,
  NOTIFYSTARTGAME: 50,
  NOTIFYMYTURNTOSHOW: 51,
  NOTIFYSHOWTILE: 52,
  NOTIFYBROADCASTSHOW: 53,
  NOTIFYMAKEDECISIONCS: 54,
  REQPLAYERDECISION: 55,
  RSPBROADCASTDECISION: 56,
  REQCHATMSG: 57,
  RSPCHATMSG: 58,
  NOTIFYROUNDREPORT: 60,
  NOTIFYQISHOUHU: 65,
  REQQISHOUHU: 66,
  RSPQISHOUHU: 67,
  NOTIFYHAIDILAOYUE: 69,
  REQHAIDILAOYUE: 70,
  NOTIFYHAIDICARD: 71,
  NOTIFYFINALREPORT: 80,
  NOTIFYOUTHU: 81,
  NOTIFYOPTAFTEROUTHU: 82,
  REQOPTAFTEROUTHU: 83,
  NOTIFYREMOVEBUGANG: 89,
  NOTIFYCANBAOJIAO: 90,
  REQBAOJIAOOPT: 91,
  RSPBAOJIAOOPT: 92,
  REQLIMITFREE: 93,
  RSPLIMITFREE: 94,
  REQQUERYROOMINFO: 97,
  RSPQUERYROOMINFO: 98,
  NOTIFYSTARTCHOOSECARD: 106,
  REQCHOOSECARD: 107,
  RSPCHOOSECARD: 108,
  NOTIFYCHANGECARD: 109,
  RSPAFTERGANG: 117,
  REQLOCATIONS: 119,
  RSPLOCATIONS: 120,
  REQGAMECONFIG: 121,
  RSPGAMECONFIG: 122,
  NOTIFYSETTLEDETAILS: 123,
  NOTIFYSETTLEACCOUNT: 124,
  NOTIFYOTHERDEVICELOGIN: 304,
  NOTIFYSERVERTOSTOP: 305,
  REQGMCMD: 311,
  RSPGMCMD: 312,
  NOTIFYNOTICE: 313,
  RSPRECONNECTROOMINFO: 314,
  REQMYROOMLIST: 320,
  RSPMYROOMLIST: 321,
  NOTIFYROOMPLAYERCOUNT: 322,
  NOTIFYCREATERREMOVEROOM: 323,
  NOTIFYRETURNDIAMOND: 324,
  NOTIFYERRORCODE: 325,
  CLIENT_TO_GAME_CMD_END: 1000,
  REQHISTORYRECORD: 1090,
  RSPHISTORYRECORD: 1091,
  REQREPLAY: 1092,
  RSPREPLAY: 1093,
  REQSHAREREPLAY: 1105,
  RSPSHAREREPLAY: 1106,
  REQSHAREBTN: 1107,
  RSPSHAREBTN: 1108,
  REQHISTORYROUND: 1110,
  RSPHISTORYROUND: 1111,
  REQTRANSFERLOG: 1112,
  RSPTRANSFERLOG: 1113,
  REQTRANSFERLOGBYTIME: 1114,
  RSPTRANSFERLOGBYTIME: 1115,
  REQTRANSFERLOGBYMID: 1116,
  RSPTRANSFERLOGBYMID: 1117,
  REQSTATDATA: 1118,
  RSPSTATDATA: 1119,
  REQACTIVITY: 1120,
  RSPACTIVITY: 1121,
  REQGETFREEDIAMOND: 1122,
  RSPGETFREEDIAMOND: 1123,
  REQSHAREDDIAMOND: 1124,
  RSPSHAREDDIAMOND: 1125,
  REQTRANSFERCARD: 1129,
  RSPTRANSFERCARD: 1130,
  REQTARGETINFO: 1131,
  RSPTARGETINFO: 1132,
  REQSETUSERTYPE: 1134,
  RSPSETUSERTYPE: 1135,
  REQFENGUSER: 1136,
  RSPFENGUSER: 1137,
  REQQUERYROOM: 1138,
  RSPQUERYROOM: 1139,
  REQGMDISMISSROOM: 1140,
  RSPGMDISMISSROOM: 1141,
  REQCARDLOG: 1142,
  RSQCARDLOG: 1143,
  REQUSERDATA: 1144,
  RSPUSERDATA: 1145,
  REQREPLAYSSS: 1150,
  RSPREPLAYSSS: 1151,
  CLIENT_CMD_END: 2000,
  REQSERVERREGIST: 2001,
  NOTIFYCLIENTCLOSED: 2002,
  NOTIFYADDCARDCOUNT: 2005,
  NOTIFYENTERGAMESERVER: 2006,
  NOTIFYLEAVEGAMESERVER: 2007,
  RSPSERVERREGIST: 2008,
  SERVER_INNER_CMD_END: 3000,
  REQWRITELOG: 3001,
  CLINENT_TO_POKER_CMD_END: 8000
};

/**
 * @enum {number}
 */
proto.proto.error_code = {
  ERROR_OK: 0,
  ERROR_MSG_PARSE_FAILED: -1,
  ERROR_TOKEN_EXPIRED: -2,
  ERROR_TOKEN_ERROR: -3,
  ERROR_HEAD_PARSE_FAILED: -4,
  ERROR_NOT_FOUND_SERVER: -5,
  ERROR_LOAD_DATA_FAILED: -6,
  ERROR_SERVER_ERROR: -7,
  ERROR_ACCOUNT_BLACKED: -8,
  ERROR_CARD_LACK: -9,
  ERROR_STILL_IN_GAME: -10,
  ERROR_ROOM_COUNT_LIMIT: -11,
  ERROR_CFO_CONFLICT_WITH_AA: -12,
  ERROR_SERVER_UPDATED: -13,
  ERROR_ROOM_FULL: -14,
  ERROR_ROOM_NOT_EXIST: -15,
  ERROR_SERVER_CONNECTION_GONE: -16,
  ERROR_REGIST_ID_CONFLICT: -17,
  ERROR_REGIST_TYPE_CONFLICT: -18,
  ERROR_REGIST_ROOM_CONFLICT: -19,
  ERROR_INVALID_CMD: -20,
  ERROR_NEED_AUTO_UPDATE: -41,
  ERROR_NEED_FORCE_UPDATE: -42,
  ERROR_DOUBLE_FAIL: -43,
  ERROR_ZJH_GIVEUPED: -44,
  ERROR_DDZ_DA_PAI: -50,
  ERROR_DDZ_GRAP_DIZHU: -52,
  ERROR_DDZ_JIAO_FEN: -53,
  ERROR_DDZ_MING_PAI: -54,
  ERROR_DDZ_DOUBLE: -55,
  ERROR_DDZ_TUOGUAN: -56,
  ERROR_KHP_DA_PAI: -60,
  ERROR_KHP_PRESIDENT: -62,
  ERROR_KHP_SHOW_CARD: -63,
  ERROR_KHP_GO_STOP: -64,
  ERROR_KHP_CHOOSE_CARD: -65,
  ERROR_KHP_TRANSFER_CARD: -66,
  ERROR_LYC_HANDHOG: -80,
  ERROR_LYC_BET: -81,
  ERROR_PHP_DB_ERROR: -101,
  ERROR_PHP_WX_TOKEN_AUTH_FAILED: -102
};

/**
 * @enum {number}
 */
proto.proto.emPlayType = {
  EMPLAYTYPE_KAERTIAO: 3,
  EMPLAYTYPE_KAXINWU: 4,
  EMPLAYTYPE_LINCANG: 5,
  EMPLAYTYPE_XUEZHAN: 6,
  EMPLAYTYPE_XIANGYUN: 7,
  EMPLAYTYPE_SHISANSHUI: 8,
  EMPLAYTYPE_DOUDIZHU: 9,
  EMPLAYTYPE_LAOYANCAI: 10,
  EMPLAYTYPE_KOREAHUAPAI: 11,
  EMPLAYTYPE_ZHAJINHUA: 21,
  EMPLAYTYPE_DOUNIU: 22
};

goog.object.extend(exports, proto.proto);
